
c:/Users/jaafe/OneDrive/Particle_workspace/Real_Time_Tracker/target/Real_Time_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c318  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000a04  40024000  0808c330  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000004e0  20000400  0808cd34  00030400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000b84  200008e0  200008e0  000408e0  2**3
                  ALLOC
  5 .module_info_suffix 00000028  0808d214  0808d214  0003d214  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  0808d23c  0808d23c  0003d23c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ddeef  00000000  00000000  0003d240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001406c  00000000  00000000  0011b12f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001d4eb  00000000  00000000  0012f19b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002890  00000000  00000000  0014c686  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000042a8  00000000  00000000  0014ef16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002bf51  00000000  00000000  001531be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002ef1a  00000000  00000000  0017f10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a1b9c  00000000  00000000  001ae029  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000dc74  00000000  00000000  0024fbc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	fc a7 08 08                                         ....

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f009 f9ef 	bl	8089410 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f009 fa0f 	bl	808945c <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	0808cd34 	.word	0x0808cd34
 808004c:	200008e0 	.word	0x200008e0
 8080050:	200008e0 	.word	0x200008e0
 8080054:	20001464 	.word	0x20001464
 8080058:	20001464 	.word	0x20001464

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f005 fc4d 	bl	80858fc <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	0808c2ec 	.word	0x0808c2ec
 8080084:	0808c330 	.word	0x0808c330

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f001 b900 	b.w	808128c <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f001 fb4b 	bl	8081728 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f005 bbf3 	b.w	8085880 <_post_loop>

0808009a <_Znwj>:
 808009a:	f004 bba9 	b.w	80847f0 <malloc>

0808009e <_ZdlPv>:
 808009e:	f004 bbaf 	b.w	8084800 <free>
	...

080800a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a6:	4a03      	ldr	r2, [pc, #12]	; (80800b4 <__cxa_pure_virtual+0x10>)
 80800a8:	2100      	movs	r1, #0
 80800aa:	200c      	movs	r0, #12
 80800ac:	f004 faba 	bl	8084624 <panic_>
 80800b0:	e7fe      	b.n	80800b0 <__cxa_pure_virtual+0xc>
 80800b2:	bf00      	nop
 80800b4:	08084275 	.word	0x08084275

080800b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b8:	7800      	ldrb	r0, [r0, #0]
 80800ba:	fab0 f080 	clz	r0, r0
 80800be:	0940      	lsrs	r0, r0, #5
 80800c0:	4770      	bx	lr

080800c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c2:	2301      	movs	r3, #1
 80800c4:	7003      	strb	r3, [r0, #0]
 80800c6:	4770      	bx	lr

080800c8 <_Z16autoSleepHandlerv>:
}


void autoSleepHandler() {
	// if no motion detected for AUTOSLEEP_TIME ms, go into sleep mode
	enter_standby_flag = true;
 80800c8:	4b01      	ldr	r3, [pc, #4]	; (80800d0 <_Z16autoSleepHandlerv+0x8>)
 80800ca:	2201      	movs	r2, #1
 80800cc:	701a      	strb	r2, [r3, #0]
 80800ce:	4770      	bx	lr
 80800d0:	20000c20 	.word	0x20000c20

080800d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800d4:	6803      	ldr	r3, [r0, #0]
 80800d6:	4718      	bx	r3

080800d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800d8:	2a01      	cmp	r2, #1
 80800da:	d002      	beq.n	80800e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800dc:	2a02      	cmp	r2, #2
 80800de:	d002      	beq.n	80800e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800e0:	e004      	b.n	80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800e2:	6001      	str	r1, [r0, #0]
	      break;
 80800e4:	e002      	b.n	80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800e6:	680b      	ldr	r3, [r1, #0]
 80800e8:	b100      	cbz	r0, 80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800ea:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800ec:	2000      	movs	r0, #0
 80800ee:	4770      	bx	lr

080800f0 <_ZNSt17_Function_handlerIFvtRK9ubx_buf_tEPS3_E9_M_invokeERKSt9_Any_dataOtS2_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80800f0:	b410      	push	{r4}
      {
	(*_Base::_M_get_pointer(__functor))(
 80800f2:	880c      	ldrh	r4, [r1, #0]
 80800f4:	6803      	ldr	r3, [r0, #0]
 80800f6:	4611      	mov	r1, r2
 80800f8:	4620      	mov	r0, r4
	    std::forward<_ArgTypes>(__args)...);
      }
 80800fa:	bc10      	pop	{r4}

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800fc:	4718      	bx	r3

080800fe <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800fe:	2a01      	cmp	r2, #1
 8080100:	d002      	beq.n	8080108 <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa>
 8080102:	2a02      	cmp	r2, #2
 8080104:	d002      	beq.n	808010c <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xe>
 8080106:	e004      	b.n	8080112 <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080108:	6001      	str	r1, [r0, #0]
	      break;
 808010a:	e002      	b.n	8080112 <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808010c:	680b      	ldr	r3, [r1, #0]
 808010e:	b100      	cbz	r0, 8080112 <_ZNSt14_Function_base13_Base_managerIPFvtRK9ubx_buf_tEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x14>
 8080110:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080112:	2000      	movs	r0, #0
 8080114:	4770      	bx	lr

08080116 <_ZN15Adafruit_SH1106D1Ev>:
#define SH1106_RIGHT_HORIZONTAL_SCROLL 0x26
#define SH1106_LEFT_HORIZONTAL_SCROLL 0x27
#define SH1106_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SH1106_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SH1106 : public Adafruit_GFX {
 8080116:	4770      	bx	lr

08080118 <_Z11wd_callbackv>:
});
#endif

// Required forward declarations
void gnssMessageHandler(uint16_t msg_class_id, const ubx_buf_t &buf); //@rx valid gnss msg
void wd_callback() { System.sleep(10);} // turn off cellular module for 10s
 8080118:	b507      	push	{r0, r1, r2, lr}
    static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF);
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, long seconds=0) {
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
 808011a:	4b05      	ldr	r3, [pc, #20]	; (8080130 <_Z11wd_callbackv+0x18>)
 808011c:	220a      	movs	r2, #10
 808011e:	681b      	ldr	r3, [r3, #0]
 8080120:	2100      	movs	r1, #0
 8080122:	4668      	mov	r0, sp
 8080124:	f004 fce2 	bl	8084aec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 8080128:	b003      	add	sp, #12
 808012a:	f85d fb04 	ldr.w	pc, [sp], #4
 808012e:	bf00      	nop
 8080130:	20000d10 	.word	0x20000d10

08080134 <_Z11wd_check_inv>:
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_THS, 0x00 );
	return errorAccumulator == 0? true:false;
}

// checking with wtachdog every 5 sec if cloud connected 
void wd_check_in() {
 8080134:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080136:	f004 fb33 	bl	80847a0 <spark_cloud_flag_connected>
	if (Particle.connected()) {
 808013a:	b118      	cbz	r0, 8080144 <_Z11wd_check_inv+0x10>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808013c:	f004 f8a2 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080140:	4b01      	ldr	r3, [pc, #4]	; (8080148 <_Z11wd_check_inv+0x14>)
 8080142:	6018      	str	r0, [r3, #0]
 8080144:	bd08      	pop	{r3, pc}
 8080146:	bf00      	nop
 8080148:	20001260 	.word	0x20001260
 808014c:	00000000 	.word	0x00000000

08080150 <_Z10imu_updatev>:
	update_start_on = false;
}


 // IMU handler: get current acceleration and reset auto sleep timer if there's motion
void imu_update() {
 8080150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
    accel[0] = imu.readFloatAccelX();
 8080154:	4864      	ldr	r0, [pc, #400]	; (80802e8 <_Z10imu_updatev+0x198>)
 8080156:	f003 fb91 	bl	808387c <_ZN7LSM6DS315readFloatAccelXEv>
 808015a:	4c64      	ldr	r4, [pc, #400]	; (80802ec <_Z10imu_updatev+0x19c>)
 808015c:	6020      	str	r0, [r4, #0]
	accel[1] = imu.readFloatAccelY();
 808015e:	4862      	ldr	r0, [pc, #392]	; (80802e8 <_Z10imu_updatev+0x198>)
 8080160:	f003 fb96 	bl	8083890 <_ZN7LSM6DS315readFloatAccelYEv>
 8080164:	6060      	str	r0, [r4, #4]
	accel[2] = imu.readFloatAccelZ(); 
 8080166:	4860      	ldr	r0, [pc, #384]	; (80802e8 <_Z10imu_updatev+0x198>)
 8080168:	f003 fb9c 	bl	80838a4 <_ZN7LSM6DS315readFloatAccelZEv>

	// get the magnitude
	acc_mag = sqrt(accel[0] * accel[0] + accel[1] * accel[1] + accel[2] * accel[2]);
 808016c:	6821      	ldr	r1, [r4, #0]
 // IMU handler: get current acceleration and reset auto sleep timer if there's motion
void imu_update() {
	
    accel[0] = imu.readFloatAccelX();
	accel[1] = imu.readFloatAccelY();
	accel[2] = imu.readFloatAccelZ(); 
 808016e:	4605      	mov	r5, r0
 8080170:	60a0      	str	r0, [r4, #8]

	// get the magnitude
	acc_mag = sqrt(accel[0] * accel[0] + accel[1] * accel[1] + accel[2] * accel[2]);
 8080172:	4608      	mov	r0, r1
 8080174:	f008 fe14 	bl	8088da0 <__aeabi_fmul>
 8080178:	6867      	ldr	r7, [r4, #4]
 808017a:	4606      	mov	r6, r0
 808017c:	4639      	mov	r1, r7
 808017e:	4638      	mov	r0, r7
 8080180:	f008 fe0e 	bl	8088da0 <__aeabi_fmul>
 8080184:	4601      	mov	r1, r0
 8080186:	4630      	mov	r0, r6
 8080188:	f008 fd02 	bl	8088b90 <__addsf3>
 808018c:	4629      	mov	r1, r5
 808018e:	4606      	mov	r6, r0
 8080190:	4628      	mov	r0, r5
 8080192:	f008 fe05 	bl	8088da0 <__aeabi_fmul>
 8080196:	4601      	mov	r1, r0
 8080198:	4630      	mov	r0, r6
 808019a:	f008 fcf9 	bl	8088b90 <__addsf3>
 808019e:	f008 f975 	bl	808848c <__aeabi_f2d>
 80801a2:	f006 fb89 	bl	80868b8 <sqrt>
	
	// get the deviation from acceleration at rest (==1g at any orientation)
	// acc_mag = 1.0 - acc_mag;
	acc_mag = fabs(1.0 - acc_mag);
 80801a6:	f008 fc9d 	bl	8088ae4 <__aeabi_d2f>
 80801aa:	f008 f96f 	bl	808848c <__aeabi_f2d>
 80801ae:	4602      	mov	r2, r0
 80801b0:	460b      	mov	r3, r1
 80801b2:	2000      	movs	r0, #0
 80801b4:	494e      	ldr	r1, [pc, #312]	; (80802f0 <_Z10imu_updatev+0x1a0>)
 80801b6:	f008 f809 	bl	80881cc <__aeabi_dsub>
 80801ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80801be:	4619      	mov	r1, r3
 80801c0:	f008 fc90 	bl	8088ae4 <__aeabi_d2f>
 80801c4:	4d4b      	ldr	r5, [pc, #300]	; (80802f4 <_Z10imu_updatev+0x1a4>)
 80801c6:	6028      	str	r0, [r5, #0]

	/* at any orientation, @rest: ||a|| = 1 => abs(1 - ||a||) < eps is a good criterion
	* for no change in motion.
	* reset autosleep timer if there's a change of speed or a good shake */
	if (acc_mag > motion_th) {
 80801c8:	f008 f960 	bl	808848c <__aeabi_f2d>
 80801cc:	a340      	add	r3, pc, #256	; (adr r3, 80802d0 <_Z10imu_updatev+0x180>)
 80801ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801d2:	f008 fc3f 	bl	8088a54 <__aeabi_dcmpgt>
 80801d6:	b158      	cbz	r0, 80801f0 <_Z10imu_updatev+0xa0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
    }

    bool _reset(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
 80801d8:	4b47      	ldr	r3, [pc, #284]	; (80802f8 <_Z10imu_updatev+0x1a8>)
 80801da:	6898      	ldr	r0, [r3, #8]
 80801dc:	b140      	cbz	r0, 80801f0 <_Z10imu_updatev+0xa0>
 80801de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80801e2:	2300      	movs	r3, #0
 80801e4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80801e8:	2101      	movs	r1, #1
 80801ea:	461a      	mov	r2, r3
 80801ec:	f004 f8c2 	bl	8084374 <os_timer_change>
		autoSleepTimer.reset();
    }

	// improved LOW-PASS filter approach
	// 1- when vehicle is stopped (residual vibration and speed ~ 0), trigger the start of updating the acceleration bias due to tilt
	if (acc_mag < 0.005 && speed_mph < 2.0 && !update_start_on) {
 80801f0:	6828      	ldr	r0, [r5, #0]
 80801f2:	f008 f94b 	bl	808848c <__aeabi_f2d>
 80801f6:	a338      	add	r3, pc, #224	; (adr r3, 80802d8 <_Z10imu_updatev+0x188>)
 80801f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80801fc:	f008 fc0c 	bl	8088a18 <__aeabi_dcmplt>
 8080200:	4d3e      	ldr	r5, [pc, #248]	; (80802fc <_Z10imu_updatev+0x1ac>)
 8080202:	b180      	cbz	r0, 8080226 <_Z10imu_updatev+0xd6>
 8080204:	493e      	ldr	r1, [pc, #248]	; (8080300 <_Z10imu_updatev+0x1b0>)
 8080206:	2200      	movs	r2, #0
 8080208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808020c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080210:	f008 fc02 	bl	8088a18 <__aeabi_dcmplt>
 8080214:	b138      	cbz	r0, 8080226 <_Z10imu_updatev+0xd6>
 8080216:	4b3b      	ldr	r3, [pc, #236]	; (8080304 <_Z10imu_updatev+0x1b4>)
 8080218:	781a      	ldrb	r2, [r3, #0]
 808021a:	b922      	cbnz	r2, 8080226 <_Z10imu_updatev+0xd6>
		update_start_on = true;
 808021c:	2201      	movs	r2, #1
 808021e:	701a      	strb	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080220:	f004 f830 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		update_start_time = millis();
 8080224:	6028      	str	r0, [r5, #0]
 8080226:	f004 f82d 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	}
	// 2- for the next 2 seconds, update the acceleration bias (20 times)
	if ( (millis() - update_start_time) < 2000) {
 808022a:	682b      	ldr	r3, [r5, #0]
 808022c:	4e36      	ldr	r6, [pc, #216]	; (8080308 <_Z10imu_updatev+0x1b8>)
 808022e:	1ac0      	subs	r0, r0, r3
 8080230:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080234:	4d35      	ldr	r5, [pc, #212]	; (808030c <_Z10imu_updatev+0x1bc>)
 8080236:	d234      	bcs.n	80802a2 <_Z10imu_updatev+0x152>
		a0_y = a0_y + beta*(accel[1] - a0_y);
 8080238:	682f      	ldr	r7, [r5, #0]
 808023a:	6860      	ldr	r0, [r4, #4]
 808023c:	4639      	mov	r1, r7
 808023e:	f008 fca5 	bl	8088b8c <__aeabi_fsub>
 8080242:	f008 f923 	bl	808848c <__aeabi_f2d>
 8080246:	a326      	add	r3, pc, #152	; (adr r3, 80802e0 <_Z10imu_updatev+0x190>)
 8080248:	e9d3 2300 	ldrd	r2, r3, [r3]
 808024c:	f008 f972 	bl	8088534 <__aeabi_dmul>
 8080250:	4680      	mov	r8, r0
 8080252:	4638      	mov	r0, r7
 8080254:	4689      	mov	r9, r1
 8080256:	f008 f919 	bl	808848c <__aeabi_f2d>
 808025a:	4602      	mov	r2, r0
 808025c:	460b      	mov	r3, r1
 808025e:	4640      	mov	r0, r8
 8080260:	4649      	mov	r1, r9
 8080262:	f007 ffb5 	bl	80881d0 <__adddf3>
 8080266:	f008 fc3d 	bl	8088ae4 <__aeabi_d2f>
		a0_z = a0_z + beta*(accel[2] - a0_z);
 808026a:	6837      	ldr	r7, [r6, #0]
		update_start_on = true;
		update_start_time = millis();
	}
	// 2- for the next 2 seconds, update the acceleration bias (20 times)
	if ( (millis() - update_start_time) < 2000) {
		a0_y = a0_y + beta*(accel[1] - a0_y);
 808026c:	6028      	str	r0, [r5, #0]
		a0_z = a0_z + beta*(accel[2] - a0_z);
 808026e:	4639      	mov	r1, r7
 8080270:	68a0      	ldr	r0, [r4, #8]
 8080272:	f008 fc8b 	bl	8088b8c <__aeabi_fsub>
 8080276:	f008 f909 	bl	808848c <__aeabi_f2d>
 808027a:	a319      	add	r3, pc, #100	; (adr r3, 80802e0 <_Z10imu_updatev+0x190>)
 808027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080280:	f008 f958 	bl	8088534 <__aeabi_dmul>
 8080284:	4680      	mov	r8, r0
 8080286:	4638      	mov	r0, r7
 8080288:	4689      	mov	r9, r1
 808028a:	f008 f8ff 	bl	808848c <__aeabi_f2d>
 808028e:	4602      	mov	r2, r0
 8080290:	460b      	mov	r3, r1
 8080292:	4640      	mov	r0, r8
 8080294:	4649      	mov	r1, r9
 8080296:	f007 ff9b 	bl	80881d0 <__adddf3>
 808029a:	f008 fc23 	bl	8088ae4 <__aeabi_d2f>
 808029e:	6030      	str	r0, [r6, #0]
 80802a0:	e00a      	b.n	80802b8 <_Z10imu_updatev+0x168>
	} else {
		//3- at the expiration of 2 seconds, wait until there's gain of speed to allow for another update period 
		if (speed_mph > 10.0) update_start_on = false;
 80802a2:	4917      	ldr	r1, [pc, #92]	; (8080300 <_Z10imu_updatev+0x1b0>)
 80802a4:	2200      	movs	r2, #0
 80802a6:	4b1a      	ldr	r3, [pc, #104]	; (8080310 <_Z10imu_updatev+0x1c0>)
 80802a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80802ac:	f008 fbd2 	bl	8088a54 <__aeabi_dcmpgt>
 80802b0:	b110      	cbz	r0, 80802b8 <_Z10imu_updatev+0x168>
 80802b2:	4b14      	ldr	r3, [pc, #80]	; (8080304 <_Z10imu_updatev+0x1b4>)
 80802b4:	2200      	movs	r2, #0
 80802b6:	701a      	strb	r2, [r3, #0]

	/* the tilt-compensated longitudinal acceleration is:
	*  a_z = (accel[2] - accel[2]_rest) / -1*accel[1]_rest
	*  when device is upright, accel[2]_rest = 0 and accel[1]_rest = -1 
	*/
	accel[2] = (a0_z - accel[2]) / a0_y; // calculate the compensated longitudinal acceleration
 80802b8:	68a1      	ldr	r1, [r4, #8]
 80802ba:	6830      	ldr	r0, [r6, #0]
 80802bc:	f008 fc66 	bl	8088b8c <__aeabi_fsub>
 80802c0:	6829      	ldr	r1, [r5, #0]
 80802c2:	f008 fe21 	bl	8088f08 <__aeabi_fdiv>
 80802c6:	60a0      	str	r0, [r4, #8]
    // using a high pass filter
    accel[2] = alpha*(old_filt_acc_z + acc_z - old_acc_z); // y[i] = alpha*( y[i-1] + x[i] -x[i-1] )
    old_filt_acc_z = accel[2]; //y[i-1]
    old_acc_z = acc_z; //x[i-1]
	*/
}
 80802c8:	b003      	add	sp, #12
 80802ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80802ce:	bf00      	nop
 80802d0:	eb851eb8 	.word	0xeb851eb8
 80802d4:	3fbeb851 	.word	0x3fbeb851
 80802d8:	47ae147b 	.word	0x47ae147b
 80802dc:	3f747ae1 	.word	0x3f747ae1
 80802e0:	9999999a 	.word	0x9999999a
 80802e4:	3fc99999 	.word	0x3fc99999
 80802e8:	20000ab0 	.word	0x20000ab0
 80802ec:	20000a84 	.word	0x20000a84
 80802f0:	3ff00000 	.word	0x3ff00000
 80802f4:	20000c9c 	.word	0x20000c9c
 80802f8:	200008e8 	.word	0x200008e8
 80802fc:	20000c38 	.word	0x20000c38
 8080300:	20000c40 	.word	0x20000c40
 8080304:	20000c3c 	.word	0x20000c3c
 8080308:	20000a74 	.word	0x20000a74
 808030c:	20000a70 	.word	0x20000a70
 8080310:	40240000 	.word	0x40240000

08080314 <_Z13batteryStatus6String>:
	}
	return _period;
}


int batteryStatus(String command){
 8080314:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Publish the battery percentage remaining
	#ifdef cellular
	float batterySoc = battery.getSoC();
 8080316:	4811      	ldr	r0, [pc, #68]	; (808035c <_Z13batteryStatus6String+0x48>)
 8080318:	f005 fa04 	bl	8085724 <_ZN9FuelGauge6getSoCEv>
 808031c:	4605      	mov	r5, r0
	#else
	float batterySoc = 100.0;
	#endif
	//new format for telegraf webhook:
	snprintf(buffer, sizeof(buffer), "{\"tags\":{\"id\":\"%lu\"},\"values\":{\"percentage\":%.2f}}", session_id, batterySoc);
 808031e:	f008 f8b5 	bl	808848c <__aeabi_f2d>
 8080322:	e9cd 0100 	strd	r0, r1, [sp]
 8080326:	4c0e      	ldr	r4, [pc, #56]	; (8080360 <_Z13batteryStatus6String+0x4c>)
 8080328:	4b0e      	ldr	r3, [pc, #56]	; (8080364 <_Z13batteryStatus6String+0x50>)
 808032a:	4a0f      	ldr	r2, [pc, #60]	; (8080368 <_Z13batteryStatus6String+0x54>)
 808032c:	681b      	ldr	r3, [r3, #0]
 808032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080332:	4620      	mov	r0, r4
 8080334:	f004 fa8c 	bl	8084850 <snprintf>
 8080338:	4b0c      	ldr	r3, [pc, #48]	; (808036c <_Z13batteryStatus6String+0x58>)
	#ifdef serial_debug
	Log.info(buffer);
	#endif
	publishQueue.publish("GNSS/bat", buffer, 60, PRIVATE);
 808033a:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808033c:	781b      	ldrb	r3, [r3, #0]
 808033e:	490c      	ldr	r1, [pc, #48]	; (8080370 <_Z13batteryStatus6String+0x5c>)
 8080340:	f88d 2004 	strb.w	r2, [sp, #4]
 8080344:	f88d 3000 	strb.w	r3, [sp]
 8080348:	4622      	mov	r2, r4
 808034a:	233c      	movs	r3, #60	; 0x3c
 808034c:	4809      	ldr	r0, [pc, #36]	; (8080374 <_Z13batteryStatus6String+0x60>)
 808034e:	f002 faa9 	bl	80828a4 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>
	// if (Particle.connected()) { Particle.publish("GNSS/bat", buffer, 60, PRIVATE); }
	return (int)batterySoc;
 8080352:	4628      	mov	r0, r5
 8080354:	f008 feea 	bl	808912c <__aeabi_f2iz>
}
 8080358:	b003      	add	sp, #12
 808035a:	bd30      	pop	{r4, r5, pc}
 808035c:	20000d14 	.word	0x20000d14
 8080360:	20000908 	.word	0x20000908
 8080364:	20000a98 	.word	0x20000a98
 8080368:	0808a84c 	.word	0x0808a84c
 808036c:	20000a94 	.word	0x20000a94
 8080370:	0808a87f 	.word	0x0808a87f
 8080374:	20000cc4 	.word	0x20000cc4

08080378 <_Z13startTracking6String>:

/* remotely start/stop tracking and tracking period
* command = 0..10 --> tracking off
* command >= 10 and < 1800 --> tracking on, published every command seconds
*/
int startTracking(String command) {
 8080378:	b510      	push	{r4, lr}
	unsigned long _period = command.toInt();
 808037a:	f004 ff05 	bl	8085188 <_ZNK6String5toIntEv>
	if (_period >= 10 && _period < 1800) {
 808037e:	f240 63fd 	movw	r3, #1789	; 0x6fd
 8080382:	f1a0 020a 	sub.w	r2, r0, #10
 8080386:	429a      	cmp	r2, r3
/* remotely start/stop tracking and tracking period
* command = 0..10 --> tracking off
* command >= 10 and < 1800 --> tracking on, published every command seconds
*/
int startTracking(String command) {
	unsigned long _period = command.toInt();
 8080388:	4604      	mov	r4, r0
 808038a:	4b0a      	ldr	r3, [pc, #40]	; (80803b4 <_Z13startTracking6String+0x3c>)
 808038c:	4a0a      	ldr	r2, [pc, #40]	; (80803b8 <_Z13startTracking6String+0x40>)
	if (_period >= 10 && _period < 1800) {
 808038e:	d80a      	bhi.n	80803a6 <_Z13startTracking6String+0x2e>
		tracking_on_flag = true;
 8080390:	2101      	movs	r1, #1
 8080392:	7019      	strb	r1, [r3, #0]
		PUBLISH_PERIOD = _period*1000;
 8080394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080398:	4343      	muls	r3, r0
 808039a:	6013      	str	r3, [r2, #0]
 808039c:	f003 ff72 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		last_updated_odometer = millis();
 80803a0:	4b06      	ldr	r3, [pc, #24]	; (80803bc <_Z13startTracking6String+0x44>)
 80803a2:	6018      	str	r0, [r3, #0]
 80803a4:	e004      	b.n	80803b0 <_Z13startTracking6String+0x38>
	}
	else {
		// any other value will stop real time tracking and logging
		tracking_on_flag = false;
 80803a6:	2100      	movs	r1, #0
 80803a8:	7019      	strb	r1, [r3, #0]
		PUBLISH_PERIOD = 20000; // for serial debug
 80803aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80803ae:	6013      	str	r3, [r2, #0]
	}
	return _period;
}
 80803b0:	4620      	mov	r0, r4
 80803b2:	bd10      	pop	{r4, pc}
 80803b4:	20000c76 	.word	0x20000c76
 80803b8:	2000040c 	.word	0x2000040c
 80803bc:	20000904 	.word	0x20000904

080803c0 <_Z13enter_standby6String>:
	Particle.publish("GNSS/status", state_label, 60, PRIVATE);
	return exit_code;
}


int enter_standby(String command) {
 80803c0:	b513      	push	{r0, r1, r4, lr}
 80803c2:	6804      	ldr	r4, [r0, #0]
	const char *command_c = command.c_str();
	// deep sleep
	if (strcmp(command_c, "off") == 0 || strcmp(command_c, "d") == 0 ) {
 80803c4:	491c      	ldr	r1, [pc, #112]	; (8080438 <_Z13enter_standby6String+0x78>)
 80803c6:	4620      	mov	r0, r4
 80803c8:	f009 f878 	bl	80894bc <strcmp>
 80803cc:	b120      	cbz	r0, 80803d8 <_Z13enter_standby6String+0x18>
 80803ce:	491b      	ldr	r1, [pc, #108]	; (808043c <_Z13enter_standby6String+0x7c>)
 80803d0:	4620      	mov	r0, r4
 80803d2:	f009 f873 	bl	80894bc <strcmp>
 80803d6:	b948      	cbnz	r0, 80803ec <_Z13enter_standby6String+0x2c>
		/* this is the same mode called by a double-click on SETUP button, but it's
		* limited in duration (8h).
		* it's 110uA on average with all peripherals on stand by
		* Device will reset when exiting this state
		*/
		System.sleep(SLEEP_MODE_SOFTPOWEROFF, 60*60*8);
 80803d8:	4b19      	ldr	r3, [pc, #100]	; (8080440 <_Z13enter_standby6String+0x80>)
 80803da:	4668      	mov	r0, sp
 80803dc:	681b      	ldr	r3, [r3, #0]
 80803de:	f44f 42e1 	mov.w	r2, #28800	; 0x7080
 80803e2:	2102      	movs	r1, #2
 80803e4:	f004 fb82 	bl	8084aec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
		return 2;
 80803e8:	2002      	movs	r0, #2
 80803ea:	e023      	b.n	8080434 <_Z13enter_standby6String+0x74>
	} else if (strcmp(command_c, "dfu") == 0 ) {
 80803ec:	4915      	ldr	r1, [pc, #84]	; (8080444 <_Z13enter_standby6String+0x84>)
 80803ee:	4620      	mov	r0, r4
 80803f0:	f009 f864 	bl	80894bc <strcmp>
 80803f4:	b918      	cbnz	r0, 80803fe <_Z13enter_standby6String+0x3e>
		System.dfu(); // enter DFU mode to allow new program flashing via usb
 80803f6:	f004 fb76 	bl	8084ae6 <_ZN11SystemClass3dfuEb>
		return 4;
 80803fa:	2004      	movs	r0, #4
 80803fc:	e01a      	b.n	8080434 <_Z13enter_standby6String+0x74>
	} else if (strcmp(command_c, "r") == 0 ) {
 80803fe:	4912      	ldr	r1, [pc, #72]	; (8080448 <_Z13enter_standby6String+0x88>)
 8080400:	4620      	mov	r0, r4
 8080402:	f009 f85b 	bl	80894bc <strcmp>
 8080406:	b940      	cbnz	r0, 808041a <_Z13enter_standby6String+0x5a>
		tracking_on_flag = false;
 8080408:	4b10      	ldr	r3, [pc, #64]	; (808044c <_Z13enter_standby6String+0x8c>)
		reset_session_flag = true; // go for reset session id
 808040a:	4a11      	ldr	r2, [pc, #68]	; (8080450 <_Z13enter_standby6String+0x90>)
		return 2;
	} else if (strcmp(command_c, "dfu") == 0 ) {
		System.dfu(); // enter DFU mode to allow new program flashing via usb
		return 4;
	} else if (strcmp(command_c, "r") == 0 ) {
		tracking_on_flag = false;
 808040c:	7018      	strb	r0, [r3, #0]
		reset_session_flag = true; // go for reset session id
 808040e:	2301      	movs	r3, #1
 8080410:	7013      	strb	r3, [r2, #0]
		enter_standby_flag = true; // go to power save mode
 8080412:	4a10      	ldr	r2, [pc, #64]	; (8080454 <_Z13enter_standby6String+0x94>)
		return 3;
 8080414:	2003      	movs	r0, #3
		System.dfu(); // enter DFU mode to allow new program flashing via usb
		return 4;
	} else if (strcmp(command_c, "r") == 0 ) {
		tracking_on_flag = false;
		reset_session_flag = true; // go for reset session id
		enter_standby_flag = true; // go to power save mode
 8080416:	7013      	strb	r3, [r2, #0]
		return 3;
 8080418:	e00c      	b.n	8080434 <_Z13enter_standby6String+0x74>
	} else if (strcmp(command_c, "rid") == 0 ) {
 808041a:	490f      	ldr	r1, [pc, #60]	; (8080458 <_Z13enter_standby6String+0x98>)
 808041c:	4620      	mov	r0, r4
 808041e:	f009 f84d 	bl	80894bc <strcmp>
 8080422:	2301      	movs	r3, #1
 8080424:	b918      	cbnz	r0, 808042e <_Z13enter_standby6String+0x6e>
		reset_session_flag = true; // go for reset session id
 8080426:	4a0a      	ldr	r2, [pc, #40]	; (8080450 <_Z13enter_standby6String+0x90>)
		return 1;
 8080428:	4618      	mov	r0, r3
		tracking_on_flag = false;
		reset_session_flag = true; // go for reset session id
		enter_standby_flag = true; // go to power save mode
		return 3;
	} else if (strcmp(command_c, "rid") == 0 ) {
		reset_session_flag = true; // go for reset session id
 808042a:	7013      	strb	r3, [r2, #0]
		return 1;
 808042c:	e002      	b.n	8080434 <_Z13enter_standby6String+0x74>
	} else {
		enter_standby_flag = true;	// go to power save mode
 808042e:	4a09      	ldr	r2, [pc, #36]	; (8080454 <_Z13enter_standby6String+0x94>)
		return 0;	
 8080430:	2000      	movs	r0, #0
		return 3;
	} else if (strcmp(command_c, "rid") == 0 ) {
		reset_session_flag = true; // go for reset session id
		return 1;
	} else {
		enter_standby_flag = true;	// go to power save mode
 8080432:	7013      	strb	r3, [r2, #0]
		return 0;	
	}
}
 8080434:	b002      	add	sp, #8
 8080436:	bd10      	pop	{r4, pc}
 8080438:	0808a9e0 	.word	0x0808a9e0
 808043c:	0808b028 	.word	0x0808b028
 8080440:	20000d10 	.word	0x20000d10
 8080444:	0808a888 	.word	0x0808a888
 8080448:	0808c09b 	.word	0x0808c09b
 808044c:	20000c76 	.word	0x20000c76
 8080450:	20000ca4 	.word	0x20000ca4
 8080454:	20000c20 	.word	0x20000c20
 8080458:	0808a88c 	.word	0x0808a88c

0808045c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 808045c:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 808045e:	2300      	movs	r3, #0
 8080460:	a902      	add	r1, sp, #8
 8080462:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 8080466:	f003 ff7d 	bl	8084364 <os_timer_get_id>
 808046a:	b920      	cbnz	r0, 8080476 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 808046c:	9801      	ldr	r0, [sp, #4]
 808046e:	b110      	cbz	r0, 8080476 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 8080470:	6803      	ldr	r3, [r0, #0]
 8080472:	689b      	ldr	r3, [r3, #8]
 8080474:	4798      	blx	r3
        }
    }
 8080476:	b003      	add	sp, #12
 8080478:	f85d fb04 	ldr.w	pc, [sp], #4

0808047c <_Z17trackingLEDUpdatev>:
	Log.info("autosleep triggered.");
	#endif
}

// flash blue led if tracking is on
void trackingLEDUpdate() {
 808047c:	b508      	push	{r3, lr}
	if (state == TRACKING_ON_STATE) {
 808047e:	4b09      	ldr	r3, [pc, #36]	; (80804a4 <_Z17trackingLEDUpdatev+0x28>)
 8080480:	781b      	ldrb	r3, [r3, #0]
 8080482:	2b02      	cmp	r3, #2
 8080484:	d10c      	bne.n	80804a0 <_Z17trackingLEDUpdatev+0x24>
		digitalWrite(D7, HIGH);
 8080486:	2101      	movs	r1, #1
 8080488:	2007      	movs	r0, #7
 808048a:	f005 ff74 	bl	8086376 <digitalWrite>
		delay(50);
 808048e:	2032      	movs	r0, #50	; 0x32
 8080490:	f005 f8d4 	bl	808563c <delay>
		digitalWrite(D7, LOW);
	}
}
 8080494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// flash blue led if tracking is on
void trackingLEDUpdate() {
	if (state == TRACKING_ON_STATE) {
		digitalWrite(D7, HIGH);
		delay(50);
		digitalWrite(D7, LOW);
 8080498:	2100      	movs	r1, #0
 808049a:	2007      	movs	r0, #7
 808049c:	f005 bf6b 	b.w	8086376 <digitalWrite>
 80804a0:	bd08      	pop	{r3, pc}
 80804a2:	bf00      	nop
 80804a4:	20000a9c 	.word	0x20000a9c

080804a8 <_Z18gnssMessageHandlertRK9ubx_buf_t>:
	}
}


void gnssMessageHandler(uint16_t msg_class_id, const ubx_buf_t &buf) {
	switch (msg_class_id) {
 80804a8:	f240 3301 	movw	r3, #769	; 0x301
 80804ac:	4298      	cmp	r0, r3
		return 0;	
	}
}


void gnssMessageHandler(uint16_t msg_class_id, const ubx_buf_t &buf) {
 80804ae:	b5d0      	push	{r4, r6, r7, lr}
 80804b0:	460c      	mov	r4, r1
	switch (msg_class_id) {
 80804b2:	d06b      	beq.n	808058c <_Z18gnssMessageHandlertRK9ubx_buf_t+0xe4>
 80804b4:	f240 7301 	movw	r3, #1793	; 0x701
 80804b8:	4298      	cmp	r0, r3
 80804ba:	4a41      	ldr	r2, [pc, #260]	; (80805c0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x118>)
 80804bc:	d16d      	bne.n	808059a <_Z18gnssMessageHandlertRK9ubx_buf_t+0xf2>
		case UBX_MSG_NAV_PVT:
			valid_fix_flag = ((buf.payload_rx_nav_pvt.flags & UBX_RX_NAV_PVT_FLAGS_GNSSFIXOK) == 1);
 80804be:	7d4b      	ldrb	r3, [r1, #21]
 80804c0:	f003 0301 	and.w	r3, r3, #1
 80804c4:	7013      	strb	r3, [r2, #0]
			// update time of latest update
			if (valid_fix_flag) {
 80804c6:	b11b      	cbz	r3, 80804d0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x28>
 80804c8:	f003 fedc 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
				gnss_last_fix_ms = millis();// keep it up to date unless fix is lost
 80804cc:	4b3d      	ldr	r3, [pc, #244]	; (80805c4 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x11c>)
 80804ce:	6018      	str	r0, [r3, #0]
			}
			// update tracking data
			lat = (double)buf.payload_rx_nav_pvt.lat * 1e-7;
 80804d0:	69e0      	ldr	r0, [r4, #28]
 80804d2:	f007 ffc9 	bl	8088468 <__aeabi_i2d>
 80804d6:	a332      	add	r3, pc, #200	; (adr r3, 80805a0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0xf8>)
 80804d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804dc:	f008 f82a 	bl	8088534 <__aeabi_dmul>
 80804e0:	4b39      	ldr	r3, [pc, #228]	; (80805c8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x120>)
 80804e2:	e9c3 0100 	strd	r0, r1, [r3]
			lon	= (double)buf.payload_rx_nav_pvt.lon * 1e-7;
 80804e6:	69a0      	ldr	r0, [r4, #24]
 80804e8:	f007 ffbe 	bl	8088468 <__aeabi_i2d>
 80804ec:	a32c      	add	r3, pc, #176	; (adr r3, 80805a0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0xf8>)
 80804ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804f2:	f008 f81f 	bl	8088534 <__aeabi_dmul>
 80804f6:	4b35      	ldr	r3, [pc, #212]	; (80805cc <_Z18gnssMessageHandlertRK9ubx_buf_t+0x124>)
 80804f8:	e9c3 0100 	strd	r0, r1, [r3]
			alt = (double)buf.payload_rx_nav_pvt.height * 1e-3;
 80804fc:	6a20      	ldr	r0, [r4, #32]
 80804fe:	f007 ffb3 	bl	8088468 <__aeabi_i2d>
 8080502:	a329      	add	r3, pc, #164	; (adr r3, 80805a8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x100>)
 8080504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080508:	f008 f814 	bl	8088534 <__aeabi_dmul>
 808050c:	4b30      	ldr	r3, [pc, #192]	; (80805d0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x128>)
 808050e:	e9c3 0100 	strd	r0, r1, [r3]
			hAcc = (double)buf.payload_rx_nav_pvt.hAcc * 1e-3;
 8080512:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8080514:	f007 ff98 	bl	8088448 <__aeabi_ui2d>
 8080518:	a323      	add	r3, pc, #140	; (adr r3, 80805a8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x100>)
 808051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808051e:	f008 f809 	bl	8088534 <__aeabi_dmul>
 8080522:	4b2c      	ldr	r3, [pc, #176]	; (80805d4 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x12c>)
			nb_sats = buf.payload_rx_nav_pvt.numSV;
 8080524:	7de2      	ldrb	r2, [r4, #23]
			}
			// update tracking data
			lat = (double)buf.payload_rx_nav_pvt.lat * 1e-7;
			lon	= (double)buf.payload_rx_nav_pvt.lon * 1e-7;
			alt = (double)buf.payload_rx_nav_pvt.height * 1e-3;
			hAcc = (double)buf.payload_rx_nav_pvt.hAcc * 1e-3;
 8080526:	e9c3 0100 	strd	r0, r1, [r3]
			nb_sats = buf.payload_rx_nav_pvt.numSV;
 808052a:	4b2b      	ldr	r3, [pc, #172]	; (80805d8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x130>)
 808052c:	701a      	strb	r2, [r3, #0]
			speed_mph = (double)buf.payload_rx_nav_pvt.gSpeed / mm_per_second_per_mph;
 808052e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8080530:	f007 ff9a 	bl	8088468 <__aeabi_i2d>
 8080534:	a31e      	add	r3, pc, #120	; (adr r3, 80805b0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x108>)
 8080536:	e9d3 2300 	ldrd	r2, r3, [r3]
 808053a:	f008 f925 	bl	8088788 <__aeabi_ddiv>
 808053e:	4606      	mov	r6, r0
 8080540:	460f      	mov	r7, r1
 8080542:	4b26      	ldr	r3, [pc, #152]	; (80805dc <_Z18gnssMessageHandlertRK9ubx_buf_t+0x134>)
 8080544:	e9c3 6700 	strd	r6, r7, [r3]
			heading = (double)buf.payload_rx_nav_pvt.headMot * 1e-5;
 8080548:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808054a:	f007 ff8d 	bl	8088468 <__aeabi_i2d>
 808054e:	a31a      	add	r3, pc, #104	; (adr r3, 80805b8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x110>)
 8080550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080554:	f007 ffee 	bl	8088534 <__aeabi_dmul>
 8080558:	4b21      	ldr	r3, [pc, #132]	; (80805e0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x138>)

			if (speed_mph > 7.0) {
 808055a:	2200      	movs	r2, #0
			lon	= (double)buf.payload_rx_nav_pvt.lon * 1e-7;
			alt = (double)buf.payload_rx_nav_pvt.height * 1e-3;
			hAcc = (double)buf.payload_rx_nav_pvt.hAcc * 1e-3;
			nb_sats = buf.payload_rx_nav_pvt.numSV;
			speed_mph = (double)buf.payload_rx_nav_pvt.gSpeed / mm_per_second_per_mph;
			heading = (double)buf.payload_rx_nav_pvt.headMot * 1e-5;
 808055c:	e9c3 0100 	strd	r0, r1, [r3]

			if (speed_mph > 7.0) {
 8080560:	4b20      	ldr	r3, [pc, #128]	; (80805e4 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x13c>)
 8080562:	4630      	mov	r0, r6
 8080564:	4639      	mov	r1, r7
 8080566:	f008 fa75 	bl	8088a54 <__aeabi_dcmpgt>
 808056a:	4c1f      	ldr	r4, [pc, #124]	; (80805e8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x140>)
 808056c:	b150      	cbz	r0, 8080584 <_Z18gnssMessageHandlertRK9ubx_buf_t+0xdc>
				// autostart tracking
				if (!tracking_on_flag) {
 808056e:	4b1f      	ldr	r3, [pc, #124]	; (80805ec <_Z18gnssMessageHandlertRK9ubx_buf_t+0x144>)
 8080570:	781a      	ldrb	r2, [r3, #0]
 8080572:	b92a      	cbnz	r2, 8080580 <_Z18gnssMessageHandlertRK9ubx_buf_t+0xd8>
					tracking_on_flag = true;
 8080574:	2201      	movs	r2, #1
 8080576:	701a      	strb	r2, [r3, #0]
 8080578:	f003 fe84 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
					last_updated_odometer = millis();
 808057c:	4b1c      	ldr	r3, [pc, #112]	; (80805f0 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x148>)
 808057e:	6018      	str	r0, [r3, #0]
				}
				publish_extra_time = 0;
 8080580:	2300      	movs	r3, #0
 8080582:	e001      	b.n	8080588 <_Z18gnssMessageHandlertRK9ubx_buf_t+0xe0>
			} else {
				// slow speed, extend publish time by 30s
				publish_extra_time = 30000;
 8080584:	f247 5330 	movw	r3, #30000	; 0x7530
 8080588:	6023      	str	r3, [r4, #0]
 808058a:	bdd0      	pop	{r4, r6, r7, pc}
			}
			break;

		case UBX_MSG_NAV_STATUS:
			fixType = buf.payload_rx_nav_status.gpsFix;
 808058c:	790a      	ldrb	r2, [r1, #4]
 808058e:	4b19      	ldr	r3, [pc, #100]	; (80805f4 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x14c>)
 8080590:	701a      	strb	r2, [r3, #0]
			ttff 	= buf.payload_rx_nav_status.ttff;
 8080592:	688a      	ldr	r2, [r1, #8]
 8080594:	4b18      	ldr	r3, [pc, #96]	; (80805f8 <_Z18gnssMessageHandlertRK9ubx_buf_t+0x150>)
 8080596:	601a      	str	r2, [r3, #0]
			#ifdef serial_debug
			Log.info("fix type=%d", fixType);
			#endif
			break;
 8080598:	bdd0      	pop	{r4, r6, r7, pc}

		default:
			valid_fix_flag = 0; // reset flag if no successful nav_pvt message parsing
 808059a:	2300      	movs	r3, #0
 808059c:	7013      	strb	r3, [r2, #0]
 808059e:	bdd0      	pop	{r4, r6, r7, pc}
 80805a0:	9abcaf48 	.word	0x9abcaf48
 80805a4:	3e7ad7f2 	.word	0x3e7ad7f2
 80805a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80805ac:	3f50624d 	.word	0x3f50624d
 80805b0:	d70a3d71 	.word	0xd70a3d71
 80805b4:	407bf0a3 	.word	0x407bf0a3
 80805b8:	88e368f1 	.word	0x88e368f1
 80805bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80805c0:	20000c3d 	.word	0x20000c3d
 80805c4:	20000c78 	.word	0x20000c78
 80805c8:	20000a60 	.word	0x20000a60
 80805cc:	20000c18 	.word	0x20000c18
 80805d0:	20000a58 	.word	0x20000a58
 80805d4:	20000c30 	.word	0x20000c30
 80805d8:	20000a80 	.word	0x20000a80
 80805dc:	20000c40 	.word	0x20000c40
 80805e0:	20000ad8 	.word	0x20000ad8
 80805e4:	401c0000 	.word	0x401c0000
 80805e8:	20000c6c 	.word	0x20000c6c
 80805ec:	20000c76 	.word	0x20000c76
 80805f0:	20000904 	.word	0x20000904
 80805f4:	20000ca5 	.word	0x20000ca5
 80805f8:	20000aa4 	.word	0x20000aa4
 80805fc:	00000000 	.word	0x00000000

08080600 <_Z17modeButtonHandleryi>:
	}
}


void modeButtonHandler(system_event_t event, int data) {
 8080600:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//bug: calling this handler induce 'assert fail' crash
	nb_clicks = system_button_clicks(data);
 8080602:	4b2f      	ldr	r3, [pc, #188]	; (80806c0 <_Z17modeButtonHandleryi+0xc0>)
 8080604:	f002 020f 	and.w	r2, r2, #15
 8080608:	601a      	str	r2, [r3, #0]
	switch (nb_clicks) {
 808060a:	681b      	ldr	r3, [r3, #0]
 808060c:	3b01      	subs	r3, #1
 808060e:	2b03      	cmp	r3, #3
 8080610:	d84d      	bhi.n	80806ae <_Z17modeButtonHandleryi+0xae>
 8080612:	e8df f003 	tbb	[pc, r3]
 8080616:	0e02      	.short	0x0e02
 8080618:	4940      	.short	0x4940
		// start / pause tracking
		case 1: {
			tracking_on_flag = !tracking_on_flag;
 808061a:	4a2a      	ldr	r2, [pc, #168]	; (80806c4 <_Z17modeButtonHandleryi+0xc4>)
 808061c:	7813      	ldrb	r3, [r2, #0]
 808061e:	f083 0301 	eor.w	r3, r3, #1
 8080622:	7013      	strb	r3, [r2, #0]
			#ifdef serial_debug
			Serial.printf("tracking status: %s\n",tracking_on_flag?"on":"off");
			#endif
			if (tracking_on_flag) last_updated_odometer = millis();
 8080624:	2b00      	cmp	r3, #0
 8080626:	d042      	beq.n	80806ae <_Z17modeButtonHandleryi+0xae>
 8080628:	f003 fe2c 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808062c:	4b26      	ldr	r3, [pc, #152]	; (80806c8 <_Z17modeButtonHandleryi+0xc8>)
 808062e:	6018      	str	r0, [r3, #0]
 8080630:	e03d      	b.n	80806ae <_Z17modeButtonHandleryi+0xae>
			break;
		}
		// end session and go into deep sleep mode (requires press on Reset button to wake up)
		case 2: {
			uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 8080632:	4b26      	ldr	r3, [pc, #152]	; (80806cc <_Z17modeButtonHandleryi+0xcc>)
			uint32_t trip_seconds = tripTime % 60;
			float tripDistance_mi = tripDistance_m / 1609.3;
			sprintf(buffer, "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}", session_id, trip_minutes, trip_seconds, tripDistance_mi);
 8080634:	4926      	ldr	r1, [pc, #152]	; (80806d0 <_Z17modeButtonHandleryi+0xd0>)
			if (tracking_on_flag) last_updated_odometer = millis();
			break;
		}
		// end session and go into deep sleep mode (requires press on Reset button to wake up)
		case 2: {
			uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 8080636:	681d      	ldr	r5, [r3, #0]
			uint32_t trip_seconds = tripTime % 60;
			float tripDistance_mi = tripDistance_m / 1609.3;
			sprintf(buffer, "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}", session_id, trip_minutes, trip_seconds, tripDistance_mi);
 8080638:	e9d1 0100 	ldrd	r0, r1, [r1]
			if (tracking_on_flag) last_updated_odometer = millis();
			break;
		}
		// end session and go into deep sleep mode (requires press on Reset button to wake up)
		case 2: {
			uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 808063c:	2d3c      	cmp	r5, #60	; 0x3c
 808063e:	bf88      	it	hi
 8080640:	243c      	movhi	r4, #60	; 0x3c
			uint32_t trip_seconds = tripTime % 60;
			float tripDistance_mi = tripDistance_m / 1609.3;
			sprintf(buffer, "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}", session_id, trip_minutes, trip_seconds, tripDistance_mi);
 8080642:	a31d      	add	r3, pc, #116	; (adr r3, 80806b8 <_Z17modeButtonHandleryi+0xb8>)
 8080644:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (tracking_on_flag) last_updated_odometer = millis();
			break;
		}
		// end session and go into deep sleep mode (requires press on Reset button to wake up)
		case 2: {
			uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 8080648:	bf8c      	ite	hi
 808064a:	fbb5 f4f4 	udivhi	r4, r5, r4
 808064e:	2400      	movls	r4, #0
			uint32_t trip_seconds = tripTime % 60;
			float tripDistance_mi = tripDistance_m / 1609.3;
			sprintf(buffer, "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}", session_id, trip_minutes, trip_seconds, tripDistance_mi);
 8080650:	f008 f89a 	bl	8088788 <__aeabi_ddiv>
 8080654:	f008 fa46 	bl	8088ae4 <__aeabi_d2f>
 8080658:	263c      	movs	r6, #60	; 0x3c
 808065a:	f007 ff17 	bl	808848c <__aeabi_f2d>
 808065e:	fbb5 f3f6 	udiv	r3, r5, r6
 8080662:	fb06 5513 	mls	r5, r6, r3, r5
 8080666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808066a:	4a1a      	ldr	r2, [pc, #104]	; (80806d4 <_Z17modeButtonHandleryi+0xd4>)
 808066c:	9500      	str	r5, [sp, #0]
 808066e:	4623      	mov	r3, r4
 8080670:	6812      	ldr	r2, [r2, #0]
 8080672:	4919      	ldr	r1, [pc, #100]	; (80806d8 <_Z17modeButtonHandleryi+0xd8>)
 8080674:	4819      	ldr	r0, [pc, #100]	; (80806dc <_Z17modeButtonHandleryi+0xdc>)
 8080676:	f004 f8d3 	bl	8084820 <sprintf>
 808067a:	4b19      	ldr	r3, [pc, #100]	; (80806e0 <_Z17modeButtonHandleryi+0xe0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808067c:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808067e:	781b      	ldrb	r3, [r3, #0]
			publishQueue.publish("GNSS/session", buffer, 60, PRIVATE);
 8080680:	4918      	ldr	r1, [pc, #96]	; (80806e4 <_Z17modeButtonHandleryi+0xe4>)
 8080682:	f88d 2004 	strb.w	r2, [sp, #4]
 8080686:	f88d 3000 	strb.w	r3, [sp]
 808068a:	4a14      	ldr	r2, [pc, #80]	; (80806dc <_Z17modeButtonHandleryi+0xdc>)
 808068c:	4633      	mov	r3, r6
 808068e:	4816      	ldr	r0, [pc, #88]	; (80806e8 <_Z17modeButtonHandleryi+0xe8>)
 8080690:	f002 f908 	bl	80828a4 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>
 8080694:	e00b      	b.n	80806ae <_Z17modeButtonHandleryi+0xae>
			break;
		}
		// 3 clicks: go into network standby mode, wake up very 22 or 120 minutes or when motion is detected.
		case 3: {
			// enable stop and reset session by turning off tracking.
			tracking_on_flag = false;
 8080696:	4b0b      	ldr	r3, [pc, #44]	; (80806c4 <_Z17modeButtonHandleryi+0xc4>)
 8080698:	2200      	movs	r2, #0
 808069a:	701a      	strb	r2, [r3, #0]
			reset_session_flag = true; // go for reset session id
 808069c:	4a13      	ldr	r2, [pc, #76]	; (80806ec <_Z17modeButtonHandleryi+0xec>)
 808069e:	2301      	movs	r3, #1
 80806a0:	7013      	strb	r3, [r2, #0]
			enter_standby_flag = true; // go to power save mode
 80806a2:	4a13      	ldr	r2, [pc, #76]	; (80806f0 <_Z17modeButtonHandleryi+0xf0>)
 80806a4:	7013      	strb	r3, [r2, #0]
			break;
 80806a6:	e002      	b.n	80806ae <_Z17modeButtonHandleryi+0xae>
		}
		// 4 clicks: enable turn off/on cellular module.
		case 4: {
			cycle_modem_power_flag = true;
 80806a8:	4b12      	ldr	r3, [pc, #72]	; (80806f4 <_Z17modeButtonHandleryi+0xf4>)
 80806aa:	2201      	movs	r2, #1
 80806ac:	701a      	strb	r2, [r3, #0]
			break;
		}
		default:
		break;
	}	
}
 80806ae:	b004      	add	sp, #16
 80806b0:	bd70      	pop	{r4, r5, r6, pc}
 80806b2:	bf00      	nop
 80806b4:	f3af 8000 	nop.w
 80806b8:	33333333 	.word	0x33333333
 80806bc:	40992533 	.word	0x40992533
 80806c0:	20000a90 	.word	0x20000a90
 80806c4:	20000c76 	.word	0x20000c76
 80806c8:	20000904 	.word	0x20000904
 80806cc:	20000ca0 	.word	0x20000ca0
 80806d0:	20000d08 	.word	0x20000d08
 80806d4:	20000a98 	.word	0x20000a98
 80806d8:	0808a890 	.word	0x0808a890
 80806dc:	20000908 	.word	0x20000908
 80806e0:	20000a94 	.word	0x20000a94
 80806e4:	0808a8ce 	.word	0x0808a8ce
 80806e8:	20000cc4 	.word	0x20000cc4
 80806ec:	20000ca4 	.word	0x20000ca4
 80806f0:	20000c20 	.word	0x20000c20
 80806f4:	20000a9d 	.word	0x20000a9d

080806f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80806f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80806fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80806fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80806fe:	b113      	cbz	r3, 8080706 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080700:	2203      	movs	r2, #3
 8080702:	4601      	mov	r1, r0
 8080704:	4798      	blx	r3
    }
 8080706:	4620      	mov	r0, r4
 8080708:	bd10      	pop	{r4, pc}

0808070a <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 808070a:	b538      	push	{r3, r4, r5, lr}
 808070c:	4604      	mov	r4, r0
 808070e:	6940      	ldr	r0, [r0, #20]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
 8080710:	b1b0      	cbz	r0, 8080740 <_ZN19ApplicationWatchdogD1Ev+0x36>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
 8080712:	f003 fdef 	bl	80842f4 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
 8080716:	b998      	cbnz	r0, 8080740 <_ZN19ApplicationWatchdogD1Ev+0x36>
            return;

        if (!exited_) {
 8080718:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 808071c:	b91b      	cbnz	r3, 8080726 <_ZN19ApplicationWatchdogD1Ev+0x1c>
 808071e:	6960      	ldr	r0, [r4, #20]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
 8080720:	b108      	cbz	r0, 8080726 <_ZN19ApplicationWatchdogD1Ev+0x1c>
 8080722:	f003 fdf7 	bl	8084314 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
 8080726:	69a5      	ldr	r5, [r4, #24]
 8080728:	b13d      	cbz	r5, 808073a <_ZN19ApplicationWatchdogD1Ev+0x30>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808072a:	4628      	mov	r0, r5
 808072c:	f7ff ffe4 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 8080730:	4628      	mov	r0, r5
 8080732:	f7ff fcb4 	bl	808009e <_ZdlPv>
            wrapper = NULL;
 8080736:	2300      	movs	r3, #0
 8080738:	61a3      	str	r3, [r4, #24]
        }

        os_thread_cleanup(handle);
 808073a:	6960      	ldr	r0, [r4, #20]
 808073c:	f003 fdf2 	bl	8084324 <os_thread_cleanup>
 8080740:	1d20      	adds	r0, r4, #4
 8080742:	f7ff ffd9 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8080746:	4620      	mov	r0, r4
 8080748:	bd38      	pop	{r3, r4, r5, pc}
	...

0808074c <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 808074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808074e:	4604      	mov	r4, r0
 8080750:	468e      	mov	lr, r1
 8080752:	4915      	ldr	r1, [pc, #84]	; (80807a8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
 8080754:	2500      	movs	r5, #0
 8080756:	b085      	sub	sp, #20
 8080758:	7105      	strb	r5, [r0, #4]
 808075a:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808075c:	6145      	str	r5, [r0, #20]
 808075e:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080760:	af02      	add	r7, sp, #8
 8080762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8080766:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808076a:	f104 060c 	add.w	r6, r4, #12
 808076e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8080772:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080776:	e897 0003 	ldmia.w	r7, {r0, r1}
 808077a:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808077e:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080780:	6960      	ldr	r0, [r4, #20]
 8080782:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080784:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080786:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080788:	69a0      	ldr	r0, [r4, #24]
 808078a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808078c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808078e:	e88d 0028 	stmia.w	sp, {r3, r5}
 8080792:	4a06      	ldr	r2, [pc, #24]	; (80807ac <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
 8080794:	4623      	mov	r3, r4
 8080796:	4671      	mov	r1, lr
 8080798:	f104 0008 	add.w	r0, r4, #8
 808079c:	f003 fdd2 	bl	8084344 <os_timer_create>
    }
 80807a0:	4620      	mov	r0, r4
 80807a2:	b005      	add	sp, #20
 80807a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80807a6:	bf00      	nop
 80807a8:	0808a818 	.word	0x0808a818
 80807ac:	0808045d 	.word	0x0808045d

080807b0 <_ZN5Timer4stopEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80807b0:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80807b2:	6880      	ldr	r0, [r0, #8]
 80807b4:	2300      	movs	r3, #0
 80807b6:	b140      	cbz	r0, 80807ca <_ZN5Timer4stopEj+0x1a>
 80807b8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80807bc:	461a      	mov	r2, r3
 80807be:	2102      	movs	r1, #2
 80807c0:	f003 fdd8 	bl	8084374 <os_timer_change>
 80807c4:	fab0 f080 	clz	r0, r0
 80807c8:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80807ca:	b003      	add	sp, #12
 80807cc:	f85d fb04 	ldr.w	pc, [sp], #4

080807d0 <_ZN5Timer5startEj>:
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
 80807d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80807d2:	4605      	mov	r5, r0
 80807d4:	460c      	mov	r4, r1
    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
 80807d6:	2100      	movs	r1, #0
 80807d8:	f7ff ffea 	bl	80807b0 <_ZN5Timer4stopEj>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80807dc:	68a8      	ldr	r0, [r5, #8]
 80807de:	2300      	movs	r3, #0
 80807e0:	b140      	cbz	r0, 80807f4 <_ZN5Timer5startEj+0x24>
 80807e2:	9301      	str	r3, [sp, #4]
 80807e4:	9400      	str	r4, [sp, #0]
 80807e6:	461a      	mov	r2, r3
 80807e8:	4619      	mov	r1, r3
 80807ea:	f003 fdc3 	bl	8084374 <os_timer_change>
 80807ee:	fab0 f080 	clz	r0, r0
 80807f2:	0940      	lsrs	r0, r0, #5
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
 80807f4:	b003      	add	sp, #12
 80807f6:	bd30      	pop	{r4, r5, pc}

080807f8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80807f8:	b538      	push	{r3, r4, r5, lr}
 80807fa:	4b0e      	ldr	r3, [pc, #56]	; (8080834 <_ZN5TimerD1Ev+0x3c>)
 80807fc:	4604      	mov	r4, r0
 80807fe:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 8080800:	6883      	ldr	r3, [r0, #8]
 8080802:	b183      	cbz	r3, 8080826 <_ZN5TimerD1Ev+0x2e>
        	{
        		stop();
 8080804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8080808:	f7ff ffd2 	bl	80807b0 <_ZN5Timer4stopEj>
        		while (running) {
 808080c:	7923      	ldrb	r3, [r4, #4]
 808080e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8080812:	b11b      	cbz	r3, 808081c <_ZN5TimerD1Ev+0x24>
				delay(1);
 8080814:	2001      	movs	r0, #1
 8080816:	f004 ff11 	bl	808563c <delay>
 808081a:	e7f7      	b.n	808080c <_ZN5TimerD1Ev+0x14>
			}
        		os_timer_destroy(handle, nullptr);
 808081c:	4629      	mov	r1, r5
 808081e:	68a0      	ldr	r0, [r4, #8]
 8080820:	f003 fd98 	bl	8084354 <os_timer_destroy>
            handle = nullptr;
 8080824:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080826:	f104 000c 	add.w	r0, r4, #12
 808082a:	f7ff ff65 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 808082e:	4620      	mov	r0, r4
 8080830:	bd38      	pop	{r3, r4, r5, pc}
 8080832:	bf00      	nop
 8080834:	0808a818 	.word	0x0808a818

08080838 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080838:	b510      	push	{r4, lr}
 808083a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 808083c:	f7ff ffdc 	bl	80807f8 <_ZN5TimerD1Ev>
 8080840:	4620      	mov	r0, r4
 8080842:	f7ff fc2c 	bl	808009e <_ZdlPv>
 8080846:	4620      	mov	r0, r4
 8080848:	bd10      	pop	{r4, pc}
	...

0808084c <_Z12serialEvent1v>:


/* this runs in between calls to loop() to
* feed gnss parser with available data on the UART */
void serialEvent1() {
		gnss.update();
 808084c:	4801      	ldr	r0, [pc, #4]	; (8080854 <_Z12serialEvent1v+0x8>)
 808084e:	f001 bc37 	b.w	80820c0 <_ZN10UBX_NEOM8N6updateEv>
 8080852:	bf00      	nop
 8080854:	20000ae0 	.word	0x20000ae0

08080858 <_Z13resetGNSSInfov>:
	}
}
#endif


void resetGNSSInfo() {
 8080858:	b508      	push	{r3, lr}
	valid_fix_flag = false;
 808085a:	4b0f      	ldr	r3, [pc, #60]	; (8080898 <_Z13resetGNSSInfov+0x40>)
 808085c:	2100      	movs	r1, #0
	lat = lon = alt = hAcc= speed_mph = 0.0;
 808085e:	480f      	ldr	r0, [pc, #60]	; (808089c <_Z13resetGNSSInfov+0x44>)
 8080860:	2200      	movs	r2, #0
}
#endif


void resetGNSSInfo() {
	valid_fix_flag = false;
 8080862:	7019      	strb	r1, [r3, #0]
	lat = lon = alt = hAcc= speed_mph = 0.0;
 8080864:	2300      	movs	r3, #0
 8080866:	e9c0 2300 	strd	r2, r3, [r0]
 808086a:	480d      	ldr	r0, [pc, #52]	; (80808a0 <_Z13resetGNSSInfov+0x48>)
 808086c:	e9c0 2300 	strd	r2, r3, [r0]
 8080870:	480c      	ldr	r0, [pc, #48]	; (80808a4 <_Z13resetGNSSInfov+0x4c>)
 8080872:	e9c0 2300 	strd	r2, r3, [r0]
 8080876:	480c      	ldr	r0, [pc, #48]	; (80808a8 <_Z13resetGNSSInfov+0x50>)
 8080878:	e9c0 2300 	strd	r2, r3, [r0]
 808087c:	480b      	ldr	r0, [pc, #44]	; (80808ac <_Z13resetGNSSInfov+0x54>)
 808087e:	e9c0 2300 	strd	r2, r3, [r0]
	nb_sats = 0;
 8080882:	4b0b      	ldr	r3, [pc, #44]	; (80808b0 <_Z13resetGNSSInfov+0x58>)
 8080884:	7019      	strb	r1, [r3, #0]
 8080886:	f003 fcfd 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	// ttff = 0; // don't reset so we can use it to detect first time fix from reset from fix after sleep
	gnss_begin_ms = millis();
 808088a:	4b0a      	ldr	r3, [pc, #40]	; (80808b4 <_Z13resetGNSSInfov+0x5c>)
 808088c:	6018      	str	r0, [r3, #0]
 808088e:	f003 fcf9 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	gnss_last_fix_ms = millis();
 8080892:	4b09      	ldr	r3, [pc, #36]	; (80808b8 <_Z13resetGNSSInfov+0x60>)
 8080894:	6018      	str	r0, [r3, #0]
 8080896:	bd08      	pop	{r3, pc}
 8080898:	20000c3d 	.word	0x20000c3d
 808089c:	20000c40 	.word	0x20000c40
 80808a0:	20000c30 	.word	0x20000c30
 80808a4:	20000a58 	.word	0x20000a58
 80808a8:	20000c18 	.word	0x20000c18
 80808ac:	20000a60 	.word	0x20000a60
 80808b0:	20000a80 	.word	0x20000a80
 80808b4:	20000aa0 	.word	0x20000aa0
 80808b8:	20000c78 	.word	0x20000c78
 80808bc:	00000000 	.word	0x00000000

080808c0 <_Z21reset_publish_sessionv>:
}


void reset_publish_session() {
 80808c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// no session to publish, get new session id and exit
	if (tripTime == 0) {
 80808c4:	4d24      	ldr	r5, [pc, #144]	; (8080958 <_Z21reset_publish_sessionv+0x98>)
	gnss_begin_ms = millis();
	gnss_last_fix_ms = millis();
}


void reset_publish_session() {
 80808c6:	b085      	sub	sp, #20
	// no session to publish, get new session id and exit
	if (tripTime == 0) {
 80808c8:	682c      	ldr	r4, [r5, #0]
 80808ca:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8080974 <_Z21reset_publish_sessionv+0xb4>
 80808ce:	2c00      	cmp	r4, #0
 80808d0:	d036      	beq.n	8080940 <_Z21reset_publish_sessionv+0x80>
	uint32_t trip_seconds = tripTime % 60;
	float tripDistance_mi = tripDistance_m / 1609.3;

	// format session stats
	const char *pattern = "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}";
	snprintf(buffer, sizeof(buffer), pattern, session_id, trip_minutes, trip_seconds, tripDistance_mi);
 80808d2:	a31f      	add	r3, pc, #124	; (adr r3, 8080950 <_Z21reset_publish_sessionv+0x90>)
 80808d4:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	// convert seconds -> minutes:seconds and meters -> miles
	uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
	uint32_t trip_seconds = tripTime % 60;
	float tripDistance_mi = tripDistance_m / 1609.3;
 80808d8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8080978 <_Z21reset_publish_sessionv+0xb8>
		session_id_reset = true;
		return;
	}

	// convert seconds -> minutes:seconds and meters -> miles
	uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 80808dc:	2c3c      	cmp	r4, #60	; 0x3c
 80808de:	bf88      	it	hi
 80808e0:	263c      	movhi	r6, #60	; 0x3c
	uint32_t trip_seconds = tripTime % 60;
	float tripDistance_mi = tripDistance_m / 1609.3;

	// format session stats
	const char *pattern = "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}";
	snprintf(buffer, sizeof(buffer), pattern, session_id, trip_minutes, trip_seconds, tripDistance_mi);
 80808e2:	e9d9 0100 	ldrd	r0, r1, [r9]
		session_id_reset = true;
		return;
	}

	// convert seconds -> minutes:seconds and meters -> miles
	uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 80808e6:	bf8c      	ite	hi
 80808e8:	fbb4 f6f6 	udivhi	r6, r4, r6
 80808ec:	2600      	movls	r6, #0
	uint32_t trip_seconds = tripTime % 60;
	float tripDistance_mi = tripDistance_m / 1609.3;

	// format session stats
	const char *pattern = "{\"tags\":{},\"values\":{\"id\":%lu,\"min\":%lu,\"sec\":%lu,\"mi\":%.1f}}";
	snprintf(buffer, sizeof(buffer), pattern, session_id, trip_minutes, trip_seconds, tripDistance_mi);
 80808ee:	f007 ff4b 	bl	8088788 <__aeabi_ddiv>
 80808f2:	f008 f8f7 	bl	8088ae4 <__aeabi_d2f>
 80808f6:	273c      	movs	r7, #60	; 0x3c
 80808f8:	f007 fdc8 	bl	808848c <__aeabi_f2d>
 80808fc:	fbb4 f3f7 	udiv	r3, r4, r7
 8080900:	fb07 4413 	mls	r4, r7, r3, r4
 8080904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080908:	4b14      	ldr	r3, [pc, #80]	; (808095c <_Z21reset_publish_sessionv+0x9c>)
 808090a:	9401      	str	r4, [sp, #4]
 808090c:	9600      	str	r6, [sp, #0]
 808090e:	681b      	ldr	r3, [r3, #0]
 8080910:	4a13      	ldr	r2, [pc, #76]	; (8080960 <_Z21reset_publish_sessionv+0xa0>)
 8080912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080916:	4813      	ldr	r0, [pc, #76]	; (8080964 <_Z21reset_publish_sessionv+0xa4>)
 8080918:	f003 ff9a 	bl	8084850 <snprintf>
 808091c:	4b12      	ldr	r3, [pc, #72]	; (8080968 <_Z21reset_publish_sessionv+0xa8>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808091e:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080920:	781b      	ldrb	r3, [r3, #0]
	#ifdef serial_debug
	Serial.println(buffer);
	#endif
	// push to publish buffer so it'll be published next time it's cloud connected
	publishQueue.publish("GNSS/session", buffer, 60, PRIVATE);
 8080922:	4a10      	ldr	r2, [pc, #64]	; (8080964 <_Z21reset_publish_sessionv+0xa4>)
 8080924:	f88d 3000 	strb.w	r3, [sp]
 8080928:	f88d 4004 	strb.w	r4, [sp, #4]
 808092c:	463b      	mov	r3, r7
 808092e:	490f      	ldr	r1, [pc, #60]	; (808096c <_Z21reset_publish_sessionv+0xac>)
 8080930:	480f      	ldr	r0, [pc, #60]	; (8080970 <_Z21reset_publish_sessionv+0xb0>)
 8080932:	f001 ffb7 	bl	80828a4 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>
	// reset trip data and set flag to renew session id
	tripTime = 0;
	tripDistance_m = 0.0;
 8080936:	2200      	movs	r2, #0
 8080938:	2300      	movs	r3, #0
 808093a:	e9c9 2300 	strd	r2, r3, [r9]
	Serial.println(buffer);
	#endif
	// push to publish buffer so it'll be published next time it's cloud connected
	publishQueue.publish("GNSS/session", buffer, 60, PRIVATE);
	// reset trip data and set flag to renew session id
	tripTime = 0;
 808093e:	602c      	str	r4, [r5, #0]
	tripDistance_m = 0.0;
	session_id_reset = true;
 8080940:	2301      	movs	r3, #1
 8080942:	f888 3000 	strb.w	r3, [r8]
	return;
}
 8080946:	b005      	add	sp, #20
 8080948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808094c:	f3af 8000 	nop.w
 8080950:	33333333 	.word	0x33333333
 8080954:	40992533 	.word	0x40992533
 8080958:	20000ca0 	.word	0x20000ca0
 808095c:	20000a98 	.word	0x20000a98
 8080960:	0808a890 	.word	0x0808a890
 8080964:	20000908 	.word	0x20000908
 8080968:	20000a94 	.word	0x20000a94
 808096c:	0808a8ce 	.word	0x0808a8ce
 8080970:	20000cc4 	.word	0x20000cc4
 8080974:	20000408 	.word	0x20000408
 8080978:	20000d08 	.word	0x20000d08

0808097c <_Z21status_bar_top_updatev>:


void status_bar_top_update() {
 808097c:	b530      	push	{r4, r5, lr}
	display.drawFastHLine(0, 9, display.width(), WHITE);
 808097e:	4847      	ldr	r0, [pc, #284]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
	session_id_reset = true;
	return;
}


void status_bar_top_update() {
 8080980:	b085      	sub	sp, #20
	display.drawFastHLine(0, 9, display.width(), WHITE);
 8080982:	f002 fcb5 	bl	80832f0 <_ZN12Adafruit_GFX5widthEv>
 8080986:	2501      	movs	r5, #1
 8080988:	4603      	mov	r3, r0
 808098a:	2209      	movs	r2, #9
 808098c:	2100      	movs	r1, #0
 808098e:	4843      	ldr	r0, [pc, #268]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080990:	9500      	str	r5, [sp, #0]
 8080992:	f002 ffbd 	bl	8083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>
 8080996:	f003 ff03 	bl	80847a0 <spark_cloud_flag_connected>
	// cellular network cloud status indicator
	if(Particle.connected()) {
 808099a:	4604      	mov	r4, r0
 808099c:	b128      	cbz	r0, 80809aa <_Z21status_bar_top_updatev+0x2e>
		//display.print("CC");
		display.drawBitmap(0, 0, cloud_icon, 10, 10, 1);
 808099e:	230a      	movs	r3, #10
 80809a0:	9301      	str	r3, [sp, #4]
 80809a2:	9300      	str	r3, [sp, #0]
 80809a4:	9502      	str	r5, [sp, #8]
 80809a6:	4b3e      	ldr	r3, [pc, #248]	; (8080aa0 <_Z21status_bar_top_updatev+0x124>)
 80809a8:	e01b      	b.n	80809e2 <_Z21status_bar_top_updatev+0x66>
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80809aa:	4602      	mov	r2, r0
 80809ac:	4601      	mov	r1, r0
 80809ae:	f003 febf 	bl	8084730 <network_connecting>
	} else {
		#ifdef cellular
		if(Cellular.connecting()) {
 80809b2:	b150      	cbz	r0, 80809ca <_Z21status_bar_top_updatev+0x4e>
			display.drawBitmap(0, 0, signal_off_icon, 12, 10, 1);
 80809b4:	220c      	movs	r2, #12
 80809b6:	230a      	movs	r3, #10
 80809b8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80809bc:	9502      	str	r5, [sp, #8]
 80809be:	4b39      	ldr	r3, [pc, #228]	; (8080aa4 <_Z21status_bar_top_updatev+0x128>)
 80809c0:	4622      	mov	r2, r4
 80809c2:	4621      	mov	r1, r4
 80809c4:	4835      	ldr	r0, [pc, #212]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 80809c6:	f002 fb77 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80809ca:	2200      	movs	r2, #0
 80809cc:	4611      	mov	r1, r2
 80809ce:	4610      	mov	r0, r2
 80809d0:	f003 feb6 	bl	8084740 <network_ready>
		}
		if(Cellular.ready()) {
 80809d4:	b150      	cbz	r0, 80809ec <_Z21status_bar_top_updatev+0x70>
			display.drawBitmap(0, 0, signal_2G_icon, 12, 12, 1);
 80809d6:	2301      	movs	r3, #1
 80809d8:	9302      	str	r3, [sp, #8]
 80809da:	230c      	movs	r3, #12
 80809dc:	9301      	str	r3, [sp, #4]
 80809de:	9300      	str	r3, [sp, #0]
 80809e0:	4b31      	ldr	r3, [pc, #196]	; (8080aa8 <_Z21status_bar_top_updatev+0x12c>)
 80809e2:	2200      	movs	r2, #0
 80809e4:	4611      	mov	r1, r2
 80809e6:	482d      	ldr	r0, [pc, #180]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 80809e8:	f002 fb66 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
		if(WiFi.connecting()) display.print("--");
		if(WiFi.ready()) display.print("WiFi");
		#endif
	}
	// gnss fix status indicator
	if (valid_fix_flag) {
 80809ec:	4b2f      	ldr	r3, [pc, #188]	; (8080aac <_Z21status_bar_top_updatev+0x130>)
 80809ee:	2101      	movs	r1, #1
 80809f0:	781a      	ldrb	r2, [r3, #0]
 80809f2:	230a      	movs	r3, #10
		display.drawBitmap(14, 0, gnss_fix_icon_10, 10, 10, 1);
 80809f4:	9102      	str	r1, [sp, #8]
 80809f6:	9301      	str	r3, [sp, #4]
 80809f8:	9300      	str	r3, [sp, #0]
		if(WiFi.connecting()) display.print("--");
		if(WiFi.ready()) display.print("WiFi");
		#endif
	}
	// gnss fix status indicator
	if (valid_fix_flag) {
 80809fa:	b112      	cbz	r2, 8080a02 <_Z21status_bar_top_updatev+0x86>
		display.drawBitmap(14, 0, gnss_fix_icon_10, 10, 10, 1);
 80809fc:	4b2c      	ldr	r3, [pc, #176]	; (8080ab0 <_Z21status_bar_top_updatev+0x134>)
 80809fe:	2200      	movs	r2, #0
 8080a00:	e000      	b.n	8080a04 <_Z21status_bar_top_updatev+0x88>
	} else {
		display.drawBitmap(14, 0, gnss_wait_icon_10, 10, 10, 1);
 8080a02:	4b2c      	ldr	r3, [pc, #176]	; (8080ab4 <_Z21status_bar_top_updatev+0x138>)
 8080a04:	210e      	movs	r1, #14
 8080a06:	4825      	ldr	r0, [pc, #148]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a08:	f002 fb56 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	}
	// tracking status indicator
	display.setCursor(28, 0);
 8080a0c:	2200      	movs	r2, #0
 8080a0e:	211c      	movs	r1, #28
 8080a10:	4822      	ldr	r0, [pc, #136]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a12:	f002 fc60 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.printf("%s", tracking_on_flag?"T":" ");
 8080a16:	4b28      	ldr	r3, [pc, #160]	; (8080ab8 <_Z21status_bar_top_updatev+0x13c>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080a18:	4a28      	ldr	r2, [pc, #160]	; (8080abc <_Z21status_bar_top_updatev+0x140>)
 8080a1a:	7819      	ldrb	r1, [r3, #0]
 8080a1c:	4b28      	ldr	r3, [pc, #160]	; (8080ac0 <_Z21status_bar_top_updatev+0x144>)
 8080a1e:	481f      	ldr	r0, [pc, #124]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a20:	2900      	cmp	r1, #0
 8080a22:	bf08      	it	eq
 8080a24:	4613      	moveq	r3, r2
 8080a26:	4a27      	ldr	r2, [pc, #156]	; (8080ac4 <_Z21status_bar_top_updatev+0x148>)
 8080a28:	2100      	movs	r1, #0
 8080a2a:	f004 fc17 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	// current local time
	display.setCursor(48, 0);
 8080a2e:	2200      	movs	r2, #0
 8080a30:	2130      	movs	r1, #48	; 0x30
 8080a32:	481a      	ldr	r0, [pc, #104]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a34:	f002 fc4f 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.printf("%d:%02d%s", Time.hourFormat12(), Time.minute(), Time.isAM()?"AM":"PM");
 8080a38:	f004 fddc 	bl	80855f4 <_ZN9TimeClass12hourFormat12Ev>
 8080a3c:	4604      	mov	r4, r0
 8080a3e:	f004 fde9 	bl	8085614 <_ZN9TimeClass6minuteEv>
 8080a42:	4605      	mov	r5, r0
 8080a44:	f004 fddd 	bl	8085602 <_ZN9TimeClass4isAMEv>
 8080a48:	4b1f      	ldr	r3, [pc, #124]	; (8080ac8 <_Z21status_bar_top_updatev+0x14c>)
 8080a4a:	4a20      	ldr	r2, [pc, #128]	; (8080acc <_Z21status_bar_top_updatev+0x150>)
 8080a4c:	2100      	movs	r1, #0
 8080a4e:	2800      	cmp	r0, #0
 8080a50:	bf14      	ite	ne
 8080a52:	4610      	movne	r0, r2
 8080a54:	4618      	moveq	r0, r3
 8080a56:	9500      	str	r5, [sp, #0]
 8080a58:	4623      	mov	r3, r4
 8080a5a:	9001      	str	r0, [sp, #4]
 8080a5c:	4a1c      	ldr	r2, [pc, #112]	; (8080ad0 <_Z21status_bar_top_updatev+0x154>)
 8080a5e:	480f      	ldr	r0, [pc, #60]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a60:	f004 fbfc 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	// battery state of charge
	#ifdef cellular
	display.setCursor(104, 0);
 8080a64:	2168      	movs	r1, #104	; 0x68
 8080a66:	2200      	movs	r2, #0
 8080a68:	480c      	ldr	r0, [pc, #48]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a6a:	f002 fc34 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	float soc = battery.getSoC();
 8080a6e:	4819      	ldr	r0, [pc, #100]	; (8080ad4 <_Z21status_bar_top_updatev+0x158>)
 8080a70:	f004 fe58 	bl	8085724 <_ZN9FuelGauge6getSoCEv>
	display.printf("%.0f%%", soc<100.0?soc:100.0);
 8080a74:	4918      	ldr	r1, [pc, #96]	; (8080ad8 <_Z21status_bar_top_updatev+0x15c>)
	display.setCursor(48, 0);
	display.printf("%d:%02d%s", Time.hourFormat12(), Time.minute(), Time.isAM()?"AM":"PM");
	// battery state of charge
	#ifdef cellular
	display.setCursor(104, 0);
	float soc = battery.getSoC();
 8080a76:	4604      	mov	r4, r0
	display.printf("%.0f%%", soc<100.0?soc:100.0);
 8080a78:	f008 fb30 	bl	80890dc <__aeabi_fcmplt>
 8080a7c:	b118      	cbz	r0, 8080a86 <_Z21status_bar_top_updatev+0x10a>
 8080a7e:	4620      	mov	r0, r4
 8080a80:	f007 fd04 	bl	808848c <__aeabi_f2d>
 8080a84:	e001      	b.n	8080a8a <_Z21status_bar_top_updatev+0x10e>
 8080a86:	4915      	ldr	r1, [pc, #84]	; (8080adc <_Z21status_bar_top_updatev+0x160>)
 8080a88:	2000      	movs	r0, #0
 8080a8a:	e9cd 0100 	strd	r0, r1, [sp]
 8080a8e:	4a14      	ldr	r2, [pc, #80]	; (8080ae0 <_Z21status_bar_top_updatev+0x164>)
 8080a90:	2100      	movs	r1, #0
 8080a92:	4802      	ldr	r0, [pc, #8]	; (8080a9c <_Z21status_bar_top_updatev+0x120>)
 8080a94:	f004 fbe2 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	#endif
}
 8080a98:	b005      	add	sp, #20
 8080a9a:	bd30      	pop	{r4, r5, pc}
 8080a9c:	20000c48 	.word	0x20000c48
 8080aa0:	0808a824 	.word	0x0808a824
 8080aa4:	0808adec 	.word	0x0808adec
 8080aa8:	0808af4c 	.word	0x0808af4c
 8080aac:	20000c3d 	.word	0x20000c3d
 8080ab0:	0808ae04 	.word	0x0808ae04
 8080ab4:	0808a838 	.word	0x0808a838
 8080ab8:	20000c76 	.word	0x20000c76
 8080abc:	0808ba3f 	.word	0x0808ba3f
 8080ac0:	0808a96e 	.word	0x0808a96e
 8080ac4:	0808b175 	.word	0x0808b175
 8080ac8:	0808a8de 	.word	0x0808a8de
 8080acc:	0808a8db 	.word	0x0808a8db
 8080ad0:	0808a8e1 	.word	0x0808a8e1
 8080ad4:	20000d14 	.word	0x20000d14
 8080ad8:	42c80000 	.word	0x42c80000
 8080adc:	40590000 	.word	0x40590000
 8080ae0:	0808a8eb 	.word	0x0808a8eb
 8080ae4:	00000000 	.word	0x00000000

08080ae8 <_Z24status_bar_bottom_updatev>:


void status_bar_bottom_update() {
 8080ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//update bottom status bar
	display.drawFastHLine(0, 55, display.width(), WHITE);
 8080aea:	4831      	ldr	r0, [pc, #196]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080aec:	f002 fc00 	bl	80832f0 <_ZN12Adafruit_GFX5widthEv>
 8080af0:	2301      	movs	r3, #1
 8080af2:	9300      	str	r3, [sp, #0]
 8080af4:	2237      	movs	r2, #55	; 0x37
 8080af6:	4603      	mov	r3, r0
 8080af8:	2100      	movs	r1, #0
 8080afa:	482d      	ldr	r0, [pc, #180]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080afc:	f002 ff08 	bl	8083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>

	// left: trip time
	display.setCursor(0, 57);
 8080b00:	2239      	movs	r2, #57	; 0x39
 8080b02:	2100      	movs	r1, #0
 8080b04:	482a      	ldr	r0, [pc, #168]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b06:	f002 fbe6 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	uint32_t trip_minutes = (tripTime > 60)? tripTime / 60 : 0;
 8080b0a:	4b2a      	ldr	r3, [pc, #168]	; (8080bb4 <_Z24status_bar_bottom_updatev+0xcc>)
 8080b0c:	203c      	movs	r0, #60	; 0x3c
 8080b0e:	681a      	ldr	r2, [r3, #0]
 8080b10:	fbb2 f1f0 	udiv	r1, r2, r0
 8080b14:	2a3c      	cmp	r2, #60	; 0x3c
 8080b16:	bf88      	it	hi
 8080b18:	fbb2 f3f0 	udivhi	r3, r2, r0
 8080b1c:	fb00 2211 	mls	r2, r0, r1, r2
 8080b20:	bf98      	it	ls
 8080b22:	2300      	movls	r3, #0
 8080b24:	9200      	str	r2, [sp, #0]
 8080b26:	2100      	movs	r1, #0
 8080b28:	4a23      	ldr	r2, [pc, #140]	; (8080bb8 <_Z24status_bar_bottom_updatev+0xd0>)
 8080b2a:	4821      	ldr	r0, [pc, #132]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b2c:	f004 fb96 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	display.printf("%02d:%02d", trip_minutes, tripTime % 60);
	// center: last fix accuracy
	display.setCursor(49,57);
 8080b30:	2131      	movs	r1, #49	; 0x31
 8080b32:	2239      	movs	r2, #57	; 0x39
 8080b34:	481e      	ldr	r0, [pc, #120]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b36:	f002 fbce 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	if (valid_fix_flag) {
 8080b3a:	4b20      	ldr	r3, [pc, #128]	; (8080bbc <_Z24status_bar_bottom_updatev+0xd4>)
 8080b3c:	7819      	ldrb	r1, [r3, #0]
 8080b3e:	b151      	cbz	r1, 8080b56 <_Z24status_bar_bottom_updatev+0x6e>
		display.printf("%.0fm", hAcc); // when valid,  accuracy in meters
 8080b40:	4b1f      	ldr	r3, [pc, #124]	; (8080bc0 <_Z24status_bar_bottom_updatev+0xd8>)
 8080b42:	2100      	movs	r1, #0
 8080b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b48:	4819      	ldr	r0, [pc, #100]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b4a:	e9cd 2300 	strd	r2, r3, [sp]
 8080b4e:	4a1d      	ldr	r2, [pc, #116]	; (8080bc4 <_Z24status_bar_bottom_updatev+0xdc>)
 8080b50:	f004 fb84 	bl	808525c <_ZN5Print11printf_implEbPKcz>
 8080b54:	e010      	b.n	8080b78 <_Z24status_bar_bottom_updatev+0x90>
 8080b56:	4b1c      	ldr	r3, [pc, #112]	; (8080bc8 <_Z24status_bar_bottom_updatev+0xe0>)
 8080b58:	4a1c      	ldr	r2, [pc, #112]	; (8080bcc <_Z24status_bar_bottom_updatev+0xe4>)
 8080b5a:	781b      	ldrb	r3, [r3, #0]
 8080b5c:	4814      	ldr	r0, [pc, #80]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b5e:	f004 fb7d 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	} else {
		display.printf("%d", nb_sats); // # sats while waiting for fix
		display.drawBitmap(55, 55, satellite_icon, 10, 10, 1);
 8080b62:	2301      	movs	r3, #1
 8080b64:	9302      	str	r3, [sp, #8]
 8080b66:	2237      	movs	r2, #55	; 0x37
 8080b68:	230a      	movs	r3, #10
 8080b6a:	9301      	str	r3, [sp, #4]
 8080b6c:	9300      	str	r3, [sp, #0]
 8080b6e:	4611      	mov	r1, r2
 8080b70:	4b17      	ldr	r3, [pc, #92]	; (8080bd0 <_Z24status_bar_bottom_updatev+0xe8>)
 8080b72:	480f      	ldr	r0, [pc, #60]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b74:	f002 faa0 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	}
	// right: trip distance
	display.setCursor(79, 57);
 8080b78:	2239      	movs	r2, #57	; 0x39
 8080b7a:	214f      	movs	r1, #79	; 0x4f
 8080b7c:	480c      	ldr	r0, [pc, #48]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b7e:	f002 fbaa 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
 8080b82:	a309      	add	r3, pc, #36	; (adr r3, 8080ba8 <_Z24status_bar_bottom_updatev+0xc0>)
 8080b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080b88:	4912      	ldr	r1, [pc, #72]	; (8080bd4 <_Z24status_bar_bottom_updatev+0xec>)
 8080b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080b8e:	f007 fdfb 	bl	8088788 <__aeabi_ddiv>
 8080b92:	4a11      	ldr	r2, [pc, #68]	; (8080bd8 <_Z24status_bar_bottom_updatev+0xf0>)
 8080b94:	e9cd 0100 	strd	r0, r1, [sp]
 8080b98:	2100      	movs	r1, #0
 8080b9a:	4805      	ldr	r0, [pc, #20]	; (8080bb0 <_Z24status_bar_bottom_updatev+0xc8>)
 8080b9c:	f004 fb5e 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	display.printf("%.2fmi", tripDistance_m/1609.3);
}
 8080ba0:	b005      	add	sp, #20
 8080ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8080ba6:	bf00      	nop
 8080ba8:	33333333 	.word	0x33333333
 8080bac:	40992533 	.word	0x40992533
 8080bb0:	20000c48 	.word	0x20000c48
 8080bb4:	20000ca0 	.word	0x20000ca0
 8080bb8:	0808a8f2 	.word	0x0808a8f2
 8080bbc:	20000c3d 	.word	0x20000c3d
 8080bc0:	20000c30 	.word	0x20000c30
 8080bc4:	0808a8fc 	.word	0x0808a8fc
 8080bc8:	20000a80 	.word	0x20000a80
 8080bcc:	0808b027 	.word	0x0808b027
 8080bd0:	0808af38 	.word	0x0808af38
 8080bd4:	20000d08 	.word	0x20000d08
 8080bd8:	0808a902 	.word	0x0808a902
 8080bdc:	00000000 	.word	0x00000000

08080be0 <_Z22distance_angle_betweenfdddb>:
// calculate distance or angle between two locations
// lat1 and long1 : previous locations
// lat2 and long2 : current locations
// approximation used: equirectangular (valid for short distances only)
// dist_angle: if True _> distance, else --> angle/bearing from old_location to current location
double distance_angle_between (float lat1, double long1, double lat2, double long2, bool dist_angle) {
 8080be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080be4:	4690      	mov	r8, r2
 8080be6:	4699      	mov	r9, r3
	double dLon = radians(long2-long1);
	double aLat = radians(lat1+lat2)/2;
 8080be8:	f007 fc50 	bl	808848c <__aeabi_f2d>
	double x = dLon*cos(aLat);
 8080bec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
// lat2 and long2 : current locations
// approximation used: equirectangular (valid for short distances only)
// dist_angle: if True _> distance, else --> angle/bearing from old_location to current location
double distance_angle_between (float lat1, double long1, double lat2, double long2, bool dist_angle) {
	double dLon = radians(long2-long1);
	double aLat = radians(lat1+lat2)/2;
 8080bf0:	4606      	mov	r6, r0
 8080bf2:	460f      	mov	r7, r1
	double x = dLon*cos(aLat);
 8080bf4:	f007 faec 	bl	80881d0 <__adddf3>
 8080bf8:	a333      	add	r3, pc, #204	; (adr r3, 8080cc8 <_Z22distance_angle_betweenfdddb+0xe8>)
 8080bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080bfe:	f007 fc99 	bl	8088534 <__aeabi_dmul>
 8080c02:	2200      	movs	r2, #0
 8080c04:	4b34      	ldr	r3, [pc, #208]	; (8080cd8 <_Z22distance_angle_betweenfdddb+0xf8>)
 8080c06:	f007 fdbf 	bl	8088788 <__aeabi_ddiv>
 8080c0a:	2200      	movs	r2, #0
 8080c0c:	4b33      	ldr	r3, [pc, #204]	; (8080cdc <_Z22distance_angle_betweenfdddb+0xfc>)
 8080c0e:	f007 fc91 	bl	8088534 <__aeabi_dmul>
 8080c12:	f005 fe07 	bl	8086824 <cos>
 8080c16:	4604      	mov	r4, r0
 8080c18:	460d      	mov	r5, r1
 8080c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8080c1e:	4642      	mov	r2, r8
 8080c20:	464b      	mov	r3, r9
 8080c22:	f007 fad3 	bl	80881cc <__aeabi_dsub>
 8080c26:	a328      	add	r3, pc, #160	; (adr r3, 8080cc8 <_Z22distance_angle_betweenfdddb+0xe8>)
 8080c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080c2c:	f007 fc82 	bl	8088534 <__aeabi_dmul>
 8080c30:	2200      	movs	r2, #0
 8080c32:	4b29      	ldr	r3, [pc, #164]	; (8080cd8 <_Z22distance_angle_betweenfdddb+0xf8>)
 8080c34:	f007 fda8 	bl	8088788 <__aeabi_ddiv>
 8080c38:	4622      	mov	r2, r4
 8080c3a:	462b      	mov	r3, r5
 8080c3c:	f007 fc7a 	bl	8088534 <__aeabi_dmul>
}


// functions included in Arduino but not Particle:
double radians(double deg) {
	return (deg * M_PI) / 180.0;
 8080c40:	4632      	mov	r2, r6
 8080c42:	463b      	mov	r3, r7
// approximation used: equirectangular (valid for short distances only)
// dist_angle: if True _> distance, else --> angle/bearing from old_location to current location
double distance_angle_between (float lat1, double long1, double lat2, double long2, bool dist_angle) {
	double dLon = radians(long2-long1);
	double aLat = radians(lat1+lat2)/2;
	double x = dLon*cos(aLat);
 8080c44:	4604      	mov	r4, r0
 8080c46:	460d      	mov	r5, r1
}


// functions included in Arduino but not Particle:
double radians(double deg) {
	return (deg * M_PI) / 180.0;
 8080c48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8080c4c:	f007 fabe 	bl	80881cc <__aeabi_dsub>
 8080c50:	a31d      	add	r3, pc, #116	; (adr r3, 8080cc8 <_Z22distance_angle_betweenfdddb+0xe8>)
 8080c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080c56:	f007 fc6d 	bl	8088534 <__aeabi_dmul>
 8080c5a:	4b1f      	ldr	r3, [pc, #124]	; (8080cd8 <_Z22distance_angle_betweenfdddb+0xf8>)
 8080c5c:	2200      	movs	r2, #0
 8080c5e:	f007 fd93 	bl	8088788 <__aeabi_ddiv>
double distance_angle_between (float lat1, double long1, double lat2, double long2, bool dist_angle) {
	double dLon = radians(long2-long1);
	double aLat = radians(lat1+lat2)/2;
	double x = dLon*cos(aLat);
	double y = radians(lat2-lat1);
	if (dist_angle){
 8080c62:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
}


// functions included in Arduino but not Particle:
double radians(double deg) {
	return (deg * M_PI) / 180.0;
 8080c66:	4606      	mov	r6, r0
 8080c68:	460f      	mov	r7, r1
double distance_angle_between (float lat1, double long1, double lat2, double long2, bool dist_angle) {
	double dLon = radians(long2-long1);
	double aLat = radians(lat1+lat2)/2;
	double x = dLon*cos(aLat);
	double y = radians(lat2-lat1);
	if (dist_angle){
 8080c6a:	b1e3      	cbz	r3, 8080ca6 <_Z22distance_angle_betweenfdddb+0xc6>
		// calculate distance
		double dist = sqrt(x*x + y*y);
 8080c6c:	4622      	mov	r2, r4
 8080c6e:	462b      	mov	r3, r5
 8080c70:	4620      	mov	r0, r4
 8080c72:	4629      	mov	r1, r5
 8080c74:	f007 fc5e 	bl	8088534 <__aeabi_dmul>
 8080c78:	4632      	mov	r2, r6
 8080c7a:	4604      	mov	r4, r0
 8080c7c:	460d      	mov	r5, r1
 8080c7e:	463b      	mov	r3, r7
 8080c80:	4630      	mov	r0, r6
 8080c82:	4639      	mov	r1, r7
 8080c84:	f007 fc56 	bl	8088534 <__aeabi_dmul>
 8080c88:	4602      	mov	r2, r0
 8080c8a:	460b      	mov	r3, r1
 8080c8c:	4620      	mov	r0, r4
 8080c8e:	4629      	mov	r1, r5
 8080c90:	f007 fa9e 	bl	80881d0 <__adddf3>
 8080c94:	f005 fe10 	bl	80868b8 <sqrt>
		//Log.info("%12.9f, %12.9f, %12.9f, %12.9f, %12.9f", dLon, aLat, x, y, dist);
		//return distance in meters after multiplying by mean earth radius
		return dist*6371009.0;
 8080c98:	a30d      	add	r3, pc, #52	; (adr r3, 8080cd0 <_Z22distance_angle_betweenfdddb+0xf0>)
 8080c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080c9e:	f007 fc49 	bl	8088534 <__aeabi_dmul>
 8080ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
	else {
		// returns angle in degrees!
		// to get bearing relative to course: rel_bearing = bearingTo - course
		// it's in [-pi, pi] and positive -> turn right, negative-> turn left
		double cto= atan2(x, y);
 8080ca6:	4602      	mov	r2, r0
 8080ca8:	460b      	mov	r3, r1
 8080caa:	4620      	mov	r0, r4
 8080cac:	4629      	mov	r1, r5
 8080cae:	f005 fe01 	bl	80868b4 <atan2>
// functions included in Arduino but not Particle:
double radians(double deg) {
	return (deg * M_PI) / 180.0;
}
double degrees(double radians) {
	return (radians * 180.0) / M_PI;
 8080cb2:	2200      	movs	r2, #0
 8080cb4:	4b08      	ldr	r3, [pc, #32]	; (8080cd8 <_Z22distance_angle_betweenfdddb+0xf8>)
 8080cb6:	f007 fc3d 	bl	8088534 <__aeabi_dmul>
 8080cba:	a303      	add	r3, pc, #12	; (adr r3, 8080cc8 <_Z22distance_angle_betweenfdddb+0xe8>)
 8080cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080cc0:	f007 fd62 	bl	8088788 <__aeabi_ddiv>
		double cto= atan2(x, y);
		//cto < 0.0? cto += TWO_PI: cto;
		//or: (degress(cto)+360)%360 to have it in 0..359
		return degrees(cto);
	}
}
 8080cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080cc8:	54442d18 	.word	0x54442d18
 8080ccc:	400921fb 	.word	0x400921fb
 8080cd0:	40000000 	.word	0x40000000
 8080cd4:	41584db0 	.word	0x41584db0
 8080cd8:	40668000 	.word	0x40668000
 8080cdc:	3fe00000 	.word	0x3fe00000

08080ce0 <_Z16heading2cardinald>:

// from Mikal Hart's TinyGPSPlus lib: convert heading in degrees into a cardinal direction: N, NW, ENE ....
const char* heading2cardinal(double heading) {
 8080ce0:	b508      	push	{r3, lr}
	static const char* directions[] = {"N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"};
	int direction = (int)((heading + 11.25) / 22.5);
	return directions[direction % 16];
 8080ce2:	2200      	movs	r2, #0
 8080ce4:	4b0a      	ldr	r3, [pc, #40]	; (8080d10 <_Z16heading2cardinald+0x30>)
 8080ce6:	f007 fa73 	bl	80881d0 <__adddf3>
 8080cea:	2200      	movs	r2, #0
 8080cec:	4b09      	ldr	r3, [pc, #36]	; (8080d14 <_Z16heading2cardinald+0x34>)
 8080cee:	f007 fd4b 	bl	8088788 <__aeabi_ddiv>
 8080cf2:	f007 fecf 	bl	8088a94 <__aeabi_d2iz>
 8080cf6:	4b08      	ldr	r3, [pc, #32]	; (8080d18 <_Z16heading2cardinald+0x38>)
}
 8080cf8:	4a08      	ldr	r2, [pc, #32]	; (8080d1c <_Z16heading2cardinald+0x3c>)

// from Mikal Hart's TinyGPSPlus lib: convert heading in degrees into a cardinal direction: N, NW, ENE ....
const char* heading2cardinal(double heading) {
	static const char* directions[] = {"N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"};
	int direction = (int)((heading + 11.25) / 22.5);
	return directions[direction % 16];
 8080cfa:	4003      	ands	r3, r0
 8080cfc:	2b00      	cmp	r3, #0
 8080cfe:	bfbe      	ittt	lt
 8080d00:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8080d04:	f063 030f 	ornlt	r3, r3, #15
 8080d08:	3301      	addlt	r3, #1
}
 8080d0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8080d0e:	bd08      	pop	{r3, pc}
 8080d10:	40268000 	.word	0x40268000
 8080d14:	40368000 	.word	0x40368000
 8080d18:	8000000f 	.word	0x8000000f
 8080d1c:	0808af64 	.word	0x0808af64

08080d20 <_Z8init_imuv>:

bool init_imu() {
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
 8080d20:	480f      	ldr	r0, [pc, #60]	; (8080d60 <_Z8init_imuv+0x40>)
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
 8080d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	static const char* directions[] = {"N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"};
	int direction = (int)((heading + 11.25) / 22.5);
	return directions[direction % 16];
}

bool init_imu() {
 8080d26:	b510      	push	{r4, lr}
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
 8080d28:	80c3      	strh	r3, [r0, #6]
	imu.settings.gyroSampleRate = 13;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
 8080d2a:	230d      	movs	r3, #13
 8080d2c:	8103      	strh	r3, [r0, #8]
	imu.settings.gyroFifoEnabled = 0;  //Set to include gyro in FIFO
	imu.settings.gyroFifoDecimation = 1;  //set 1 for on /1

	imu.settings.accelEnabled = 1;
	imu.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
	imu.settings.accelSampleRate = 52;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
 8080d2e:	2434      	movs	r4, #52	; 0x34
bool init_imu() {
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	imu.settings.gyroSampleRate = 13;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	imu.settings.gyroBandWidth = 50;  //Hz.  Can be: 50, 100, 200, 400;
 8080d30:	2332      	movs	r3, #50	; 0x32
	return directions[direction % 16];
}

bool init_imu() {
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
 8080d32:	2200      	movs	r2, #0
	imu.settings.gyroBandWidth = 50;  //Hz.  Can be: 50, 100, 200, 400;
	imu.settings.gyroFifoEnabled = 0;  //Set to include gyro in FIFO
	imu.settings.gyroFifoDecimation = 1;  //set 1 for on /1

	imu.settings.accelEnabled = 1;
	imu.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
 8080d34:	2102      	movs	r1, #2
bool init_imu() {
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	imu.settings.gyroSampleRate = 13;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	imu.settings.gyroBandWidth = 50;  //Hz.  Can be: 50, 100, 200, 400;
 8080d36:	8143      	strh	r3, [r0, #10]
	imu.settings.gyroFifoEnabled = 0;  //Set to include gyro in FIFO
	imu.settings.gyroFifoDecimation = 1;  //set 1 for on /1

	imu.settings.accelEnabled = 1;
	imu.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
	imu.settings.accelSampleRate = 52;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
 8080d38:	8244      	strh	r4, [r0, #18]
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	imu.settings.gyroSampleRate = 13;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	imu.settings.gyroBandWidth = 50;  //Hz.  Can be: 50, 100, 200, 400;
	imu.settings.gyroFifoEnabled = 0;  //Set to include gyro in FIFO
	imu.settings.gyroFifoDecimation = 1;  //set 1 for on /1
 8080d3a:	2301      	movs	r3, #1

	imu.settings.accelEnabled = 1;
	imu.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
	imu.settings.accelSampleRate = 52;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
	imu.settings.accelBandWidth = 100;  //Hz.  Can be: 50, 100, 200, 400;
 8080d3c:	2464      	movs	r4, #100	; 0x64
	return directions[direction % 16];
}

bool init_imu() {
	//Over-ride default settings if desired
	imu.settings.gyroEnabled = 0;  //to be reset as there's no need for gyro in this project for now
 8080d3e:	7102      	strb	r2, [r0, #4]
	imu.settings.gyroRange = 1000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	imu.settings.gyroSampleRate = 13;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	imu.settings.gyroBandWidth = 50;  //Hz.  Can be: 50, 100, 200, 400;
	imu.settings.gyroFifoEnabled = 0;  //Set to include gyro in FIFO
 8080d40:	7302      	strb	r2, [r0, #12]
	imu.settings.gyroFifoDecimation = 1;  //set 1 for on /1
 8080d42:	7343      	strb	r3, [r0, #13]

	imu.settings.accelEnabled = 1;
 8080d44:	7383      	strb	r3, [r0, #14]
	imu.settings.accelRange = 2;      //Max G force readable.  Can be: 2, 4, 8, 16
 8080d46:	8201      	strh	r1, [r0, #16]
	imu.settings.accelSampleRate = 52;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
	imu.settings.accelBandWidth = 100;  //Hz.  Can be: 50, 100, 200, 400;
 8080d48:	8284      	strh	r4, [r0, #20]
	imu.settings.accelFifoEnabled = 0;  //Set to include accelerometer in the FIFO
 8080d4a:	7582      	strb	r2, [r0, #22]
	imu.settings.accelFifoDecimation = 2;  //set 1 for on /1
 8080d4c:	75c1      	strb	r1, [r0, #23]

	//Non-basic mode settings
	imu.settings.commMode = 1; // doesn't seem to do anything, no reference to AN either...
 8080d4e:	7643      	strb	r3, [r0, #25]

	//FIFO control settings
	//imu.settings.fifoThreshold = 100;  //Can be 0 to 4096 (16 bit bytes)
	//imu.settings.fifoSampleRate = 10;  //Hz.  Can be: 10, 25, 50, 100, 200, 400, 800, 1600, 3300, 6600
	imu.settings.fifoModeWord = 0;  //FIFO mode.
 8080d50:	7782      	strb	r2, [r0, #30]
	//  1 (Stop when full)
	//  3 (Continuous during trigger)
	//  4 (Bypass until trigger)
	//  6 (Continous mode)

	imu.settings.tempEnabled = 1; // enable temp. data
 8080d52:	7603      	strb	r3, [r0, #24]

	status_t imu_init_flag = imu.begin();
 8080d54:	f002 fc37 	bl	80835c6 <_ZN7LSM6DS35beginEv>

	return imu_init_flag == IMU_SUCCESS? true : false;
}
 8080d58:	fab0 f080 	clz	r0, r0
 8080d5c:	0940      	lsrs	r0, r0, #5
 8080d5e:	bd10      	pop	{r4, pc}
 8080d60:	20000ab0 	.word	0x20000ab0

08080d64 <_Z28enable_WakeOnMotionInterruptv>:

bool enable_WakeOnMotionInterrupt() {
 8080d64:	b538      	push	{r3, r4, r5, lr}
	// ST's recommended  implementation (AN4650 p.50)
	// 1- set ODR (sampling rate) and full scale settings in CTRL1_XL
	dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
	dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_100Hz;
	dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_2g;
	errorAccumulator = imu.writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);
 8080d66:	4d13      	ldr	r5, [pc, #76]	; (8080db4 <_Z28enable_WakeOnMotionInterruptv+0x50>)
 8080d68:	2242      	movs	r2, #66	; 0x42
 8080d6a:	2110      	movs	r1, #16
 8080d6c:	4628      	mov	r0, r5
 8080d6e:	f002 fbcd 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
	// 2- write 0x10 to TAP_CFG: enable high pass filter, no latch on INT (INT is high for just 1/ODR sec)
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_TAP_CFG1, 0x10 );
 8080d72:	2210      	movs	r2, #16
	// ST's recommended  implementation (AN4650 p.50)
	// 1- set ODR (sampling rate) and full scale settings in CTRL1_XL
	dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
	dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_100Hz;
	dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_2g;
	errorAccumulator = imu.writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);
 8080d74:	4604      	mov	r4, r0
	// 2- write 0x10 to TAP_CFG: enable high pass filter, no latch on INT (INT is high for just 1/ODR sec)
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_TAP_CFG1, 0x10 );
 8080d76:	2158      	movs	r1, #88	; 0x58
 8080d78:	4628      	mov	r0, r5
 8080d7a:	f002 fbc7 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
 8080d7e:	4420      	add	r0, r4
 8080d80:	b2c4      	uxtb	r4, r0
	// 3- write 0x00 to WAKE_UP_DUR (bits5&6) in multiple of 1/ODR second
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_DUR, 0x40 ); //for 2 samples long
 8080d82:	2240      	movs	r2, #64	; 0x40
 8080d84:	215c      	movs	r1, #92	; 0x5c
 8080d86:	4628      	mov	r0, r5
 8080d88:	f002 fbc0 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
 8080d8c:	4420      	add	r0, r4
 8080d8e:	b2c4      	uxtb	r4, r0
	// 4- write 0x04 to WAKE_UP_THS (0h to 3Fh) to set detection threshold in multiples of FS/64
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_THS, 0x05 ); //0x04:0.125g, 0x05:0.156, 0x08:0.25g
 8080d90:	2205      	movs	r2, #5
 8080d92:	215b      	movs	r1, #91	; 0x5b
 8080d94:	4628      	mov	r0, r5
 8080d96:	f002 fbb9 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
 8080d9a:	4420      	add	r0, r4
 8080d9c:	b2c4      	uxtb	r4, r0
	// 5- write 0x20 to MD1_CFG to drive wake up interrupt to INT1
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_MD1_CFG, 0x20 );
 8080d9e:	2220      	movs	r2, #32
 8080da0:	215e      	movs	r1, #94	; 0x5e
 8080da2:	4628      	mov	r0, r5
 8080da4:	f002 fbb2 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
	return errorAccumulator == 0? true:false;
 8080da8:	4420      	add	r0, r4
 8080daa:	b2c0      	uxtb	r0, r0
}
 8080dac:	fab0 f080 	clz	r0, r0
 8080db0:	0940      	lsrs	r0, r0, #5
 8080db2:	bd38      	pop	{r3, r4, r5, pc}
 8080db4:	20000ab0 	.word	0x20000ab0

08080db8 <_Z29disable_WakeOnMotionInterruptv>:

bool disable_WakeOnMotionInterrupt() {
 8080db8:	b538      	push	{r3, r4, r5, lr}
	uint8_t errorAccumulator = 0;
	errorAccumulator = imu.writeRegister( LSM6DS3_ACC_GYRO_MD1_CFG, 0x00 );
 8080dba:	4d10      	ldr	r5, [pc, #64]	; (8080dfc <_Z29disable_WakeOnMotionInterruptv+0x44>)
 8080dbc:	2200      	movs	r2, #0
 8080dbe:	215e      	movs	r1, #94	; 0x5e
 8080dc0:	4628      	mov	r0, r5
 8080dc2:	f002 fba3 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_TAP_CFG1, 0x00 );
 8080dc6:	2200      	movs	r2, #0
	return errorAccumulator == 0? true:false;
}

bool disable_WakeOnMotionInterrupt() {
	uint8_t errorAccumulator = 0;
	errorAccumulator = imu.writeRegister( LSM6DS3_ACC_GYRO_MD1_CFG, 0x00 );
 8080dc8:	4604      	mov	r4, r0
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_TAP_CFG1, 0x00 );
 8080dca:	2158      	movs	r1, #88	; 0x58
 8080dcc:	4628      	mov	r0, r5
 8080dce:	f002 fb9d 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
 8080dd2:	4420      	add	r0, r4
 8080dd4:	b2c4      	uxtb	r4, r0
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_DUR, 0x00 );
 8080dd6:	2200      	movs	r2, #0
 8080dd8:	215c      	movs	r1, #92	; 0x5c
 8080dda:	4628      	mov	r0, r5
 8080ddc:	f002 fb96 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
 8080de0:	4420      	add	r0, r4
 8080de2:	b2c4      	uxtb	r4, r0
	errorAccumulator += imu.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_THS, 0x00 );
 8080de4:	2200      	movs	r2, #0
 8080de6:	215b      	movs	r1, #91	; 0x5b
 8080de8:	4628      	mov	r0, r5
 8080dea:	f002 fb8f 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
	return errorAccumulator == 0? true:false;
 8080dee:	4420      	add	r0, r4
 8080df0:	b2c0      	uxtb	r0, r0
}
 8080df2:	fab0 f080 	clz	r0, r0
 8080df6:	0940      	lsrs	r0, r0, #5
 8080df8:	bd38      	pop	{r3, r4, r5, pc}
 8080dfa:	bf00      	nop
 8080dfc:	20000ab0 	.word	0x20000ab0

08080e00 <_Z19post_awake_sequencev>:
	// enable wake up on motion interrupt of the imu module
	enable_WakeOnMotionInterrupt();
}


void post_awake_sequence() {
 8080e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	enter_standby_flag  = false;
 8080e02:	4b22      	ldr	r3, [pc, #136]	; (8080e8c <_Z19post_awake_sequencev+0x8c>)
 8080e04:	2200      	movs	r2, #0
 8080e06:	701a      	strb	r2, [r3, #0]
	disable_WakeOnMotionInterrupt();
 8080e08:	f7ff ffd6 	bl	8080db8 <_Z29disable_WakeOnMotionInterruptv>
	// reset GNSS module
	gnss.start(&Serial1, 9600, V33_SW); //TODO replace with a function that does resume() rather than (re)start()
 8080e0c:	f005 f9cc 	bl	80861a8 <_Z22__fetch_global_Serial1v>
 8080e10:	231d      	movs	r3, #29
 8080e12:	4601      	mov	r1, r0
 8080e14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8080e18:	481d      	ldr	r0, [pc, #116]	; (8080e90 <_Z19post_awake_sequencev+0x90>)
 8080e1a:	f001 fae3 	bl	80823e4 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh>
	resetGNSSInfo();
 8080e1e:	f7ff fd1b 	bl	8080858 <_Z13resetGNSSInfov>
	// resume display activity
	display.begin(SH1106_SWITCHCAPVCC);
 8080e22:	2301      	movs	r3, #1
 8080e24:	223c      	movs	r2, #60	; 0x3c
 8080e26:	2102      	movs	r1, #2
 8080e28:	481a      	ldr	r0, [pc, #104]	; (8080e94 <_Z19post_awake_sequencev+0x94>)
 8080e2a:	f003 f849 	bl	8083ec0 <_ZN15Adafruit_SH11065beginEhhb>
	display.display();
 8080e2e:	4819      	ldr	r0, [pc, #100]	; (8080e94 <_Z19post_awake_sequencev+0x94>)
 8080e30:	f003 f916 	bl	8084060 <_ZN15Adafruit_SH11067displayEv>
    inline pin_t wakeUpPin() const {
        return sleepResult_.pin();
    }

    inline SleepResult sleepResult() const {
        return sleepResult_;
 8080e34:	4b18      	ldr	r3, [pc, #96]	; (8080e98 <_Z19post_awake_sequencev+0x98>)
 8080e36:	6818      	ldr	r0, [r3, #0]
 8080e38:	889b      	ldrh	r3, [r3, #4]
 8080e3a:	9000      	str	r0, [sp, #0]
	// displayTimer.reset();
	SleepResult r = System.sleepResult();
	if (r.wokenUpByPin()) {
 8080e3c:	4668      	mov	r0, sp
 8080e3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8080e42:	f003 feb4 	bl	8084bae <_ZNK11SleepResult12wokenUpByPinEv>
 8080e46:	b968      	cbnz	r0, 8080e64 <_Z19post_awake_sequencev+0x64>
		#ifdef serial_debug
		Log.info("The device was woken up by pin %lu", r.pin());
		#endif
	} else if (r.wokenUpByRtc()) {
 8080e48:	4668      	mov	r0, sp
 8080e4a:	f003 fea9 	bl	8084ba0 <_ZNK11SleepResult12wokenUpByRtcEv>
 8080e4e:	b148      	cbz	r0, 8080e64 <_Z19post_awake_sequencev+0x64>
		batteryStatus(""); // post battery percentage when waking up because of timeout
 8080e50:	4912      	ldr	r1, [pc, #72]	; (8080e9c <_Z19post_awake_sequencev+0x9c>)
 8080e52:	a802      	add	r0, sp, #8
 8080e54:	f004 f96b 	bl	808512e <_ZN6StringC1EPK19__FlashStringHelper>
 8080e58:	a802      	add	r0, sp, #8
 8080e5a:	f7ff fa5b 	bl	8080314 <_Z13batteryStatus6String>
 8080e5e:	a802      	add	r0, sp, #8
 8080e60:	f004 f91e 	bl	80850a0 <_ZN6StringD1Ev>
		#ifdef serial_debug
		Log.info("The device was woken up by RTC");
		#endif
	}
	// if resume in tracking on mode, substract the time when there was no motion
	if (tracking_on_flag && tripTime > (AUTOSLEEP_TIME / 1000) )  {
 8080e64:	4b0e      	ldr	r3, [pc, #56]	; (8080ea0 <_Z19post_awake_sequencev+0xa0>)
 8080e66:	781b      	ldrb	r3, [r3, #0]
 8080e68:	b12b      	cbz	r3, 8080e76 <_Z19post_awake_sequencev+0x76>
 8080e6a:	4a0e      	ldr	r2, [pc, #56]	; (8080ea4 <_Z19post_awake_sequencev+0xa4>)
 8080e6c:	6813      	ldr	r3, [r2, #0]
 8080e6e:	2b96      	cmp	r3, #150	; 0x96
		tripTime -= (int)(AUTOSLEEP_TIME / 1000);
 8080e70:	bf84      	itt	hi
 8080e72:	3b96      	subhi	r3, #150	; 0x96
 8080e74:	6013      	strhi	r3, [r2, #0]
 8080e76:	f003 fa05 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	}
	last_updated_odometer = millis();
 8080e7a:	4b0b      	ldr	r3, [pc, #44]	; (8080ea8 <_Z19post_awake_sequencev+0xa8>)
	// re-allow update of acceleration bias if no motion
	update_start_on = false;
 8080e7c:	2200      	movs	r2, #0
	}
	// if resume in tracking on mode, substract the time when there was no motion
	if (tracking_on_flag && tripTime > (AUTOSLEEP_TIME / 1000) )  {
		tripTime -= (int)(AUTOSLEEP_TIME / 1000);
	}
	last_updated_odometer = millis();
 8080e7e:	6018      	str	r0, [r3, #0]
	// re-allow update of acceleration bias if no motion
	update_start_on = false;
 8080e80:	4b0a      	ldr	r3, [pc, #40]	; (8080eac <_Z19post_awake_sequencev+0xac>)
 8080e82:	701a      	strb	r2, [r3, #0]
}
 8080e84:	b007      	add	sp, #28
 8080e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8080e8a:	bf00      	nop
 8080e8c:	20000c20 	.word	0x20000c20
 8080e90:	20000ae0 	.word	0x20000ae0
 8080e94:	20000c48 	.word	0x20000c48
 8080e98:	20000d20 	.word	0x20000d20
 8080e9c:	0808b10e 	.word	0x0808b10e
 8080ea0:	20000c76 	.word	0x20000c76
 8080ea4:	20000ca0 	.word	0x20000ca0
 8080ea8:	20000904 	.word	0x20000904
 8080eac:	20000c3c 	.word	0x20000c3c

08080eb0 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080eb0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080eb2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080eb4:	b90a      	cbnz	r2, 8080eba <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
 8080eb6:	f005 fb6a 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080eba:	68c3      	ldr	r3, [r0, #12]
    }
 8080ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ec0:	4718      	bx	r3

08080ec2 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 8080ec2:	b510      	push	{r4, lr}
    {
		running = true;
 8080ec4:	2301      	movs	r3, #1
 8080ec6:	7103      	strb	r3, [r0, #4]
        if (callback)
 8080ec8:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 8080eca:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 8080ecc:	b113      	cbz	r3, 8080ed4 <_ZN5Timer7timeoutEv+0x12>
        {
            callback();
 8080ece:	300c      	adds	r0, #12
 8080ed0:	f7ff ffee 	bl	8080eb0 <_ZNKSt8functionIFvvEEclEv>
        }
        running = false;
 8080ed4:	2300      	movs	r3, #0
 8080ed6:	7123      	strb	r3, [r4, #4]
 8080ed8:	bd10      	pop	{r4, pc}

08080eda <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8080eda:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
 8080edc:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 8080ede:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
 8080ee0:	b113      	cbz	r3, 8080ee8 <_ZN6Thread3runEPv+0xe>
            (*(th->func_))(th->func_param_);
 8080ee2:	68c0      	ldr	r0, [r0, #12]
 8080ee4:	4798      	blx	r3
 8080ee6:	e003      	b.n	8080ef0 <_ZN6Thread3runEPv+0x16>
        } else if (th->wrapper) {
 8080ee8:	6840      	ldr	r0, [r0, #4]
 8080eea:	b108      	cbz	r0, 8080ef0 <_ZN6Thread3runEPv+0x16>
            (*(th->wrapper))();
 8080eec:	f7ff ffe0 	bl	8080eb0 <_ZNKSt8functionIFvvEEclEv>
        }
        th->exited_ = true;
 8080ef0:	2301      	movs	r3, #1
 8080ef2:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
 8080ef4:	2000      	movs	r0, #0
    }
 8080ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
 8080efa:	f003 ba4b 	b.w	8084394 <os_thread_exit>

08080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080efe:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080f00:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080f02:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080f04:	b17c      	cbz	r4, 8080f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080f06:	6863      	ldr	r3, [r4, #4]
 8080f08:	3b01      	subs	r3, #1
 8080f0a:	6063      	str	r3, [r4, #4]
 8080f0c:	b95b      	cbnz	r3, 8080f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080f0e:	6823      	ldr	r3, [r4, #0]
 8080f10:	4620      	mov	r0, r4
 8080f12:	689b      	ldr	r3, [r3, #8]
 8080f14:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080f16:	68a3      	ldr	r3, [r4, #8]
 8080f18:	3b01      	subs	r3, #1
 8080f1a:	60a3      	str	r3, [r4, #8]
 8080f1c:	b91b      	cbnz	r3, 8080f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080f1e:	6823      	ldr	r3, [r4, #0]
 8080f20:	4620      	mov	r0, r4
 8080f22:	68db      	ldr	r3, [r3, #12]
 8080f24:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080f26:	4628      	mov	r0, r5
 8080f28:	bd38      	pop	{r3, r4, r5, pc}
	...

08080f2c <_Z19trackingDataPublish6String>:
}

/*
*		GNSS data publish function: called either in tracking on mode or on demand as a cloud function
*/
int trackingDataPublish(String command) {
 8080f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080f30:	b093      	sub	sp, #76	; 0x4c
 8080f32:	4606      	mov	r6, r0
 8080f34:	f003 f9a6 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	int exit_code =  -1;
	int fix_age_ms = millis() - gnss_last_fix_ms;
 8080f38:	4d65      	ldr	r5, [pc, #404]	; (80810d0 <_Z19trackingDataPublish6String+0x1a4>)
	Log.info("gnss on since: %lu ms", millis() - gnss_begin_ms);
	Log.info("latest tttf: %lu ms", ttff);
	Log.info("fix age: %lu ms, validity: %d", millis() - gnss_last_fix_ms, valid_fix_flag);
	#endif

	if (!valid_fix_flag) {
 8080f3a:	4b66      	ldr	r3, [pc, #408]	; (80810d4 <_Z19trackingDataPublish6String+0x1a8>)
/*
*		GNSS data publish function: called either in tracking on mode or on demand as a cloud function
*/
int trackingDataPublish(String command) {
	int exit_code =  -1;
	int fix_age_ms = millis() - gnss_last_fix_ms;
 8080f3c:	682c      	ldr	r4, [r5, #0]
	Log.info("gnss on since: %lu ms", millis() - gnss_begin_ms);
	Log.info("latest tttf: %lu ms", ttff);
	Log.info("fix age: %lu ms, validity: %d", millis() - gnss_last_fix_ms, valid_fix_flag);
	#endif

	if (!valid_fix_flag) {
 8080f3e:	781a      	ldrb	r2, [r3, #0]
/*
*		GNSS data publish function: called either in tracking on mode or on demand as a cloud function
*/
int trackingDataPublish(String command) {
	int exit_code =  -1;
	int fix_age_ms = millis() - gnss_last_fix_ms;
 8080f40:	1b04      	subs	r4, r0, r4
 8080f42:	469b      	mov	fp, r3
	Log.info("gnss on since: %lu ms", millis() - gnss_begin_ms);
	Log.info("latest tttf: %lu ms", ttff);
	Log.info("fix age: %lu ms, validity: %d", millis() - gnss_last_fix_ms, valid_fix_flag);
	#endif

	if (!valid_fix_flag) {
 8080f44:	b9ea      	cbnz	r2, 8080f82 <_Z19trackingDataPublish6String+0x56>
		snprintf(buffer, sizeof(buffer), "%d s", (int)(fix_age_ms / 1000));
 8080f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f4a:	fb94 f3f3 	sdiv	r3, r4, r3
 8080f4e:	4a62      	ldr	r2, [pc, #392]	; (80810d8 <_Z19trackingDataPublish6String+0x1ac>)
 8080f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080f54:	4861      	ldr	r0, [pc, #388]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 8080f56:	f003 fc7b 	bl	8084850 <snprintf>
 8080f5a:	4b61      	ldr	r3, [pc, #388]	; (80810e0 <_Z19trackingDataPublish6String+0x1b4>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080f5c:	4a5f      	ldr	r2, [pc, #380]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 8080f5e:	781b      	ldrb	r3, [r3, #0]
 8080f60:	4960      	ldr	r1, [pc, #384]	; (80810e4 <_Z19trackingDataPublish6String+0x1b8>)
 8080f62:	f88d 3000 	strb.w	r3, [sp]
 8080f66:	a80e      	add	r0, sp, #56	; 0x38
 8080f68:	233c      	movs	r3, #60	; 0x3c
 8080f6a:	f004 fe3f 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f6e:	a80f      	add	r0, sp, #60	; 0x3c
 8080f70:	f7ff ffc5 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		Particle.publish("GNSS/no fix", buffer, 60, PRIVATE);
		// incease publish period since we don't need a "no fix" every 10s
		publish_extra_time = 40000;
 8080f74:	f649 4240 	movw	r2, #40000	; 0x9c40
 8080f78:	4b5b      	ldr	r3, [pc, #364]	; (80810e8 <_Z19trackingDataPublish6String+0x1bc>)
		return exit_code;
 8080f7a:	f04f 30ff 	mov.w	r0, #4294967295

	if (!valid_fix_flag) {
		snprintf(buffer, sizeof(buffer), "%d s", (int)(fix_age_ms / 1000));
		Particle.publish("GNSS/no fix", buffer, 60, PRIVATE);
		// incease publish period since we don't need a "no fix" every 10s
		publish_extra_time = 40000;
 8080f7e:	601a      	str	r2, [r3, #0]
		return exit_code;
 8080f80:	e0a2      	b.n	80810c8 <_Z19trackingDataPublish6String+0x19c>
	}

	if ((valid_fix_flag && fix_age_ms < 10000) || (fixType == 3)) {
 8080f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8080f86:	429c      	cmp	r4, r3
 8080f88:	dd03      	ble.n	8080f92 <_Z19trackingDataPublish6String+0x66>
 8080f8a:	4b58      	ldr	r3, [pc, #352]	; (80810ec <_Z19trackingDataPublish6String+0x1c0>)
 8080f8c:	781b      	ldrb	r3, [r3, #0]
 8080f8e:	2b03      	cmp	r3, #3
 8080f90:	d174      	bne.n	808107c <_Z19trackingDataPublish6String+0x150>
		const char *command_c = command.c_str();
		if (strcmp(command_c, "srv") == 0 ) {
 8080f92:	6830      	ldr	r0, [r6, #0]
 8080f94:	4956      	ldr	r1, [pc, #344]	; (80810f0 <_Z19trackingDataPublish6String+0x1c4>)
 8080f96:	f008 fa91 	bl	80894bc <strcmp>
 8080f9a:	4e51      	ldr	r6, [pc, #324]	; (80810e0 <_Z19trackingDataPublish6String+0x1b4>)
 8080f9c:	4f55      	ldr	r7, [pc, #340]	; (80810f4 <_Z19trackingDataPublish6String+0x1c8>)
 8080f9e:	f8df a180 	ldr.w	sl, [pc, #384]	; 8081120 <_Z19trackingDataPublish6String+0x1f4>
 8080fa2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8081124 <_Z19trackingDataPublish6String+0x1f8>
 8080fa6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8081128 <_Z19trackingDataPublish6String+0x1fc>
 8080faa:	2800      	cmp	r0, #0
 8080fac:	d129      	bne.n	8081002 <_Z19trackingDataPublish6String+0xd6>
			// publish -> nodejs -> influxdb (old way)
			const char *pattern = "{\"session_id\":\"%lu\",\"lat\":%f,\"lon\":%f,\"spd\":%.1f,\"hd\":%.0f,\"alt\":%.0f}";
			snprintf(buffer, sizeof(buffer), pattern, session_id, lat, lon, speed_mph, heading, alt);
 8080fae:	e9da 2300 	ldrd	r2, r3, [sl]
 8080fb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8080fb6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8080fba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8080fbe:	e9d8 2300 	ldrd	r2, r3, [r8]
 8080fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8080fc6:	4b4c      	ldr	r3, [pc, #304]	; (80810f8 <_Z19trackingDataPublish6String+0x1cc>)
 8080fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8080fd4:	4b49      	ldr	r3, [pc, #292]	; (80810fc <_Z19trackingDataPublish6String+0x1d0>)
 8080fd6:	4841      	ldr	r0, [pc, #260]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 8080fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080fdc:	e9cd 2300 	strd	r2, r3, [sp]
 8080fe0:	683b      	ldr	r3, [r7, #0]
 8080fe2:	4a47      	ldr	r2, [pc, #284]	; (8081100 <_Z19trackingDataPublish6String+0x1d4>)
 8080fe4:	f003 fc34 	bl	8084850 <snprintf>
 8080fe8:	7833      	ldrb	r3, [r6, #0]
 8080fea:	a80e      	add	r0, sp, #56	; 0x38
 8080fec:	f88d 3000 	strb.w	r3, [sp]
 8080ff0:	4a3a      	ldr	r2, [pc, #232]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 8080ff2:	233c      	movs	r3, #60	; 0x3c
 8080ff4:	4943      	ldr	r1, [pc, #268]	; (8081104 <_Z19trackingDataPublish6String+0x1d8>)
 8080ff6:	f004 fdf9 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080ffa:	a80f      	add	r0, sp, #60	; 0x3c
 8080ffc:	f7ff ff7f 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081000:	e039      	b.n	8081076 <_Z19trackingDataPublish6String+0x14a>
			Particle.publish("GNSS/srv",buffer, 60, PRIVATE);
		} else {
			// get current local timestamp and shift back to UTC
			time_t utc = Time.now() + 5*3600;
 8081002:	f004 fae6 	bl	80855d2 <_ZN9TimeClass3nowEv>
			// utc += Time.isDST()?4*3600:5*3600;
			const char *timeString = Time.format(utc, "%FT%T").c_str(); //format date/time string as expected by telegraf Particle'splugin
 8081006:	f500 428c 	add.w	r2, r0, #17920	; 0x4600
 808100a:	3250      	adds	r2, #80	; 0x50
 808100c:	493e      	ldr	r1, [pc, #248]	; (8081108 <_Z19trackingDataPublish6String+0x1dc>)
 808100e:	4b3f      	ldr	r3, [pc, #252]	; (808110c <_Z19trackingDataPublish6String+0x1e0>)
 8081010:	a80e      	add	r0, sp, #56	; 0x38
 8081012:	f004 fa8b 	bl	808552c <_ZN9TimeClass6formatElPKc>
 8081016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8081018:	a80e      	add	r0, sp, #56	; 0x38
 808101a:	930d      	str	r3, [sp, #52]	; 0x34
 808101c:	f004 f840 	bl	80850a0 <_ZN6StringD1Ev>
			const char *pattern = "{\"id\":%lu,\"la\":%f,\"lo\":%f,\"sp\":%.1f,\"hd\":%.0f,\"el\":%.0f,\"ts\":\"%s\"}";
			snprintf(buffer, sizeof(buffer), pattern, session_id, lat, lon, speed_mph, heading, alt, timeString);
 8081020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8081022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081026:	930a      	str	r3, [sp, #40]	; 0x28
 8081028:	e9da 2300 	ldrd	r2, r3, [sl]
 808102c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8081030:	e9d9 2300 	ldrd	r2, r3, [r9]
 8081034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8081038:	e9d8 2300 	ldrd	r2, r3, [r8]
 808103c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8081040:	4b2d      	ldr	r3, [pc, #180]	; (80810f8 <_Z19trackingDataPublish6String+0x1cc>)
 8081042:	4826      	ldr	r0, [pc, #152]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 8081044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 808104c:	4b2b      	ldr	r3, [pc, #172]	; (80810fc <_Z19trackingDataPublish6String+0x1d0>)
 808104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081052:	e9cd 2300 	strd	r2, r3, [sp]
 8081056:	683b      	ldr	r3, [r7, #0]
 8081058:	4a2d      	ldr	r2, [pc, #180]	; (8081110 <_Z19trackingDataPublish6String+0x1e4>)
 808105a:	f003 fbf9 	bl	8084850 <snprintf>
 808105e:	7833      	ldrb	r3, [r6, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081060:	2200      	movs	r2, #0
			publishQueue.publish("GNSS/data",buffer, 60, PRIVATE);
 8081062:	f88d 2004 	strb.w	r2, [sp, #4]
 8081066:	f88d 3000 	strb.w	r3, [sp]
 808106a:	4a1c      	ldr	r2, [pc, #112]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 808106c:	233c      	movs	r3, #60	; 0x3c
 808106e:	4929      	ldr	r1, [pc, #164]	; (8081114 <_Z19trackingDataPublish6String+0x1e8>)
 8081070:	4829      	ldr	r0, [pc, #164]	; (8081118 <_Z19trackingDataPublish6String+0x1ec>)
 8081072:	f001 fc17 	bl	80828a4 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>
		}
		publish_extra_time = 0;
 8081076:	4b1c      	ldr	r3, [pc, #112]	; (80810e8 <_Z19trackingDataPublish6String+0x1bc>)
 8081078:	2200      	movs	r2, #0
 808107a:	601a      	str	r2, [r3, #0]
	}

	if (valid_fix_flag && fix_age_ms >= 10000) {
 808107c:	f89b 3000 	ldrb.w	r3, [fp]
 8081080:	b1f3      	cbz	r3, 80810c0 <_Z19trackingDataPublish6String+0x194>
 8081082:	f242 730f 	movw	r3, #9999	; 0x270f
 8081086:	429c      	cmp	r4, r3
 8081088:	dd1a      	ble.n	80810c0 <_Z19trackingDataPublish6String+0x194>
		snprintf(buffer, sizeof(buffer), "%d s",(int)(fix_age_ms / 1000));
 808108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808108e:	fb94 f3f3 	sdiv	r3, r4, r3
 8081092:	4a11      	ldr	r2, [pc, #68]	; (80810d8 <_Z19trackingDataPublish6String+0x1ac>)
 8081094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081098:	4810      	ldr	r0, [pc, #64]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 808109a:	f003 fbd9 	bl	8084850 <snprintf>
 808109e:	4b10      	ldr	r3, [pc, #64]	; (80810e0 <_Z19trackingDataPublish6String+0x1b4>)
 80810a0:	4a0e      	ldr	r2, [pc, #56]	; (80810dc <_Z19trackingDataPublish6String+0x1b0>)
 80810a2:	781b      	ldrb	r3, [r3, #0]
 80810a4:	491d      	ldr	r1, [pc, #116]	; (808111c <_Z19trackingDataPublish6String+0x1f0>)
 80810a6:	f88d 3000 	strb.w	r3, [sp]
 80810aa:	a80e      	add	r0, sp, #56	; 0x38
 80810ac:	233c      	movs	r3, #60	; 0x3c
 80810ae:	f004 fd9d 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80810b2:	a80f      	add	r0, sp, #60	; 0x3c
 80810b4:	f7ff ff23 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		Particle.publish("GNSS/obsolete", buffer, 60, PRIVATE);
		publish_extra_time = 40000;
 80810b8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80810bc:	4b0a      	ldr	r3, [pc, #40]	; (80810e8 <_Z19trackingDataPublish6String+0x1bc>)
 80810be:	601a      	str	r2, [r3, #0]
 80810c0:	f003 f8e0 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	}

	exit_code =  millis() - gnss_last_fix_ms;
 80810c4:	682b      	ldr	r3, [r5, #0]
 80810c6:	1ac0      	subs	r0, r0, r3
	return exit_code;
}
 80810c8:	b013      	add	sp, #76	; 0x4c
 80810ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80810ce:	bf00      	nop
 80810d0:	20000c78 	.word	0x20000c78
 80810d4:	20000c3d 	.word	0x20000c3d
 80810d8:	0808a909 	.word	0x0808a909
 80810dc:	20000908 	.word	0x20000908
 80810e0:	20000a94 	.word	0x20000a94
 80810e4:	0808a90e 	.word	0x0808a90e
 80810e8:	20000c6c 	.word	0x20000c6c
 80810ec:	20000ca5 	.word	0x20000ca5
 80810f0:	0808a966 	.word	0x0808a966
 80810f4:	20000a98 	.word	0x20000a98
 80810f8:	20000c18 	.word	0x20000c18
 80810fc:	20000a60 	.word	0x20000a60
 8081100:	0808a91a 	.word	0x0808a91a
 8081104:	0808a961 	.word	0x0808a961
 8081108:	20000d50 	.word	0x20000d50
 808110c:	0808a96a 	.word	0x0808a96a
 8081110:	0808a970 	.word	0x0808a970
 8081114:	0808a9b3 	.word	0x0808a9b3
 8081118:	20000cc4 	.word	0x20000cc4
 808111c:	0808a9bd 	.word	0x0808a9bd
 8081120:	20000a58 	.word	0x20000a58
 8081124:	20000ad8 	.word	0x20000ad8
 8081128:	20000c40 	.word	0x20000c40

0808112c <_Z9getStatus6String>:
	// if (Particle.connected()) { Particle.publish("GNSS/bat", buffer, 60, PRIVATE); }
	return (int)batterySoc;
}


int getStatus(String command) {
 808112c:	b510      	push	{r4, lr}
	char state_label[16];
	int exit_code;
	if (state == TRACKING_ON_STATE) {
 808112e:	4b16      	ldr	r3, [pc, #88]	; (8081188 <_Z9getStatus6String+0x5c>)
	// if (Particle.connected()) { Particle.publish("GNSS/bat", buffer, 60, PRIVATE); }
	return (int)batterySoc;
}


int getStatus(String command) {
 8081130:	b088      	sub	sp, #32
	char state_label[16];
	int exit_code;
	if (state == TRACKING_ON_STATE) {
 8081132:	781b      	ldrb	r3, [r3, #0]
 8081134:	2b02      	cmp	r3, #2
 8081136:	d10d      	bne.n	8081154 <_Z9getStatus6String+0x28>
		strcpy(state_label, "tracking on");
 8081138:	4914      	ldr	r1, [pc, #80]	; (808118c <_Z9getStatus6String+0x60>)
 808113a:	a804      	add	r0, sp, #16
 808113c:	f008 f9c8 	bl	80894d0 <strcpy>
		exit_code = (int)((PUBLISH_PERIOD + publish_extra_time) / 1000);
 8081140:	4b13      	ldr	r3, [pc, #76]	; (8081190 <_Z9getStatus6String+0x64>)
 8081142:	681c      	ldr	r4, [r3, #0]
 8081144:	4b13      	ldr	r3, [pc, #76]	; (8081194 <_Z9getStatus6String+0x68>)
 8081146:	681b      	ldr	r3, [r3, #0]
 8081148:	4423      	add	r3, r4
 808114a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 808114e:	fbb3 f4f4 	udiv	r4, r3, r4
 8081152:	e006      	b.n	8081162 <_Z9getStatus6String+0x36>
	}
	else if (state == TRACKING_OFF_STATE) {
 8081154:	2b01      	cmp	r3, #1
 8081156:	d113      	bne.n	8081180 <_Z9getStatus6String+0x54>
		strcpy(state_label, "tracking off");
 8081158:	490f      	ldr	r1, [pc, #60]	; (8081198 <_Z9getStatus6String+0x6c>)
 808115a:	a804      	add	r0, sp, #16
 808115c:	f008 f9b8 	bl	80894d0 <strcpy>
		exit_code = 0;
 8081160:	2400      	movs	r4, #0
 8081162:	4b0e      	ldr	r3, [pc, #56]	; (808119c <_Z9getStatus6String+0x70>)
 8081164:	aa04      	add	r2, sp, #16
 8081166:	781b      	ldrb	r3, [r3, #0]
 8081168:	490d      	ldr	r1, [pc, #52]	; (80811a0 <_Z9getStatus6String+0x74>)
 808116a:	f88d 3000 	strb.w	r3, [sp]
 808116e:	a802      	add	r0, sp, #8
 8081170:	233c      	movs	r3, #60	; 0x3c
 8081172:	f004 fd3b 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8081176:	a803      	add	r0, sp, #12
 8081178:	f7ff fec1 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	}
	else {
		return -1;
	}
	Particle.publish("GNSS/status", state_label, 60, PRIVATE);
	return exit_code;
 808117c:	4620      	mov	r0, r4
 808117e:	e001      	b.n	8081184 <_Z9getStatus6String+0x58>
	else if (state == TRACKING_OFF_STATE) {
		strcpy(state_label, "tracking off");
		exit_code = 0;
	}
	else {
		return -1;
 8081180:	f04f 30ff 	mov.w	r0, #4294967295
	}
	Particle.publish("GNSS/status", state_label, 60, PRIVATE);
	return exit_code;
}
 8081184:	b008      	add	sp, #32
 8081186:	bd10      	pop	{r4, pc}
 8081188:	20000a9c 	.word	0x20000a9c
 808118c:	0808a9cb 	.word	0x0808a9cb
 8081190:	2000040c 	.word	0x2000040c
 8081194:	20000c6c 	.word	0x20000c6c
 8081198:	0808a9d7 	.word	0x0808a9d7
 808119c:	20000a94 	.word	0x20000a94
 80811a0:	0808a9e4 	.word	0x0808a9e4

080811a4 <_Z18pre_sleep_sequencev>:
void serialEvent1() {
		gnss.update();
}


void pre_sleep_sequence() {
 80811a4:	b510      	push	{r4, lr}
	//show sleep icon and then disable display module
	// displayTimer.stop();
	display.clearDisplay();
 80811a6:	4826      	ldr	r0, [pc, #152]	; (8081240 <_Z18pre_sleep_sequencev+0x9c>)
void serialEvent1() {
		gnss.update();
}


void pre_sleep_sequence() {
 80811a8:	b08a      	sub	sp, #40	; 0x28
	//show sleep icon and then disable display module
	// displayTimer.stop();
	display.clearDisplay();
 80811aa:	f002 ffe9 	bl	8084180 <_ZN15Adafruit_SH110612clearDisplayEv>
	display.drawBitmap(39, 7, power_sleep_icon, 48, 48, 1);
 80811ae:	2301      	movs	r3, #1
 80811b0:	9302      	str	r3, [sp, #8]
 80811b2:	2330      	movs	r3, #48	; 0x30
 80811b4:	9301      	str	r3, [sp, #4]
 80811b6:	9300      	str	r3, [sp, #0]
 80811b8:	2207      	movs	r2, #7
 80811ba:	4b22      	ldr	r3, [pc, #136]	; (8081244 <_Z18pre_sleep_sequencev+0xa0>)
 80811bc:	2127      	movs	r1, #39	; 0x27
 80811be:	4820      	ldr	r0, [pc, #128]	; (8081240 <_Z18pre_sleep_sequencev+0x9c>)
	display.display();

	// reset session if requested. Clear flag only if successful
	if (reset_session_flag) {
 80811c0:	4c21      	ldr	r4, [pc, #132]	; (8081248 <_Z18pre_sleep_sequencev+0xa4>)

void pre_sleep_sequence() {
	//show sleep icon and then disable display module
	// displayTimer.stop();
	display.clearDisplay();
	display.drawBitmap(39, 7, power_sleep_icon, 48, 48, 1);
 80811c2:	f001 ff79 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.display();
 80811c6:	481e      	ldr	r0, [pc, #120]	; (8081240 <_Z18pre_sleep_sequencev+0x9c>)
 80811c8:	f002 ff4a 	bl	8084060 <_ZN15Adafruit_SH11067displayEv>

	// reset session if requested. Clear flag only if successful
	if (reset_session_flag) {
 80811cc:	7823      	ldrb	r3, [r4, #0]
 80811ce:	b13b      	cbz	r3, 80811e0 <_Z18pre_sleep_sequencev+0x3c>
		reset_publish_session();
 80811d0:	f7ff fb76 	bl	80808c0 <_Z21reset_publish_sessionv>
		reset_session_flag = false; // clear flag if reset successful
 80811d4:	2300      	movs	r3, #0
		// experimental: allow some time to make sure the publish go through
		delay(1000);
 80811d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	display.display();

	// reset session if requested. Clear flag only if successful
	if (reset_session_flag) {
		reset_publish_session();
		reset_session_flag = false; // clear flag if reset successful
 80811da:	7023      	strb	r3, [r4, #0]
		// experimental: allow some time to make sure the publish go through
		delay(1000);
 80811dc:	f004 fa2e 	bl	808563c <delay>
	}

	//digitalWrite(OLED_DC, LOW); // keeping OLED_DC high is a nice hack to maintain GNSS in standby mode
	// software shutdown gnss module then power off display and gnss modules
	gnss.stop();
 80811e0:	481a      	ldr	r0, [pc, #104]	; (808124c <_Z18pre_sleep_sequencev+0xa8>)
 80811e2:	f001 f9e3 	bl	80825ac <_ZN10UBX_NEOM8N4stopEv>
	// clear display
	display.clearDisplay();
 80811e6:	4816      	ldr	r0, [pc, #88]	; (8081240 <_Z18pre_sleep_sequencev+0x9c>)
 80811e8:	f002 ffca 	bl	8084180 <_ZN15Adafruit_SH110612clearDisplayEv>
	display.display();
 80811ec:	4814      	ldr	r0, [pc, #80]	; (8081240 <_Z18pre_sleep_sequencev+0x9c>)
 80811ee:	f002 ff37 	bl	8084060 <_ZN15Adafruit_SH11067displayEv>
	digitalWrite(OLED_CS, HIGH);
 80811f2:	2101      	movs	r1, #1
 80811f4:	201a      	movs	r0, #26
 80811f6:	f005 f8be 	bl	8086376 <digitalWrite>
	digitalWrite(V33_SW, LOW);
 80811fa:	2100      	movs	r1, #0
 80811fc:	201d      	movs	r0, #29
 80811fe:	f005 f8ba 	bl	8086376 <digitalWrite>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081202:	f003 facd 	bl	80847a0 <spark_cloud_flag_connected>
	#ifdef serial_debug
	Log.info("Going into network standby sleep mode");
	#endif
	if (Particle.connected()) {
 8081206:	b1b8      	cbz	r0, 8081238 <_Z18pre_sleep_sequencev+0x94>
		Particle.publish("GNSS/sleep", Time.format(Time.now(), "%FT%T"), 60, PRIVATE); //Time.timeStr()
 8081208:	f004 f9e3 	bl	80855d2 <_ZN9TimeClass3nowEv>
 808120c:	4b10      	ldr	r3, [pc, #64]	; (8081250 <_Z18pre_sleep_sequencev+0xac>)
 808120e:	4602      	mov	r2, r0
 8081210:	4910      	ldr	r1, [pc, #64]	; (8081254 <_Z18pre_sleep_sequencev+0xb0>)
 8081212:	a806      	add	r0, sp, #24
 8081214:	f004 f98a 	bl	808552c <_ZN9TimeClass6formatElPKc>
 8081218:	4b0f      	ldr	r3, [pc, #60]	; (8081258 <_Z18pre_sleep_sequencev+0xb4>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808121a:	9a06      	ldr	r2, [sp, #24]
 808121c:	781b      	ldrb	r3, [r3, #0]
 808121e:	490f      	ldr	r1, [pc, #60]	; (808125c <_Z18pre_sleep_sequencev+0xb8>)
 8081220:	f88d 3000 	strb.w	r3, [sp]
 8081224:	a804      	add	r0, sp, #16
 8081226:	233c      	movs	r3, #60	; 0x3c
 8081228:	f004 fce0 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808122c:	a805      	add	r0, sp, #20
 808122e:	f7ff fe66 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081232:	a806      	add	r0, sp, #24
 8081234:	f003 ff34 	bl	80850a0 <_ZN6StringD1Ev>
	}
	// enable wake up on motion interrupt of the imu module
	enable_WakeOnMotionInterrupt();
 8081238:	f7ff fd94 	bl	8080d64 <_Z28enable_WakeOnMotionInterruptv>
}
 808123c:	b00a      	add	sp, #40	; 0x28
 808123e:	bd10      	pop	{r4, pc}
 8081240:	20000c48 	.word	0x20000c48
 8081244:	0808ae18 	.word	0x0808ae18
 8081248:	20000ca4 	.word	0x20000ca4
 808124c:	20000ae0 	.word	0x20000ae0
 8081250:	0808a96a 	.word	0x0808a96a
 8081254:	20000d50 	.word	0x20000d50
 8081258:	20000a94 	.word	0x20000a94
 808125c:	0808a9f0 	.word	0x0808a9f0

08081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081260:	4602      	mov	r2, r0
 8081262:	4801      	ldr	r0, [pc, #4]	; (8081268 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081264:	f004 bbb9 	b.w	80859da <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081268:	080859af 	.word	0x080859af

0808126c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 808126c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808126e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
 8081270:	4610      	mov	r0, r2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 8081272:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
 8081274:	f007 f90a 	bl	808848c <__aeabi_f2d>
 8081278:	462a      	mov	r2, r5
 808127a:	e9cd 0100 	strd	r0, r1, [sp]
 808127e:	2100      	movs	r1, #0
 8081280:	4620      	mov	r0, r4
 8081282:	f003 ffeb 	bl	808525c <_ZN5Print11printf_implEbPKcz>
    }
 8081286:	b003      	add	sp, #12
 8081288:	bd30      	pop	{r4, r5, pc}
	...

0808128c <setup>:
STARTUP(System.enableFeature(FEATURE_RETAINED_MEMORY));
SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);


void setup() {
 808128c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	#ifdef cellular
	battery.wakeup();
 808128e:	4872      	ldr	r0, [pc, #456]	; (8081458 <setup+0x1cc>)
 8081290:	f004 fa99 	bl	80857c6 <_ZN9FuelGauge6wakeupEv>
	battery.quickStart();
 8081294:	4870      	ldr	r0, [pc, #448]	; (8081458 <setup+0x1cc>)
 8081296:	f004 fa91 	bl	80857bc <_ZN9FuelGauge10quickStartEv>
	pmic.setChargeVoltage(4208);  // set charging voltage up to 4.208V --> will charge to 100% (if batt. doesn't overheat)
 808129a:	f241 0170 	movw	r1, #4208	; 0x1070
 808129e:	486f      	ldr	r0, [pc, #444]	; (808145c <setup+0x1d0>)
 80812a0:	f003 fb70 	bl	8084984 <_ZN4PMIC16setChargeVoltageEt>
    static bool on(system_event_t events, void(*handler)(system_event_t, int,void*)) {
        return !system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), nullptr);
    }

    static bool on(system_event_t events, void(*handler)(system_event_t, int)) {
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
 80812a4:	2300      	movs	r3, #0
 80812a6:	4a6e      	ldr	r2, [pc, #440]	; (8081460 <setup+0x1d4>)
 80812a8:	2100      	movs	r1, #0
 80812aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80812ae:	f003 f9f1 	bl	8084694 <system_subscribe_event>
	#ifdef serial_debug
	System.on(cloud_status, cloud_statusHandler);
	#endif

	// display setting up
	display.begin(SH1106_SWITCHCAPVCC);
 80812b2:	2301      	movs	r3, #1
 80812b4:	223c      	movs	r2, #60	; 0x3c
 80812b6:	2102      	movs	r1, #2
 80812b8:	486a      	ldr	r0, [pc, #424]	; (8081464 <setup+0x1d8>)
 80812ba:	f002 fe01 	bl	8083ec0 <_ZN15Adafruit_SH11065beginEhhb>
	display.clearDisplay();
 80812be:	4869      	ldr	r0, [pc, #420]	; (8081464 <setup+0x1d8>)
 80812c0:	f002 ff5e 	bl	8084180 <_ZN15Adafruit_SH110612clearDisplayEv>
	// display splash screen
	display.drawBitmap(0, 4, particleLogo, 128, 48, 1);
 80812c4:	2401      	movs	r4, #1
 80812c6:	2630      	movs	r6, #48	; 0x30
 80812c8:	2380      	movs	r3, #128	; 0x80
 80812ca:	e88d 0048 	stmia.w	sp, {r3, r6}
 80812ce:	2204      	movs	r2, #4
 80812d0:	4b65      	ldr	r3, [pc, #404]	; (8081468 <setup+0x1dc>)
 80812d2:	9402      	str	r4, [sp, #8]
 80812d4:	2100      	movs	r1, #0
 80812d6:	4863      	ldr	r0, [pc, #396]	; (8081464 <setup+0x1d8>)
 80812d8:	f001 feee 	bl	80830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.setTextSize(1);
 80812dc:	4621      	mov	r1, r4
 80812de:	4861      	ldr	r0, [pc, #388]	; (8081464 <setup+0x1d8>)
 80812e0:	f001 fffc 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
 80812e4:	4621      	mov	r1, r4
 80812e6:	485f      	ldr	r0, [pc, #380]	; (8081464 <setup+0x1d8>)
 80812e8:	f001 fffd 	bl	80832e6 <_ZN12Adafruit_GFX12setTextColorEt>
	display.setCursor(15,54);
 80812ec:	2236      	movs	r2, #54	; 0x36
 80812ee:	210f      	movs	r1, #15
 80812f0:	485c      	ldr	r0, [pc, #368]	; (8081464 <setup+0x1d8>)
 80812f2:	f001 fff0 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.print("Real-Time Tracker");
 80812f6:	495d      	ldr	r1, [pc, #372]	; (808146c <setup+0x1e0>)
 80812f8:	485a      	ldr	r0, [pc, #360]	; (8081464 <setup+0x1d8>)
 80812fa:	f003 ff70 	bl	80851de <_ZN5Print5printEPKc>
	display.display();
 80812fe:	4859      	ldr	r0, [pc, #356]	; (8081464 <setup+0x1d8>)
 8081300:	f002 feae 	bl	8084060 <_ZN15Adafruit_SH11067displayEv>
 8081304:	f002 ffbe 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>

	// start up the gnss module
	gnss_begin_ms = millis();
 8081308:	4b59      	ldr	r3, [pc, #356]	; (8081470 <setup+0x1e4>)
	gnss_last_fix_ms = millis();
	resetGNSSInfo();
	gnss_on = gnss.start(&Serial1, 9600, V33_SW);
 808130a:	4d5a      	ldr	r5, [pc, #360]	; (8081474 <setup+0x1e8>)
	display.setCursor(15,54);
	display.print("Real-Time Tracker");
	display.display();

	// start up the gnss module
	gnss_begin_ms = millis();
 808130c:	6018      	str	r0, [r3, #0]
 808130e:	f002 ffb9 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	gnss_last_fix_ms = millis();
 8081312:	4b59      	ldr	r3, [pc, #356]	; (8081478 <setup+0x1ec>)
 8081314:	6018      	str	r0, [r3, #0]
	resetGNSSInfo();
 8081316:	f7ff fa9f 	bl	8080858 <_Z13resetGNSSInfov>
	gnss_on = gnss.start(&Serial1, 9600, V33_SW);
 808131a:	f004 ff45 	bl	80861a8 <_Z22__fetch_global_Serial1v>
 808131e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8081322:	4601      	mov	r1, r0
 8081324:	231d      	movs	r3, #29
 8081326:	4855      	ldr	r0, [pc, #340]	; (808147c <setup+0x1f0>)
 8081328:	f001 f85c 	bl	80823e4 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh>
 808132c:	7028      	strb	r0, [r5, #0]

	// configure and start up the IMU module
	imu_on = init_imu();
 808132e:	f7ff fcf7 	bl	8080d20 <_Z8init_imuv>
 8081332:	4b53      	ldr	r3, [pc, #332]	; (8081480 <setup+0x1f4>)

	// register cloud functions before calling Particle.connect()
	Particle.function("Set_Tracking", startTracking);
 8081334:	4953      	ldr	r1, [pc, #332]	; (8081484 <setup+0x1f8>)
	gnss_last_fix_ms = millis();
	resetGNSSInfo();
	gnss_on = gnss.start(&Serial1, 9600, V33_SW);

	// configure and start up the IMU module
	imu_on = init_imu();
 8081336:	7018      	strb	r0, [r3, #0]

	// register cloud functions before calling Particle.connect()
	Particle.function("Set_Tracking", startTracking);
 8081338:	4853      	ldr	r0, [pc, #332]	; (8081488 <setup+0x1fc>)
 808133a:	f7ff ff91 	bl	8081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("Get_Battery", batteryStatus);
 808133e:	4953      	ldr	r1, [pc, #332]	; (808148c <setup+0x200>)
 8081340:	4853      	ldr	r0, [pc, #332]	; (8081490 <setup+0x204>)
 8081342:	f7ff ff8d 	bl	8081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("Get_Status", getStatus);
 8081346:	4953      	ldr	r1, [pc, #332]	; (8081494 <setup+0x208>)
 8081348:	4853      	ldr	r0, [pc, #332]	; (8081498 <setup+0x20c>)
 808134a:	f7ff ff89 	bl	8081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("Get_Location", trackingDataPublish);
 808134e:	4953      	ldr	r1, [pc, #332]	; (808149c <setup+0x210>)
 8081350:	4853      	ldr	r0, [pc, #332]	; (80814a0 <setup+0x214>)
 8081352:	f7ff ff85 	bl	8081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("Sleep_WakeUp_OnMove", enter_standby);
 8081356:	4953      	ldr	r1, [pc, #332]	; (80814a4 <setup+0x218>)
 8081358:	4853      	ldr	r0, [pc, #332]	; (80814a8 <setup+0x21c>)
 808135a:	f7ff ff81 	bl	8081260 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>

	// blue LED on D7 is used to indicate tracking is on
	pinMode(D7, OUTPUT);
 808135e:	4621      	mov	r1, r4
 8081360:	2007      	movs	r0, #7
 8081362:	f004 fff7 	bl	8086354 <pinMode>
	digitalWrite(D7, LOW);
 8081366:	2100      	movs	r1, #0
 8081368:	2007      	movs	r0, #7
 808136a:	f005 f804 	bl	8086376 <digitalWrite>

	// adjust local time
	Time.zone(-5);
 808136e:	484f      	ldr	r0, [pc, #316]	; (80814ac <setup+0x220>)
 8081370:	f004 f826 	bl	80853c0 <_ZN9TimeClass4zoneEf>
	Time.setDSTOffset(1.0);
 8081374:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8081378:	f004 f83e 	bl	80853f8 <_ZN9TimeClass12setDSTOffsetEf>
	// Time.beginDST(); // uncomment when it's daylight saving time

	// initial screen
	display.clearDisplay();
 808137c:	4839      	ldr	r0, [pc, #228]	; (8081464 <setup+0x1d8>)
 808137e:	f002 feff 	bl	8084180 <_ZN15Adafruit_SH110612clearDisplayEv>
	display.setTextSize(1);
 8081382:	4621      	mov	r1, r4
 8081384:	4837      	ldr	r0, [pc, #220]	; (8081464 <setup+0x1d8>)
 8081386:	f001 ffa9 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>
	// top status bar
	display.setCursor(48,0);
 808138a:	4631      	mov	r1, r6
 808138c:	2200      	movs	r2, #0
 808138e:	4835      	ldr	r0, [pc, #212]	; (8081464 <setup+0x1d8>)
 8081390:	f001 ffa1 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.printf("%02d:%02d", Time.hour(), Time.minute());
 8081394:	f004 f924 	bl	80855e0 <_ZN9TimeClass4hourEv>
 8081398:	4606      	mov	r6, r0
 808139a:	f004 f93b 	bl	8085614 <_ZN9TimeClass6minuteEv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808139e:	4633      	mov	r3, r6
 80813a0:	9000      	str	r0, [sp, #0]
 80813a2:	4a43      	ldr	r2, [pc, #268]	; (80814b0 <setup+0x224>)
 80813a4:	2100      	movs	r1, #0
 80813a6:	482f      	ldr	r0, [pc, #188]	; (8081464 <setup+0x1d8>)
 80813a8:	f003 ff58 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	#ifdef cellular
	display.setCursor(104, 0);
 80813ac:	2200      	movs	r2, #0
 80813ae:	2168      	movs	r1, #104	; 0x68
 80813b0:	482c      	ldr	r0, [pc, #176]	; (8081464 <setup+0x1d8>)
 80813b2:	f001 ff90 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.printf("%.0f%%", battery.getSoC());
 80813b6:	4828      	ldr	r0, [pc, #160]	; (8081458 <setup+0x1cc>)
 80813b8:	f004 f9b4 	bl	8085724 <_ZN9FuelGauge6getSoCEv>
 80813bc:	493d      	ldr	r1, [pc, #244]	; (80814b4 <setup+0x228>)
 80813be:	4602      	mov	r2, r0
 80813c0:	4828      	ldr	r0, [pc, #160]	; (8081464 <setup+0x1d8>)
 80813c2:	f7ff ff53 	bl	808126c <_ZN5Print6printfIIfEEEjPKcDpT_>
	#endif
	display.drawFastHLine(0, 9, display.width(), WHITE);
 80813c6:	4827      	ldr	r0, [pc, #156]	; (8081464 <setup+0x1d8>)
 80813c8:	f001 ff92 	bl	80832f0 <_ZN12Adafruit_GFX5widthEv>
 80813cc:	9400      	str	r4, [sp, #0]
 80813ce:	4603      	mov	r3, r0
 80813d0:	2209      	movs	r2, #9
 80813d2:	2100      	movs	r1, #0
 80813d4:	4823      	ldr	r0, [pc, #140]	; (8081464 <setup+0x1d8>)
 80813d6:	f002 fa9b 	bl	8083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>
	// startup info
	display.setCursor(6, 10);
 80813da:	220a      	movs	r2, #10
 80813dc:	2106      	movs	r1, #6
 80813de:	4821      	ldr	r0, [pc, #132]	; (8081464 <setup+0x1d8>)
 80813e0:	f001 ff79 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.printf("gnss init. %s..",gnss_on?"ok":"failed");
 80813e4:	7829      	ldrb	r1, [r5, #0]
 80813e6:	4a34      	ldr	r2, [pc, #208]	; (80814b8 <setup+0x22c>)
 80813e8:	4b34      	ldr	r3, [pc, #208]	; (80814bc <setup+0x230>)
 80813ea:	481e      	ldr	r0, [pc, #120]	; (8081464 <setup+0x1d8>)
 80813ec:	2900      	cmp	r1, #0
 80813ee:	bf08      	it	eq
 80813f0:	4613      	moveq	r3, r2
 80813f2:	4a33      	ldr	r2, [pc, #204]	; (80814c0 <setup+0x234>)
 80813f4:	2100      	movs	r1, #0
 80813f6:	f003 ff31 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	// bottom status battery
	display.drawFastHLine(0, 55, display.width(), WHITE);
 80813fa:	481a      	ldr	r0, [pc, #104]	; (8081464 <setup+0x1d8>)
 80813fc:	f001 ff78 	bl	80832f0 <_ZN12Adafruit_GFX5widthEv>
 8081400:	9400      	str	r4, [sp, #0]
 8081402:	4603      	mov	r3, r0
 8081404:	2237      	movs	r2, #55	; 0x37
 8081406:	2100      	movs	r1, #0
 8081408:	4816      	ldr	r0, [pc, #88]	; (8081464 <setup+0x1d8>)
 808140a:	f002 fa81 	bl	8083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>
	display.setCursor(0, 57);
 808140e:	2239      	movs	r2, #57	; 0x39
 8081410:	2100      	movs	r1, #0
 8081412:	4814      	ldr	r0, [pc, #80]	; (8081464 <setup+0x1d8>)
 8081414:	f001 ff5f 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.print("trip time / distance");
 8081418:	492a      	ldr	r1, [pc, #168]	; (80814c4 <setup+0x238>)
 808141a:	4812      	ldr	r0, [pc, #72]	; (8081464 <setup+0x1d8>)
 808141c:	f003 fedf 	bl	80851de <_ZN5Print5printEPKc>
	display.display();
 8081420:	4810      	ldr	r0, [pc, #64]	; (8081464 <setup+0x1d8>)
 8081422:	f002 fe1d 	bl	8084060 <_ZN15Adafruit_SH11067displayEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8081426:	f003 f9b3 	bl	8084790 <spark_cloud_flag_connect>
	Serial.begin();
	delay(2000);
	#endif

	// initial state after reset
	state = TRACKING_OFF_STATE;
 808142a:	4b27      	ldr	r3, [pc, #156]	; (80814c8 <setup+0x23c>)
	watchdogTimer.start();
 808142c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8081430:	4826      	ldr	r0, [pc, #152]	; (80814cc <setup+0x240>)
	Serial.begin();
	delay(2000);
	#endif

	// initial state after reset
	state = TRACKING_OFF_STATE;
 8081432:	701c      	strb	r4, [r3, #0]
	watchdogTimer.start();
 8081434:	f7ff f9cc 	bl	80807d0 <_ZN5Timer5startEj>
	autoSleepTimer.start();
 8081438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808143c:	4824      	ldr	r0, [pc, #144]	; (80814d0 <setup+0x244>)
 808143e:	f7ff f9c7 	bl	80807d0 <_ZN5Timer5startEj>
	imuTimer.start();
 8081442:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8081446:	4823      	ldr	r0, [pc, #140]	; (80814d4 <setup+0x248>)
 8081448:	f7ff f9c2 	bl	80807d0 <_ZN5Timer5startEj>
 808144c:	f002 ff1a 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	// displayTimer.start();
	last_refresh_display = millis();
 8081450:	4b21      	ldr	r3, [pc, #132]	; (80814d8 <setup+0x24c>)
 8081452:	6018      	str	r0, [r3, #0]
}
 8081454:	b004      	add	sp, #16
 8081456:	bd70      	pop	{r4, r5, r6, pc}
 8081458:	20000d14 	.word	0x20000d14
 808145c:	20000a78 	.word	0x20000a78
 8081460:	08080601 	.word	0x08080601
 8081464:	20000c48 	.word	0x20000c48
 8081468:	0808aaec 	.word	0x0808aaec
 808146c:	0808a9fe 	.word	0x0808a9fe
 8081470:	20000aa0 	.word	0x20000aa0
 8081474:	20000ca6 	.word	0x20000ca6
 8081478:	20000c78 	.word	0x20000c78
 808147c:	20000ae0 	.word	0x20000ae0
 8081480:	20000ca7 	.word	0x20000ca7
 8081484:	08080379 	.word	0x08080379
 8081488:	0808aa10 	.word	0x0808aa10
 808148c:	08080315 	.word	0x08080315
 8081490:	0808aa1d 	.word	0x0808aa1d
 8081494:	0808112d 	.word	0x0808112d
 8081498:	0808aa29 	.word	0x0808aa29
 808149c:	08080f2d 	.word	0x08080f2d
 80814a0:	0808aa34 	.word	0x0808aa34
 80814a4:	080803c1 	.word	0x080803c1
 80814a8:	0808aa41 	.word	0x0808aa41
 80814ac:	c0a00000 	.word	0xc0a00000
 80814b0:	0808a8f2 	.word	0x0808a8f2
 80814b4:	0808a8eb 	.word	0x0808a8eb
 80814b8:	0808aa9d 	.word	0x0808aa9d
 80814bc:	0808a9fb 	.word	0x0808a9fb
 80814c0:	0808aa55 	.word	0x0808aa55
 80814c4:	0808aa65 	.word	0x0808aa65
 80814c8:	20000a9c 	.word	0x20000a9c
 80814cc:	20000c80 	.word	0x20000c80
 80814d0:	200008e8 	.word	0x200008e8
 80814d4:	20000a38 	.word	0x20000a38
 80814d8:	20000a7c 	.word	0x20000a7c
 80814dc:	00000000 	.word	0x00000000

080814e0 <_Z14display_updatev>:
	display.setCursor(79, 57);
	display.printf("%.2fmi", tripDistance_m/1609.3);
}


void display_update() {
 80814e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	display.clearDisplay();
 80814e2:	487b      	ldr	r0, [pc, #492]	; (80816d0 <_Z14display_updatev+0x1f0>)
	status_bar_top_update();

	// time since gnss on and once a fix, delta lat/lon
	display.setCursor(0, 11);
	if (!valid_fix_flag) {
 80814e4:	4c7b      	ldr	r4, [pc, #492]	; (80816d4 <_Z14display_updatev+0x1f4>)
	display.printf("%.2fmi", tripDistance_m/1609.3);
}


void display_update() {
	display.clearDisplay();
 80814e6:	f002 fe4b 	bl	8084180 <_ZN15Adafruit_SH110612clearDisplayEv>
	status_bar_top_update();
 80814ea:	f7ff fa47 	bl	808097c <_Z21status_bar_top_updatev>

	// time since gnss on and once a fix, delta lat/lon
	display.setCursor(0, 11);
 80814ee:	220b      	movs	r2, #11
 80814f0:	2100      	movs	r1, #0
 80814f2:	4877      	ldr	r0, [pc, #476]	; (80816d0 <_Z14display_updatev+0x1f0>)
 80814f4:	f001 feef 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	if (!valid_fix_flag) {
 80814f8:	7825      	ldrb	r5, [r4, #0]
 80814fa:	b9e5      	cbnz	r5, 8081536 <_Z14display_updatev+0x56>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80814fc:	f003 f950 	bl	80847a0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8081500:	b170      	cbz	r0, 8081520 <_Z14display_updatev+0x40>
 8081502:	f002 febf 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
			display.printf("%lus", (int)(millis() - gnss_last_fix_ms) / 1000);
 8081506:	4b74      	ldr	r3, [pc, #464]	; (80816d8 <_Z14display_updatev+0x1f8>)
 8081508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808150c:	681b      	ldr	r3, [r3, #0]
 808150e:	4629      	mov	r1, r5
 8081510:	1ac3      	subs	r3, r0, r3
 8081512:	fb93 f3f2 	sdiv	r3, r3, r2
 8081516:	486e      	ldr	r0, [pc, #440]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081518:	4a70      	ldr	r2, [pc, #448]	; (80816dc <_Z14display_updatev+0x1fc>)
 808151a:	f003 fe9f 	bl	808525c <_ZN5Print11printf_implEbPKcz>
 808151e:	e00a      	b.n	8081536 <_Z14display_updatev+0x56>
		} else {
			if (imu_on) display.printf("T= %.0f F", imu.readTempF());
 8081520:	4b6f      	ldr	r3, [pc, #444]	; (80816e0 <_Z14display_updatev+0x200>)
 8081522:	781b      	ldrb	r3, [r3, #0]
 8081524:	b13b      	cbz	r3, 8081536 <_Z14display_updatev+0x56>
 8081526:	486f      	ldr	r0, [pc, #444]	; (80816e4 <_Z14display_updatev+0x204>)
 8081528:	f002 f9d2 	bl	80838d0 <_ZN7LSM6DS39readTempFEv>
 808152c:	496e      	ldr	r1, [pc, #440]	; (80816e8 <_Z14display_updatev+0x208>)
 808152e:	4602      	mov	r2, r0
 8081530:	4867      	ldr	r0, [pc, #412]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081532:	f7ff fe9b 	bl	808126c <_ZN5Print6printfIIfEEEjPKcDpT_>
 8081536:	f003 f933 	bl	80847a0 <spark_cloud_flag_connected>
		}
	}

	// if lost cloud connection during tracking, display publish queue length
	if (!Particle.connected() && tracking_on_flag) {
 808153a:	4605      	mov	r5, r0
 808153c:	b920      	cbnz	r0, 8081548 <_Z14display_updatev+0x68>
 808153e:	4b6b      	ldr	r3, [pc, #428]	; (80816ec <_Z14display_updatev+0x20c>)
 8081540:	781b      	ldrb	r3, [r3, #0]
 8081542:	2b00      	cmp	r3, #0
 8081544:	f040 80b2 	bne.w	80816ac <_Z14display_updatev+0x1cc>
	display.setCursor(47, 11);
	display.printf("%s", fixType_s);
	*/

	// display acceleration on a g-ball chart
	if (imu_on) {
 8081548:	4b65      	ldr	r3, [pc, #404]	; (80816e0 <_Z14display_updatev+0x200>)
 808154a:	781d      	ldrb	r5, [r3, #0]
 808154c:	2d00      	cmp	r5, #0
 808154e:	d055      	beq.n	80815fc <_Z14display_updatev+0x11c>
		display.drawCircle(100, 32, 20, 1); // target circle
 8081550:	2501      	movs	r5, #1
 8081552:	9500      	str	r5, [sp, #0]
 8081554:	2314      	movs	r3, #20
 8081556:	2220      	movs	r2, #32
 8081558:	2164      	movs	r1, #100	; 0x64
 808155a:	485d      	ldr	r0, [pc, #372]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808155c:	f001 fc12 	bl	8082d84 <_ZN12Adafruit_GFX10drawCircleEssst>
		int16_t gball_center_y = 32;

		// longitudinal accel along Z-axis
		// longitudinal acceleration displacement scaled for: 20 pixels/0.5G (auto-compensated for tilt )
		//if (accel[2] > 0.04 || accel[2] < -0.04) {
		gball_center_y = gball_center_y - int(accel[2]*40.0); //throttling --> accel < 0 --> y down --> ball up
 8081560:	4e63      	ldr	r6, [pc, #396]	; (80816f0 <_Z14display_updatev+0x210>)
	*/

	// display acceleration on a g-ball chart
	if (imu_on) {
		display.drawCircle(100, 32, 20, 1); // target circle
		display.drawFastHLine(100-20-3, 32, 2*20+2*3, 1); // target H line
 8081562:	9500      	str	r5, [sp, #0]
 8081564:	232e      	movs	r3, #46	; 0x2e
 8081566:	2220      	movs	r2, #32
 8081568:	214d      	movs	r1, #77	; 0x4d
 808156a:	4859      	ldr	r0, [pc, #356]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808156c:	f002 f9d0 	bl	8083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>
		display.drawFastVLine(100, 32-20-2, 2*20+2*2, 1); // target V line
 8081570:	232c      	movs	r3, #44	; 0x2c
 8081572:	220a      	movs	r2, #10
 8081574:	9500      	str	r5, [sp, #0]
 8081576:	2164      	movs	r1, #100	; 0x64
 8081578:	4855      	ldr	r0, [pc, #340]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808157a:	f002 facd 	bl	8083b18 <_ZN15Adafruit_SH110613drawFastVLineEssst>
		int16_t gball_center_y = 32;

		// longitudinal accel along Z-axis
		// longitudinal acceleration displacement scaled for: 20 pixels/0.5G (auto-compensated for tilt )
		//if (accel[2] > 0.04 || accel[2] < -0.04) {
		gball_center_y = gball_center_y - int(accel[2]*40.0); //throttling --> accel < 0 --> y down --> ball up
 808157e:	68b0      	ldr	r0, [r6, #8]
 8081580:	f006 ff84 	bl	808848c <__aeabi_f2d>
 8081584:	2200      	movs	r2, #0
 8081586:	4b5b      	ldr	r3, [pc, #364]	; (80816f4 <_Z14display_updatev+0x214>)
 8081588:	f006 ffd4 	bl	8088534 <__aeabi_dmul>
 808158c:	f007 fa82 	bl	8088a94 <__aeabi_d2iz>
 8081590:	f1c0 0020 	rsb	r0, r0, #32
 8081594:	b205      	sxth	r5, r0
		//}
		// lateral acceleration displacement scaled for: 20 pixels/0.5G along X-axis (not affected by tilt in this use case)
		if (accel[0] > 0.04 || accel[0] < -0.04 ) {
 8081596:	6830      	ldr	r0, [r6, #0]
 8081598:	f006 ff78 	bl	808848c <__aeabi_f2d>
 808159c:	a348      	add	r3, pc, #288	; (adr r3, 80816c0 <_Z14display_updatev+0x1e0>)
 808159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815a2:	4606      	mov	r6, r0
 80815a4:	460f      	mov	r7, r1
 80815a6:	f007 fa55 	bl	8088a54 <__aeabi_dcmpgt>
 80815aa:	b938      	cbnz	r0, 80815bc <_Z14display_updatev+0xdc>
 80815ac:	a346      	add	r3, pc, #280	; (adr r3, 80816c8 <_Z14display_updatev+0x1e8>)
 80815ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815b2:	4630      	mov	r0, r6
 80815b4:	4639      	mov	r1, r7
 80815b6:	f007 fa2f 	bl	8088a18 <__aeabi_dcmplt>
 80815ba:	b158      	cbz	r0, 80815d4 <_Z14display_updatev+0xf4>
			gball_center_x = gball_center_x - int(accel[0]*40.0); //turn left --> accel > 0 --> x down --> ball left
 80815bc:	2200      	movs	r2, #0
 80815be:	4b4d      	ldr	r3, [pc, #308]	; (80816f4 <_Z14display_updatev+0x214>)
 80815c0:	4630      	mov	r0, r6
 80815c2:	4639      	mov	r1, r7
 80815c4:	f006 ffb6 	bl	8088534 <__aeabi_dmul>
 80815c8:	f007 fa64 	bl	8088a94 <__aeabi_d2iz>
 80815cc:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
 80815d0:	b201      	sxth	r1, r0
 80815d2:	e000      	b.n	80815d6 <_Z14display_updatev+0xf6>
	if (imu_on) {
		display.drawCircle(100, 32, 20, 1); // target circle
		display.drawFastHLine(100-20-3, 32, 2*20+2*3, 1); // target H line
		display.drawFastVLine(100, 32-20-2, 2*20+2*2, 1); // target V line
		// reset gball location to center
		int16_t gball_center_x = 100;
 80815d4:	2164      	movs	r1, #100	; 0x64
		if (accel[0] > 0.04 || accel[0] < -0.04 ) {
			gball_center_x = gball_center_x - int(accel[0]*40.0); //turn left --> accel > 0 --> x down --> ball left
		}

		// draw the gball
		display.fillCircle(gball_center_x, gball_center_y, 3, 1);
 80815d6:	2301      	movs	r3, #1
 80815d8:	9300      	str	r3, [sp, #0]
 80815da:	462a      	mov	r2, r5
 80815dc:	2303      	movs	r3, #3
 80815de:	483c      	ldr	r0, [pc, #240]	; (80816d0 <_Z14display_updatev+0x1f0>)
 80815e0:	f001 fd46 	bl	8083070 <_ZN12Adafruit_GFX10fillCircleEssst>

		// test: display acc_z offset 
		display.setCursor(0, 43);
 80815e4:	222b      	movs	r2, #43	; 0x2b
 80815e6:	2100      	movs	r1, #0
 80815e8:	4839      	ldr	r0, [pc, #228]	; (80816d0 <_Z14display_updatev+0x1f0>)
 80815ea:	f001 fe74 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
		display.printf("z:%.2f", a0_z);
 80815ee:	4b42      	ldr	r3, [pc, #264]	; (80816f8 <_Z14display_updatev+0x218>)
 80815f0:	4942      	ldr	r1, [pc, #264]	; (80816fc <_Z14display_updatev+0x21c>)
 80815f2:	681a      	ldr	r2, [r3, #0]
 80815f4:	4836      	ldr	r0, [pc, #216]	; (80816d0 <_Z14display_updatev+0x1f0>)
 80815f6:	f7ff fe39 	bl	808126c <_ZN5Print6printfIIfEEEjPKcDpT_>
 80815fa:	e009      	b.n	8081610 <_Z14display_updatev+0x130>
		display.print(accel[1]);
		display.setCursor(48,37);
		display.print(accel[2]);
		*/
	} else {
		display.setCursor(0, 19);
 80815fc:	2213      	movs	r2, #19
 80815fe:	4629      	mov	r1, r5
 8081600:	4833      	ldr	r0, [pc, #204]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081602:	f001 fe68 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
 8081606:	4a3e      	ldr	r2, [pc, #248]	; (8081700 <_Z14display_updatev+0x220>)
 8081608:	4629      	mov	r1, r5
 808160a:	4831      	ldr	r0, [pc, #196]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808160c:	f003 fe26 	bl	808525c <_ZN5Print11printf_implEbPKcz>
		display.printf("imu init. failed");
	}

	// display current speed (size 2)
	display.setCursor(11, 24);
 8081610:	2218      	movs	r2, #24
 8081612:	210b      	movs	r1, #11
 8081614:	482e      	ldr	r0, [pc, #184]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081616:	f001 fe5e 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.setTextSize(2);
 808161a:	2102      	movs	r1, #2
 808161c:	482c      	ldr	r0, [pc, #176]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808161e:	f001 fe5d 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>
	display.printf("%.0f", speed_mph);
 8081622:	4b38      	ldr	r3, [pc, #224]	; (8081704 <_Z14display_updatev+0x224>)
 8081624:	2100      	movs	r1, #0
 8081626:	e9d3 2300 	ldrd	r2, r3, [r3]
 808162a:	4829      	ldr	r0, [pc, #164]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808162c:	e9cd 2300 	strd	r2, r3, [sp]
 8081630:	4a35      	ldr	r2, [pc, #212]	; (8081708 <_Z14display_updatev+0x228>)
 8081632:	f003 fe13 	bl	808525c <_ZN5Print11printf_implEbPKcz>
	display.setTextSize(1);
 8081636:	2101      	movs	r1, #1
 8081638:	4825      	ldr	r0, [pc, #148]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808163a:	f001 fe4f 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>
	display.print("mph");
 808163e:	4933      	ldr	r1, [pc, #204]	; (808170c <_Z14display_updatev+0x22c>)
 8081640:	4823      	ldr	r0, [pc, #140]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081642:	f003 fdcc 	bl	80851de <_ZN5Print5printEPKc>

	// display current heading (size 2)
	display.setCursor(48, 35);
 8081646:	2223      	movs	r2, #35	; 0x23
 8081648:	2130      	movs	r1, #48	; 0x30
 808164a:	4821      	ldr	r0, [pc, #132]	; (80816d0 <_Z14display_updatev+0x1f0>)
 808164c:	f001 fe43 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
	display.setTextSize(2);
 8081650:	2102      	movs	r1, #2
 8081652:	481f      	ldr	r0, [pc, #124]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081654:	f001 fe42 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>
	display.print(valid_fix_flag?heading2cardinal(heading):"--");
 8081658:	7823      	ldrb	r3, [r4, #0]
 808165a:	b133      	cbz	r3, 808166a <_Z14display_updatev+0x18a>
 808165c:	4b2c      	ldr	r3, [pc, #176]	; (8081710 <_Z14display_updatev+0x230>)
 808165e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8081662:	f7ff fb3d 	bl	8080ce0 <_Z16heading2cardinald>
 8081666:	4601      	mov	r1, r0
 8081668:	e000      	b.n	808166c <_Z14display_updatev+0x18c>
 808166a:	492a      	ldr	r1, [pc, #168]	; (8081714 <_Z14display_updatev+0x234>)
 808166c:	4818      	ldr	r0, [pc, #96]	; (80816d0 <_Z14display_updatev+0x1f0>)
	display.setTextSize(1);

	// snprintf # clicks when button is pressed...
	if (nb_clicks > 0) {
 808166e:	4c2a      	ldr	r4, [pc, #168]	; (8081718 <_Z14display_updatev+0x238>)
	display.print("mph");

	// display current heading (size 2)
	display.setCursor(48, 35);
	display.setTextSize(2);
	display.print(valid_fix_flag?heading2cardinal(heading):"--");
 8081670:	f003 fdb5 	bl	80851de <_ZN5Print5printEPKc>
	display.setTextSize(1);
 8081674:	2101      	movs	r1, #1
 8081676:	4816      	ldr	r0, [pc, #88]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081678:	f001 fe30 	bl	80832dc <_ZN12Adafruit_GFX11setTextSizeEh>

	// snprintf # clicks when button is pressed...
	if (nb_clicks > 0) {
 808167c:	6823      	ldr	r3, [r4, #0]
 808167e:	2b00      	cmp	r3, #0
 8081680:	dd0c      	ble.n	808169c <_Z14display_updatev+0x1bc>
		display.setCursor(0, 43);
 8081682:	222b      	movs	r2, #43	; 0x2b
 8081684:	2100      	movs	r1, #0
 8081686:	4812      	ldr	r0, [pc, #72]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081688:	f001 fe25 	bl	80832d6 <_ZN12Adafruit_GFX9setCursorEss>
		display.printf("%lu clicks", nb_clicks);
 808168c:	6823      	ldr	r3, [r4, #0]
 808168e:	4a23      	ldr	r2, [pc, #140]	; (808171c <_Z14display_updatev+0x23c>)
 8081690:	2100      	movs	r1, #0
 8081692:	480f      	ldr	r0, [pc, #60]	; (80816d0 <_Z14display_updatev+0x1f0>)
 8081694:	f003 fde2 	bl	808525c <_ZN5Print11printf_implEbPKcz>
		// clear the button pressed buffer
		nb_clicks = 0;
 8081698:	2300      	movs	r3, #0
 808169a:	6023      	str	r3, [r4, #0]
	}

	status_bar_bottom_update();
 808169c:	f7ff fa24 	bl	8080ae8 <_Z24status_bar_bottom_updatev>
	display.display();
 80816a0:	480b      	ldr	r0, [pc, #44]	; (80816d0 <_Z14display_updatev+0x1f0>)
}
 80816a2:	b003      	add	sp, #12
 80816a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		// clear the button pressed buffer
		nb_clicks = 0;
	}

	status_bar_bottom_update();
	display.display();
 80816a8:	f002 bcda 	b.w	8084060 <_ZN15Adafruit_SH11067displayEv>
		}
	}

	// if lost cloud connection during tracking, display publish queue length
	if (!Particle.connected() && tracking_on_flag) {
		display.printf(" q:%u", publishQueue.getQueueSize());
 80816ac:	481c      	ldr	r0, [pc, #112]	; (8081720 <_Z14display_updatev+0x240>)
 80816ae:	f001 f830 	bl	8082712 <_ZN17PublishQueueAsync12getQueueSizeEv>
 80816b2:	4a1c      	ldr	r2, [pc, #112]	; (8081724 <_Z14display_updatev+0x244>)
 80816b4:	4603      	mov	r3, r0
 80816b6:	4629      	mov	r1, r5
 80816b8:	4805      	ldr	r0, [pc, #20]	; (80816d0 <_Z14display_updatev+0x1f0>)
 80816ba:	f003 fdcf 	bl	808525c <_ZN5Print11printf_implEbPKcz>
 80816be:	e743      	b.n	8081548 <_Z14display_updatev+0x68>
 80816c0:	47ae147b 	.word	0x47ae147b
 80816c4:	3fa47ae1 	.word	0x3fa47ae1
 80816c8:	47ae147b 	.word	0x47ae147b
 80816cc:	bfa47ae1 	.word	0xbfa47ae1
 80816d0:	20000c48 	.word	0x20000c48
 80816d4:	20000c3d 	.word	0x20000c3d
 80816d8:	20000c78 	.word	0x20000c78
 80816dc:	0808aa7d 	.word	0x0808aa7d
 80816e0:	20000ca7 	.word	0x20000ca7
 80816e4:	20000ab0 	.word	0x20000ab0
 80816e8:	0808aa82 	.word	0x0808aa82
 80816ec:	20000c76 	.word	0x20000c76
 80816f0:	20000a84 	.word	0x20000a84
 80816f4:	40440000 	.word	0x40440000
 80816f8:	20000a74 	.word	0x20000a74
 80816fc:	0808aa8c 	.word	0x0808aa8c
 8081700:	0808aa93 	.word	0x0808aa93
 8081704:	20000c40 	.word	0x20000c40
 8081708:	0808aaa4 	.word	0x0808aaa4
 808170c:	0808aaa9 	.word	0x0808aaa9
 8081710:	20000ad8 	.word	0x20000ad8
 8081714:	0808aa7a 	.word	0x0808aa7a
 8081718:	20000a90 	.word	0x20000a90
 808171c:	0808aaad 	.word	0x0808aaad
 8081720:	20000cc4 	.word	0x20000cc4
 8081724:	0808aab8 	.word	0x0808aab8

08081728 <loop>:
	// displayTimer.start();
	last_refresh_display = millis();
}


void loop() {
 8081728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// FSM transitions
	switch(state) {
 808172c:	4c89      	ldr	r4, [pc, #548]	; (8081954 <loop+0x22c>)
	// displayTimer.start();
	last_refresh_display = millis();
}


void loop() {
 808172e:	b08d      	sub	sp, #52	; 0x34
	// FSM transitions
	switch(state) {
 8081730:	7823      	ldrb	r3, [r4, #0]
 8081732:	4d89      	ldr	r5, [pc, #548]	; (8081958 <loop+0x230>)
 8081734:	2b03      	cmp	r3, #3
 8081736:	d860      	bhi.n	80817fa <loop+0xd2>
 8081738:	e8df f003 	tbb	[pc, r3]
 808173c:	45241702 	.word	0x45241702
		case CONNECT_WAIT_STATE:
		if (enter_standby_flag) {
 8081740:	4b86      	ldr	r3, [pc, #536]	; (808195c <loop+0x234>)
 8081742:	781b      	ldrb	r3, [r3, #0]
 8081744:	b10b      	cbz	r3, 808174a <loop+0x22>
			state = SLEEP_STATE;
 8081746:	2303      	movs	r3, #3
 8081748:	7023      	strb	r3, [r4, #0]
 808174a:	f003 f829 	bl	80847a0 <spark_cloud_flag_connected>
		}
		if (Particle.connected()) {
 808174e:	2800      	cmp	r0, #0
 8081750:	d053      	beq.n	80817fa <loop+0xd2>
			if (tracking_on_flag) {
 8081752:	782b      	ldrb	r3, [r5, #0]
 8081754:	b13b      	cbz	r3, 8081766 <loop+0x3e>
				state = TRACKING_ON_STATE;
 8081756:	2302      	movs	r3, #2
				trackingLEDTimer.start();
 8081758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808175c:	4880      	ldr	r0, [pc, #512]	; (8081960 <loop+0x238>)
		if (enter_standby_flag) {
			state = SLEEP_STATE;
		}
		if (Particle.connected()) {
			if (tracking_on_flag) {
				state = TRACKING_ON_STATE;
 808175e:	7023      	strb	r3, [r4, #0]
				trackingLEDTimer.start();
 8081760:	f7ff f836 	bl	80807d0 <_ZN5Timer5startEj>
 8081764:	e049      	b.n	80817fa <loop+0xd2>
			} else {
				state = TRACKING_OFF_STATE;
 8081766:	2301      	movs	r3, #1
 8081768:	e046      	b.n	80817f8 <loop+0xd0>
			}
		}
		break;

		case TRACKING_OFF_STATE:
		if (enter_standby_flag) {
 808176a:	4b7c      	ldr	r3, [pc, #496]	; (808195c <loop+0x234>)
 808176c:	781b      	ldrb	r3, [r3, #0]
 808176e:	b10b      	cbz	r3, 8081774 <loop+0x4c>
			state = SLEEP_STATE;
 8081770:	2303      	movs	r3, #3
 8081772:	7023      	strb	r3, [r4, #0]
 8081774:	f003 f814 	bl	80847a0 <spark_cloud_flag_connected>
		}
		if (!Particle.connected()) {
 8081778:	b900      	cbnz	r0, 808177c <loop+0x54>
			// cloud connection lost
			#ifdef serial_debug
			Log.info("retrying to connect...");
			#endif
			state = CONNECT_WAIT_STATE;
 808177a:	7020      	strb	r0, [r4, #0]
		}
		if (tracking_on_flag) {
 808177c:	782b      	ldrb	r3, [r5, #0]
 808177e:	2b00      	cmp	r3, #0
 8081780:	d03b      	beq.n	80817fa <loop+0xd2>
 8081782:	e7e8      	b.n	8081756 <loop+0x2e>
			trackingLEDTimer.start();
		}
		break;

		case TRACKING_ON_STATE:
		if (enter_standby_flag) {
 8081784:	4b75      	ldr	r3, [pc, #468]	; (808195c <loop+0x234>)
 8081786:	781b      	ldrb	r3, [r3, #0]
 8081788:	b10b      	cbz	r3, 808178e <loop+0x66>
			state = SLEEP_STATE;
 808178a:	2303      	movs	r3, #3
 808178c:	7023      	strb	r3, [r4, #0]
 808178e:	f003 f807 	bl	80847a0 <spark_cloud_flag_connected>
		}
		if (!Particle.connected()) {
 8081792:	4606      	mov	r6, r0
 8081794:	b948      	cbnz	r0, 80817aa <loop+0x82>
			// cloud connection lost
			#ifdef serial_debug
			Log.info("retrying to connect...");
			#endif
			state = CONNECT_WAIT_STATE;
 8081796:	7020      	strb	r0, [r4, #0]
			trackingLEDTimer.stop();
 8081798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808179c:	4870      	ldr	r0, [pc, #448]	; (8081960 <loop+0x238>)
 808179e:	f7ff f807 	bl	80807b0 <_ZN5Timer4stopEj>
			digitalWrite(D7, LOW);
 80817a2:	4631      	mov	r1, r6
 80817a4:	2007      	movs	r0, #7
 80817a6:	f004 fde6 	bl	8086376 <digitalWrite>
		}
		if (!tracking_on_flag) {
 80817aa:	782e      	ldrb	r6, [r5, #0]
 80817ac:	bb2e      	cbnz	r6, 80817fa <loop+0xd2>
			#ifdef serial_debug
			Log.info("switch tracking off");
			#endif
			state = TRACKING_OFF_STATE;
 80817ae:	2301      	movs	r3, #1
			trackingLEDTimer.stop();
 80817b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80817b4:	486a      	ldr	r0, [pc, #424]	; (8081960 <loop+0x238>)
		}
		if (!tracking_on_flag) {
			#ifdef serial_debug
			Log.info("switch tracking off");
			#endif
			state = TRACKING_OFF_STATE;
 80817b6:	7023      	strb	r3, [r4, #0]
			trackingLEDTimer.stop();
 80817b8:	f7fe fffa 	bl	80807b0 <_ZN5Timer4stopEj>
			digitalWrite(D7, LOW);
 80817bc:	4631      	mov	r1, r6
 80817be:	2007      	movs	r0, #7
 80817c0:	f004 fdd9 	bl	8086376 <digitalWrite>
 80817c4:	e019      	b.n	80817fa <loop+0xd2>
		break;

		case SLEEP_STATE:

		/* Pre Sleep Routine */
		pre_sleep_sequence();
 80817c6:	f7ff fced 	bl	80811a4 <_Z18pre_sleep_sequencev>
 80817ca:	4b66      	ldr	r3, [pc, #408]	; (8081964 <loop+0x23c>)
 80817cc:	2211      	movs	r2, #17
 80817ce:	681b      	ldr	r3, [r3, #0]
 80817d0:	f8ad 201e 	strh.w	r2, [sp, #30]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80817d4:	9302      	str	r3, [sp, #8]
 80817d6:	2201      	movs	r2, #1
 80817d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80817dc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80817e0:	f10d 011e 	add.w	r1, sp, #30
 80817e4:	f10d 031d 	add.w	r3, sp, #29
 80817e8:	a808      	add	r0, sp, #32
 80817ea:	f88d 201d 	strb.w	r2, [sp, #29]
 80817ee:	f003 f9b1 	bl	8084b54 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
		//Not Working: it's available to 3G modem only. Enable wake up on all URCs. We'll see with Boron
		//Cellular.command("AT+URING=1\r\n");delay(1000); 
		System.sleep(WKP, RISING, SLEEPING_TIME, SLEEP_NETWORK_STANDBY);

		/* Post Wake up routine */
		post_awake_sequence();
 80817f2:	f7ff fb05 	bl	8080e00 <_Z19post_awake_sequencev>
		state = CONNECT_WAIT_STATE;
 80817f6:	2300      	movs	r3, #0
 80817f8:	7023      	strb	r3, [r4, #0]

	#ifdef googlefi
	// one-time action that needs to run after cloud connection
	static bool keepAlive_set = false;

	if (!keepAlive_set && Particle.connected()) {
 80817fa:	4e5b      	ldr	r6, [pc, #364]	; (8081968 <loop+0x240>)
 80817fc:	7834      	ldrb	r4, [r6, #0]
 80817fe:	b924      	cbnz	r4, 808180a <loop+0xe2>
 8081800:	f002 ffce 	bl	80847a0 <spark_cloud_flag_connected>
 8081804:	2800      	cmp	r0, #0
 8081806:	f040 8081 	bne.w	808190c <loop+0x1e4>
		#endif
	}
	#endif

	// a one-time check to set session_id after reset
	if (Time.isValid() && session_id_reset) {
 808180a:	f003 fec1 	bl	8085590 <_ZN9TimeClass7isValidEv>
 808180e:	b120      	cbz	r0, 808181a <loop+0xf2>
 8081810:	4c56      	ldr	r4, [pc, #344]	; (808196c <loop+0x244>)
 8081812:	7823      	ldrb	r3, [r4, #0]
 8081814:	2b00      	cmp	r3, #0
 8081816:	f040 8088 	bne.w	808192a <loop+0x202>
		session_id = Time.local();
		session_id_reset = false;
	}

	// in Tracking On mode, check if it's time to publish GNSS data
	if (tracking_on_flag && millis() > (last_tracking_publish + PUBLISH_PERIOD + publish_extra_time)) {
 808181a:	782b      	ldrb	r3, [r5, #0]
 808181c:	2b00      	cmp	r3, #0
 808181e:	d040      	beq.n	80818a2 <loop+0x17a>
 8081820:	f002 fd30 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081824:	4c52      	ldr	r4, [pc, #328]	; (8081970 <loop+0x248>)
 8081826:	4b53      	ldr	r3, [pc, #332]	; (8081974 <loop+0x24c>)
 8081828:	6822      	ldr	r2, [r4, #0]
 808182a:	681b      	ldr	r3, [r3, #0]
 808182c:	441a      	add	r2, r3
 808182e:	4b52      	ldr	r3, [pc, #328]	; (8081978 <loop+0x250>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	4413      	add	r3, r2
 8081834:	4298      	cmp	r0, r3
 8081836:	d87f      	bhi.n	8081938 <loop+0x210>
		trackingDataPublish("");
		last_tracking_publish = millis();
	}

	// in Tracking On mode, check if it's time to increment trip distance/time
	if (tracking_on_flag && millis() > (last_updated_odometer + ODOMETER_PERIOD)) {
 8081838:	782b      	ldrb	r3, [r5, #0]
 808183a:	2b00      	cmp	r3, #0
 808183c:	d031      	beq.n	80818a2 <loop+0x17a>
 808183e:	f002 fd21 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081842:	4c4e      	ldr	r4, [pc, #312]	; (808197c <loop+0x254>)
 8081844:	6823      	ldr	r3, [r4, #0]
 8081846:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 808184a:	4298      	cmp	r0, r3
 808184c:	d929      	bls.n	80818a2 <loop+0x17a>
		// calculate distance if there's significant change
		if (valid_fix_flag) {
 808184e:	4b4c      	ldr	r3, [pc, #304]	; (8081980 <loop+0x258>)
 8081850:	781b      	ldrb	r3, [r3, #0]
 8081852:	b1bb      	cbz	r3, 8081884 <loop+0x15c>
			if (old_lat == 0) {
 8081854:	f8df b154 	ldr.w	fp, [pc, #340]	; 80819ac <loop+0x284>
 8081858:	2200      	movs	r2, #0
 808185a:	e9db 8900 	ldrd	r8, r9, [fp]
 808185e:	2300      	movs	r3, #0
 8081860:	4640      	mov	r0, r8
 8081862:	4649      	mov	r1, r9
 8081864:	f007 f8ce 	bl	8088a04 <__aeabi_dcmpeq>
 8081868:	4f46      	ldr	r7, [pc, #280]	; (8081984 <loop+0x25c>)
 808186a:	4d47      	ldr	r5, [pc, #284]	; (8081988 <loop+0x260>)
 808186c:	4e47      	ldr	r6, [pc, #284]	; (808198c <loop+0x264>)
 808186e:	2800      	cmp	r0, #0
 8081870:	f000 809e 	beq.w	80819b0 <loop+0x288>
				// first time with valid fix, save initial location
				old_lat = lat;
 8081874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8081878:	e9cb 2300 	strd	r2, r3, [fp]
					#endif
					tripDistance_m = tripDistance_m + delta_dist;
					// save previous location only when there was significant change in location
					// useful when in low speed (walking) it takes more time to get significant delta distance
					old_lat = lat;
					old_lon = lon;
 808187c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8081880:	e9c5 2300 	strd	r2, r3, [r5]
 8081884:	f002 fcfe 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
				}
			}
		}
		// trip time is updated as long as tracking is on (regardless of fix validity)
		tripTime += (millis() - last_updated_odometer) / 1000;
 8081888:	6823      	ldr	r3, [r4, #0]
 808188a:	4a41      	ldr	r2, [pc, #260]	; (8081990 <loop+0x268>)
 808188c:	1ac0      	subs	r0, r0, r3
 808188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081892:	fbb0 f0f3 	udiv	r0, r0, r3
 8081896:	6813      	ldr	r3, [r2, #0]
 8081898:	4418      	add	r0, r3
 808189a:	6010      	str	r0, [r2, #0]
 808189c:	f002 fcf2 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		last_updated_odometer = millis();
 80818a0:	6020      	str	r0, [r4, #0]
 80818a2:	f002 fcef 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	}

	
	if (millis() > (last_refresh_display + DISPLAY_PERIOD)) {
 80818a6:	4c3b      	ldr	r4, [pc, #236]	; (8081994 <loop+0x26c>)
 80818a8:	6823      	ldr	r3, [r4, #0]
 80818aa:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80818ae:	4298      	cmp	r0, r3
 80818b0:	d904      	bls.n	80818bc <loop+0x194>
		display_update();
 80818b2:	f7ff fe15 	bl	80814e0 <_Z14display_updatev>
 80818b6:	f002 fce5 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		last_refresh_display = millis();
 80818ba:	6020      	str	r0, [r4, #0]
	/* get assist now data provided by u-blox. Requires an HTTP request and a valid token provided by u-blox
	* try it once or every 10 sec while waiting for a fix
	* blocks for up to 10 sec
	* TODO do it in a non blocking way? --> get the while loop out of here or run in its own thread?
	*/
	if (!valid_fix_flag && assistNow_on_flag) {
 80818bc:	4b30      	ldr	r3, [pc, #192]	; (8081980 <loop+0x258>)
 80818be:	781d      	ldrb	r5, [r3, #0]
 80818c0:	b935      	cbnz	r5, 80818d0 <loop+0x1a8>
 80818c2:	4c35      	ldr	r4, [pc, #212]	; (8081998 <loop+0x270>)
 80818c4:	7823      	ldrb	r3, [r4, #0]
 80818c6:	b11b      	cbz	r3, 80818d0 <loop+0x1a8>
		gnss.assist(); //blocks for up to 10 sec, needs cloud connection
 80818c8:	4834      	ldr	r0, [pc, #208]	; (808199c <loop+0x274>)
 80818ca:	f000 fc0b 	bl	80820e4 <_ZN10UBX_NEOM8N6assistEv>
		assistNow_on_flag = false;
 80818ce:	7025      	strb	r5, [r4, #0]
	}

	// cycle power of cellular modem to force it to re-establish a clea connection with network
	if (cycle_modem_power_flag) {
 80818d0:	4b33      	ldr	r3, [pc, #204]	; (80819a0 <loop+0x278>)
 80818d2:	781a      	ldrb	r2, [r3, #0]
 80818d4:	2a00      	cmp	r2, #0
 80818d6:	f000 80ac 	beq.w	8081a32 <loop+0x30a>
		cycle_modem_power_flag = false;
 80818da:	2400      	movs	r4, #0
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80818dc:	4622      	mov	r2, r4
 80818de:	4621      	mov	r1, r4
 80818e0:	701c      	strb	r4, [r3, #0]
 80818e2:	4620      	mov	r0, r4
 80818e4:	4623      	mov	r3, r4
 80818e6:	f002 ff3b 	bl	8084760 <network_off>
		Cellular.off();
		delay(3000);
 80818ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80818ee:	f003 fea5 	bl	808563c <delay>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80818f2:	4623      	mov	r3, r4
 80818f4:	4622      	mov	r2, r4
 80818f6:	4621      	mov	r1, r4
 80818f8:	4620      	mov	r0, r4
 80818fa:	f002 ff29 	bl	8084750 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80818fe:	4623      	mov	r3, r4
 8081900:	4622      	mov	r2, r4
 8081902:	4621      	mov	r1, r4
 8081904:	4620      	mov	r0, r4
 8081906:	f002 ff0b 	bl	8084720 <network_connect>
		Cellular.on();
		Cellular.connect();
	}


} //loop
 808190a:	e092      	b.n	8081a32 <loop+0x30a>

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
 808190c:	2308      	movs	r3, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
 808190e:	9408      	str	r4, [sp, #32]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8081910:	2701      	movs	r7, #1

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
 8081912:	f8ad 3020 	strh.w	r3, [sp, #32]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
 8081916:	aa08      	add	r2, sp, #32
 8081918:	4623      	mov	r3, r4
 808191a:	f247 5130 	movw	r1, #30000	; 0x7530
 808191e:	4620      	mov	r0, r4
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8081920:	9709      	str	r7, [sp, #36]	; 0x24
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
 8081922:	f002 ff55 	bl	80847d0 <spark_set_connection_property>
	// one-time action that needs to run after cloud connection
	static bool keepAlive_set = false;

	if (!keepAlive_set && Particle.connected()) {
		Particle.keepAlive(KEEPALIVE_PERIOD);
		keepAlive_set = true;
 8081926:	7037      	strb	r7, [r6, #0]
 8081928:	e76f      	b.n	808180a <loop+0xe2>
	}
	#endif

	// a one-time check to set session_id after reset
	if (Time.isValid() && session_id_reset) {
		session_id = Time.local();
 808192a:	f003 fd3b 	bl	80853a4 <_ZN9TimeClass5localEv>
 808192e:	4b1d      	ldr	r3, [pc, #116]	; (80819a4 <loop+0x27c>)
 8081930:	6018      	str	r0, [r3, #0]
		session_id_reset = false;
 8081932:	2300      	movs	r3, #0
 8081934:	7023      	strb	r3, [r4, #0]
 8081936:	e770      	b.n	808181a <loop+0xf2>
	}

	// in Tracking On mode, check if it's time to publish GNSS data
	if (tracking_on_flag && millis() > (last_tracking_publish + PUBLISH_PERIOD + publish_extra_time)) {
		trackingDataPublish("");
 8081938:	491b      	ldr	r1, [pc, #108]	; (80819a8 <loop+0x280>)
 808193a:	a808      	add	r0, sp, #32
 808193c:	f003 fbf7 	bl	808512e <_ZN6StringC1EPK19__FlashStringHelper>
 8081940:	a808      	add	r0, sp, #32
 8081942:	f7ff faf3 	bl	8080f2c <_Z19trackingDataPublish6String>
 8081946:	a808      	add	r0, sp, #32
 8081948:	f003 fbaa 	bl	80850a0 <_ZN6StringD1Ev>
 808194c:	f002 fc9a 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		last_tracking_publish = millis();
 8081950:	6020      	str	r0, [r4, #0]
 8081952:	e771      	b.n	8081838 <loop+0x110>
 8081954:	20000a9c 	.word	0x20000a9c
 8081958:	20000c76 	.word	0x20000c76
 808195c:	20000c20 	.word	0x20000c20
 8081960:	20000ca8 	.word	0x20000ca8
 8081964:	20000aac 	.word	0x20000aac
 8081968:	200008e4 	.word	0x200008e4
 808196c:	20000408 	.word	0x20000408
 8081970:	20000aa8 	.word	0x20000aa8
 8081974:	2000040c 	.word	0x2000040c
 8081978:	20000c6c 	.word	0x20000c6c
 808197c:	20000904 	.word	0x20000904
 8081980:	20000c3d 	.word	0x20000c3d
 8081984:	20000a60 	.word	0x20000a60
 8081988:	20000c28 	.word	0x20000c28
 808198c:	20000c18 	.word	0x20000c18
 8081990:	20000ca0 	.word	0x20000ca0
 8081994:	20000a7c 	.word	0x20000a7c
 8081998:	20000c7c 	.word	0x20000c7c
 808199c:	20000ae0 	.word	0x20000ae0
 80819a0:	20000a9d 	.word	0x20000a9d
 80819a4:	20000a98 	.word	0x20000a98
 80819a8:	0808b10e 	.word	0x0808b10e
 80819ac:	20000a68 	.word	0x20000a68
			if (old_lat == 0) {
				// first time with valid fix, save initial location
				old_lat = lat;
				old_lon = lon;
			} else {
				delta_dist = distance_angle_between(old_lat, old_lon, lat, lon, true);
 80819b0:	4649      	mov	r1, r9
 80819b2:	4640      	mov	r0, r8
 80819b4:	f007 f896 	bl	8088ae4 <__aeabi_d2f>
 80819b8:	2301      	movs	r3, #1
 80819ba:	9304      	str	r3, [sp, #16]
 80819bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80819c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80819c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80819c8:	e9cd 2300 	strd	r2, r3, [sp]
 80819cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80819d0:	f7ff f906 	bl	8080be0 <_Z22distance_angle_betweenfdddb>
 80819d4:	4682      	mov	sl, r0
 80819d6:	468b      	mov	fp, r1
 80819d8:	4b17      	ldr	r3, [pc, #92]	; (8081a38 <loop+0x310>)
				// delta distance threshold is max(horizontal_accuracy, 10) in meters
				delta_dist_th = hAcc > 10.0 ? hAcc : 10.0;
 80819da:	2200      	movs	r2, #0
			if (old_lat == 0) {
				// first time with valid fix, save initial location
				old_lat = lat;
				old_lon = lon;
			} else {
				delta_dist = distance_angle_between(old_lat, old_lon, lat, lon, true);
 80819dc:	e9c3 ab00 	strd	sl, fp, [r3]
				// delta distance threshold is max(horizontal_accuracy, 10) in meters
				delta_dist_th = hAcc > 10.0 ? hAcc : 10.0;
 80819e0:	4b16      	ldr	r3, [pc, #88]	; (8081a3c <loop+0x314>)
 80819e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80819e6:	4b16      	ldr	r3, [pc, #88]	; (8081a40 <loop+0x318>)
 80819e8:	4640      	mov	r0, r8
 80819ea:	4649      	mov	r1, r9
 80819ec:	f007 f832 	bl	8088a54 <__aeabi_dcmpgt>
 80819f0:	b918      	cbnz	r0, 80819fa <loop+0x2d2>
 80819f2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8081a40 <loop+0x318>
 80819f6:	f04f 0800 	mov.w	r8, #0
 80819fa:	4b12      	ldr	r3, [pc, #72]	; (8081a44 <loop+0x31c>)
				if (delta_dist > delta_dist_th) {
 80819fc:	4652      	mov	r2, sl
				old_lat = lat;
				old_lon = lon;
			} else {
				delta_dist = distance_angle_between(old_lat, old_lon, lat, lon, true);
				// delta distance threshold is max(horizontal_accuracy, 10) in meters
				delta_dist_th = hAcc > 10.0 ? hAcc : 10.0;
 80819fe:	e9c3 8900 	strd	r8, r9, [r3]
				if (delta_dist > delta_dist_th) {
 8081a02:	4640      	mov	r0, r8
 8081a04:	465b      	mov	r3, fp
 8081a06:	4649      	mov	r1, r9
 8081a08:	f007 f806 	bl	8088a18 <__aeabi_dcmplt>
 8081a0c:	2800      	cmp	r0, #0
 8081a0e:	f43f af39 	beq.w	8081884 <loop+0x15c>
					#ifdef serial_debug
					Log.info("d_lat=%.6f", lat - old_lat);
					Log.info("d_lon=%.6f", lon - old_lon);
					Log.info("d_dist=%.2f m", delta_dist);
					#endif
					tripDistance_m = tripDistance_m + delta_dist;
 8081a12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8081a4c <loop+0x324>
 8081a16:	4652      	mov	r2, sl
 8081a18:	e9d8 0100 	ldrd	r0, r1, [r8]
 8081a1c:	465b      	mov	r3, fp
 8081a1e:	f006 fbd7 	bl	80881d0 <__adddf3>
					// save previous location only when there was significant change in location
					// useful when in low speed (walking) it takes more time to get significant delta distance
					old_lat = lat;
 8081a22:	e9d7 2300 	ldrd	r2, r3, [r7]
					#ifdef serial_debug
					Log.info("d_lat=%.6f", lat - old_lat);
					Log.info("d_lon=%.6f", lon - old_lon);
					Log.info("d_dist=%.2f m", delta_dist);
					#endif
					tripDistance_m = tripDistance_m + delta_dist;
 8081a26:	e9c8 0100 	strd	r0, r1, [r8]
					// save previous location only when there was significant change in location
					// useful when in low speed (walking) it takes more time to get significant delta distance
					old_lat = lat;
 8081a2a:	4907      	ldr	r1, [pc, #28]	; (8081a48 <loop+0x320>)
 8081a2c:	e9c1 2300 	strd	r2, r3, [r1]
 8081a30:	e724      	b.n	808187c <loop+0x154>
		Cellular.on();
		Cellular.connect();
	}


} //loop
 8081a32:	b00d      	add	sp, #52	; 0x34
 8081a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081a38:	20000a30 	.word	0x20000a30
 8081a3c:	20000c30 	.word	0x20000c30
 8081a40:	40240000 	.word	0x40240000
 8081a44:	20000400 	.word	0x20000400
 8081a48:	20000a68 	.word	0x20000a68
 8081a4c:	20000d08 	.word	0x20000d08

08081a50 <_ZN15Adafruit_SH1106D0Ev>:
 8081a50:	b510      	push	{r4, lr}
 8081a52:	4604      	mov	r4, r0
 8081a54:	f7fe fb23 	bl	808009e <_ZdlPv>
 8081a58:	4620      	mov	r0, r4
 8081a5a:	bd10      	pop	{r4, pc}

08081a5c <_GLOBAL__sub_I_PUBLISH_PERIOD>:
// checking with wtachdog every 5 sec if cloud connected 
void wd_check_in() {
	if (Particle.connected()) {
		wd.checkin();
	}
 8081a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081a60:	4b78      	ldr	r3, [pc, #480]	; (8081c44 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1e8>)
 8081a62:	2400      	movs	r4, #0
 8081a64:	601c      	str	r4, [r3, #0]
 8081a66:	4b78      	ldr	r3, [pc, #480]	; (8081c48 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1ec>)
 8081a68:	f04f 0801 	mov.w	r8, #1
 8081a6c:	f8c3 8000 	str.w	r8, [r3]
 8081a70:	4b76      	ldr	r3, [pc, #472]	; (8081c4c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1f0>)
 8081a72:	b086      	sub	sp, #24
 8081a74:	f883 8000 	strb.w	r8, [r3]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081a78:	f002 fb8c 	bl	8084194 <HAL_Pin_Map>

// Text buffer
char 	buffer[256];
// publish queue buffers
retained uint8_t publishQueueRetainedBuffer[2560]; //~21 points
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 8081a7c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8081a80:	4973      	ldr	r1, [pc, #460]	; (8081c50 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1f4>)
 8081a82:	4874      	ldr	r0, [pc, #464]	; (8081c54 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1f8>)
 8081a84:	f000 fe5e 	bl	8082744 <_ZN17PublishQueueAsyncC1EPht>
 8081a88:	4a73      	ldr	r2, [pc, #460]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081a8a:	4974      	ldr	r1, [pc, #464]	; (8081c5c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x200>)
 8081a8c:	4871      	ldr	r0, [pc, #452]	; (8081c54 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1f8>)
 8081a8e:	f004 fd79 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081a92:	4b73      	ldr	r3, [pc, #460]	; (8081c60 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x204>)
// Required forward declarations
void gnssMessageHandler(uint16_t msg_class_id, const ubx_buf_t &buf); //@rx valid gnss msg
void wd_callback() { System.sleep(10);} // turn off cellular module for 10s

// Global instances
UBX_NEOM8N	gnss(gnssMessageHandler);
 8081a94:	a902      	add	r1, sp, #8
 8081a96:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081a98:	4b72      	ldr	r3, [pc, #456]	; (8081c64 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x208>)
 8081a9a:	4873      	ldr	r0, [pc, #460]	; (8081c68 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x20c>)
 8081a9c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081a9e:	4b73      	ldr	r3, [pc, #460]	; (8081c6c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x210>)
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 8081aa0:	4d73      	ldr	r5, [pc, #460]	; (8081c70 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x214>)
 8081aa2:	9304      	str	r3, [sp, #16]
 8081aa4:	f000 f958 	bl	8081d58 <_ZN10UBX_NEOM8NC1ESt8functionIFvtRK9ubx_buf_tEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081aa8:	a802      	add	r0, sp, #8
 8081aaa:	f7fe fe25 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8081aae:	4a6a      	ldr	r2, [pc, #424]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081ab0:	4970      	ldr	r1, [pc, #448]	; (8081c74 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x218>)
 8081ab2:	486d      	ldr	r0, [pc, #436]	; (8081c68 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x20c>)
 8081ab4:	f004 fd66 	bl	8086584 <__aeabi_atexit>
LSM6DS3 	imu(SPI_MODE, IMU_CS);
 8081ab8:	221e      	movs	r2, #30
 8081aba:	4641      	mov	r1, r8
 8081abc:	486e      	ldr	r0, [pc, #440]	; (8081c78 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x21c>)
 8081abe:	f001 fd5b 	bl	8083578 <_ZN7LSM6DS3C1Ehh>
#ifdef cellular
FuelGauge	battery;
 8081ac2:	4621      	mov	r1, r4
 8081ac4:	486d      	ldr	r0, [pc, #436]	; (8081c7c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x220>)
 8081ac6:	f003 fded 	bl	80856a4 <_ZN9FuelGaugeC1Eb>
 8081aca:	4a63      	ldr	r2, [pc, #396]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081acc:	496c      	ldr	r1, [pc, #432]	; (8081c80 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x224>)
 8081ace:	486b      	ldr	r0, [pc, #428]	; (8081c7c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x220>)
 8081ad0:	f004 fd58 	bl	8086584 <__aeabi_atexit>
PMIC 		pmic; // to change PMIC settings
 8081ad4:	4621      	mov	r1, r4
 8081ad6:	486b      	ldr	r0, [pc, #428]	; (8081c84 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x228>)
 8081ad8:	f002 fee9 	bl	80848ae <_ZN4PMICC1Eb>
 8081adc:	4a5e      	ldr	r2, [pc, #376]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081ade:	496a      	ldr	r1, [pc, #424]	; (8081c88 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x22c>)
 8081ae0:	4868      	ldr	r0, [pc, #416]	; (8081c84 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x228>)
 8081ae2:	f004 fd4f 	bl	8086584 <__aeabi_atexit>
#endif
Adafruit_SH1106 display(OLED_DC, OLED_RESET, OLED_CS);
 8081ae6:	231a      	movs	r3, #26
 8081ae8:	2218      	movs	r2, #24
 8081aea:	2119      	movs	r1, #25
 8081aec:	4867      	ldr	r0, [pc, #412]	; (8081c8c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x230>)
 8081aee:	f002 f98d 	bl	8083e0c <_ZN15Adafruit_SH1106C1Eaaa>
 8081af2:	4a59      	ldr	r2, [pc, #356]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081af4:	4966      	ldr	r1, [pc, #408]	; (8081c90 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x234>)
 8081af6:	4865      	ldr	r0, [pc, #404]	; (8081c8c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x230>)
 8081af8:	f004 fd44 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081afc:	4b65      	ldr	r3, [pc, #404]	; (8081c94 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x238>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081afe:	4f66      	ldr	r7, [pc, #408]	; (8081c98 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x23c>)
	    _M_manager = &_My_handler::_M_manager;
 8081b00:	4e66      	ldr	r6, [pc, #408]	; (8081c9c <_GLOBAL__sub_I_PUBLISH_PERIOD+0x240>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081b02:	9302      	str	r3, [sp, #8]
 8081b04:	4b66      	ldr	r3, [pc, #408]	; (8081ca0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x244>)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081b06:	60ec      	str	r4, [r5, #12]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081b08:	2202      	movs	r2, #2
 8081b0a:	a902      	add	r1, sp, #8
 8081b0c:	1d28      	adds	r0, r5, #4
 8081b0e:	602b      	str	r3, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b10:	9705      	str	r7, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081b12:	9604      	str	r6, [sp, #16]
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081b14:	f7fe fae0 	bl	80800d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	  _M_invoker = __x._M_invoker;
 8081b18:	9b05      	ldr	r3, [sp, #20]
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8081b1a:	f105 0014 	add.w	r0, r5, #20
 8081b1e:	612b      	str	r3, [r5, #16]
	  _M_manager = __x._M_manager;
 8081b20:	9b04      	ldr	r3, [sp, #16]
 8081b22:	2209      	movs	r2, #9
 8081b24:	60eb      	str	r3, [r5, #12]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
 8081b26:	4b5f      	ldr	r3, [pc, #380]	; (8081ca4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x248>)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8081b28:	495f      	ldr	r1, [pc, #380]	; (8081ca8 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x24c>)

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
 8081b2a:	61eb      	str	r3, [r5, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8081b2c:	f44f 7300 	mov.w	r3, #512	; 0x200

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
 8081b30:	616c      	str	r4, [r5, #20]
 8081b32:	61ac      	str	r4, [r5, #24]
 8081b34:	622d      	str	r5, [r5, #32]
 8081b36:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8081b3a:	e88d 0009 	stmia.w	sp, {r0, r3}
 8081b3e:	4b5b      	ldr	r3, [pc, #364]	; (8081cac <_GLOBAL__sub_I_PUBLISH_PERIOD+0x250>)
 8081b40:	f002 fbd0 	bl	80842e4 <os_thread_create>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081b44:	f002 fb9e 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081b48:	4b59      	ldr	r3, [pc, #356]	; (8081cb0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x254>)
 8081b4a:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b4c:	a802      	add	r0, sp, #8
 8081b4e:	f7fe fdd3 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
ApplicationWatchdog wd(300000, wd_callback); // called after 5 min no connection
 8081b52:	4a41      	ldr	r2, [pc, #260]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081b54:	4957      	ldr	r1, [pc, #348]	; (8081cb4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x258>)
 8081b56:	4628      	mov	r0, r5
 8081b58:	f004 fd14 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081b5c:	4b56      	ldr	r3, [pc, #344]	; (8081cb8 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x25c>)

// Software timers
Timer trackingLEDTimer(LED_PERIOD, trackingLEDUpdate);
 8081b5e:	aa02      	add	r2, sp, #8
 8081b60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8081b64:	9302      	str	r3, [sp, #8]
 8081b66:	4855      	ldr	r0, [pc, #340]	; (8081cbc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x260>)
 8081b68:	4623      	mov	r3, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b6a:	9705      	str	r7, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081b6c:	9604      	str	r6, [sp, #16]
 8081b6e:	f7fe fded 	bl	808074c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b72:	a802      	add	r0, sp, #8
 8081b74:	f7fe fdc0 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8081b78:	4a37      	ldr	r2, [pc, #220]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081b7a:	4951      	ldr	r1, [pc, #324]	; (8081cc0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x264>)
 8081b7c:	484f      	ldr	r0, [pc, #316]	; (8081cbc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x260>)
 8081b7e:	f004 fd01 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081b82:	4b50      	ldr	r3, [pc, #320]	; (8081cc4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x268>)
Timer autoSleepTimer(AUTOSLEEP_TIME, autoSleepHandler);
 8081b84:	aa02      	add	r2, sp, #8
 8081b86:	4950      	ldr	r1, [pc, #320]	; (8081cc8 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x26c>)
 8081b88:	9302      	str	r3, [sp, #8]
 8081b8a:	4850      	ldr	r0, [pc, #320]	; (8081ccc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x270>)
 8081b8c:	4623      	mov	r3, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b8e:	9705      	str	r7, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081b90:	9604      	str	r6, [sp, #16]
 8081b92:	f7fe fddb 	bl	808074c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b96:	a802      	add	r0, sp, #8
 8081b98:	f7fe fdae 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8081b9c:	4a2e      	ldr	r2, [pc, #184]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081b9e:	4948      	ldr	r1, [pc, #288]	; (8081cc0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x264>)
 8081ba0:	484a      	ldr	r0, [pc, #296]	; (8081ccc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x270>)
 8081ba2:	f004 fcef 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081ba6:	4b4a      	ldr	r3, [pc, #296]	; (8081cd0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x274>)
Timer watchdogTimer(5000, wd_check_in);
 8081ba8:	aa02      	add	r2, sp, #8
 8081baa:	f241 3188 	movw	r1, #5000	; 0x1388
 8081bae:	9302      	str	r3, [sp, #8]
 8081bb0:	4848      	ldr	r0, [pc, #288]	; (8081cd4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x278>)
 8081bb2:	4623      	mov	r3, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081bb4:	9705      	str	r7, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081bb6:	9604      	str	r6, [sp, #16]
 8081bb8:	f7fe fdc8 	bl	808074c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081bbc:	a802      	add	r0, sp, #8
 8081bbe:	f7fe fd9b 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8081bc2:	4a25      	ldr	r2, [pc, #148]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081bc4:	493e      	ldr	r1, [pc, #248]	; (8081cc0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x264>)
 8081bc6:	4843      	ldr	r0, [pc, #268]	; (8081cd4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x278>)
 8081bc8:	f004 fcdc 	bl	8086584 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081bcc:	4b42      	ldr	r3, [pc, #264]	; (8081cd8 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x27c>)
Timer imuTimer(IMU_PERIOD, imu_update);
 8081bce:	aa02      	add	r2, sp, #8
 8081bd0:	2164      	movs	r1, #100	; 0x64
 8081bd2:	9302      	str	r3, [sp, #8]
 8081bd4:	4841      	ldr	r0, [pc, #260]	; (8081cdc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x280>)
 8081bd6:	4623      	mov	r3, r4
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081bd8:	9705      	str	r7, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081bda:	9604      	str	r6, [sp, #16]
 8081bdc:	f7fe fdb6 	bl	808074c <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081be0:	a802      	add	r0, sp, #8
 8081be2:	f7fe fd89 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 8081be6:	4a1c      	ldr	r2, [pc, #112]	; (8081c58 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1fc>)
 8081be8:	4935      	ldr	r1, [pc, #212]	; (8081cc0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x264>)
 8081bea:	483c      	ldr	r0, [pc, #240]	; (8081cdc <_GLOBAL__sub_I_PUBLISH_PERIOD+0x280>)
 8081bec:	f004 fcca 	bl	8086584 <__aeabi_atexit>
// Timer displayTimer(DISPLAY_PERIOD, display_update);

// Startup options configurtion
#ifdef googlefi
STARTUP(cellular_credentials_set("h2g2", "", "", NULL));
 8081bf0:	4a3b      	ldr	r2, [pc, #236]	; (8081ce0 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x284>)
 8081bf2:	4623      	mov	r3, r4
 8081bf4:	4611      	mov	r1, r2
 8081bf6:	483b      	ldr	r0, [pc, #236]	; (8081ce4 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x288>)
 8081bf8:	f002 fccc 	bl	8084594 <cellular_credentials_set>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081bfc:	4641      	mov	r1, r8
 8081bfe:	4640      	mov	r0, r8
 8081c00:	f002 fb60 	bl	80842c4 <HAL_Feature_Set>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081c04:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081c08:	4d37      	ldr	r5, [pc, #220]	; (8081ce8 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x28c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081c0a:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081c0c:	806b      	strh	r3, [r5, #2]
 8081c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081c12:	702c      	strb	r4, [r5, #0]
 8081c14:	80ab      	strh	r3, [r5, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081c16:	f002 fd25 	bl	8084664 <set_system_mode>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081c1a:	4622      	mov	r2, r4
 8081c1c:	4621      	mov	r1, r4
 8081c1e:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081c20:	9402      	str	r4, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081c22:	f002 fb57 	bl	80842d4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081c26:	9b02      	ldr	r3, [sp, #8]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8081c28:	2b1e      	cmp	r3, #30
 8081c2a:	d104      	bne.n	8081c36 <_GLOBAL__sub_I_PUBLISH_PERIOD+0x1da>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8081c2c:	2303      	movs	r3, #3
 8081c2e:	702b      	strb	r3, [r5, #0]
 8081c30:	2311      	movs	r3, #17
 8081c32:	806c      	strh	r4, [r5, #2]
 8081c34:	80ab      	strh	r3, [r5, #4]
#endif
STARTUP(System.enableFeature(FEATURE_RETAINED_MEMORY));
SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
 8081c36:	2100      	movs	r1, #0
 8081c38:	2001      	movs	r0, #1
 8081c3a:	f002 fd33 	bl	80846a4 <system_thread_set_state>
// checking with wtachdog every 5 sec if cloud connected 
void wd_check_in() {
	if (Particle.connected()) {
		wd.checkin();
	}
 8081c3e:	b006      	add	sp, #24
 8081c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081c44:	20000d10 	.word	0x20000d10
 8081c48:	20000aac 	.word	0x20000aac
 8081c4c:	20000a94 	.word	0x20000a94
 8081c50:	40024000 	.word	0x40024000
 8081c54:	20000cc4 	.word	0x20000cc4
 8081c58:	200008e0 	.word	0x200008e0
 8081c5c:	0808265d 	.word	0x0808265d
 8081c60:	080804a9 	.word	0x080804a9
 8081c64:	080800f1 	.word	0x080800f1
 8081c68:	20000ae0 	.word	0x20000ae0
 8081c6c:	080800ff 	.word	0x080800ff
 8081c70:	20000a08 	.word	0x20000a08
 8081c74:	08081d33 	.word	0x08081d33
 8081c78:	20000ab0 	.word	0x20000ab0
 8081c7c:	20000d14 	.word	0x20000d14
 8081c80:	080856c3 	.word	0x080856c3
 8081c84:	20000a78 	.word	0x20000a78
 8081c88:	080848cd 	.word	0x080848cd
 8081c8c:	20000c48 	.word	0x20000c48
 8081c90:	08080117 	.word	0x08080117
 8081c94:	08080119 	.word	0x08080119
 8081c98:	080800d5 	.word	0x080800d5
 8081c9c:	080800d9 	.word	0x080800d9
 8081ca0:	000493e0 	.word	0x000493e0
 8081ca4:	080864c5 	.word	0x080864c5
 8081ca8:	0808aabe 	.word	0x0808aabe
 8081cac:	08080edb 	.word	0x08080edb
 8081cb0:	20001260 	.word	0x20001260
 8081cb4:	0808070b 	.word	0x0808070b
 8081cb8:	0808047d 	.word	0x0808047d
 8081cbc:	20000ca8 	.word	0x20000ca8
 8081cc0:	080807f9 	.word	0x080807f9
 8081cc4:	080800c9 	.word	0x080800c9
 8081cc8:	000249f0 	.word	0x000249f0
 8081ccc:	200008e8 	.word	0x200008e8
 8081cd0:	08080135 	.word	0x08080135
 8081cd4:	20000c80 	.word	0x20000c80
 8081cd8:	08080151 	.word	0x08080151
 8081cdc:	20000a38 	.word	0x20000a38
 8081ce0:	0808b10e 	.word	0x0808b10e
 8081ce4:	0808aac5 	.word	0x0808aac5
 8081ce8:	20000c70 	.word	0x20000c70

08081cec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 8081cec:	b538      	push	{r3, r4, r5, lr}
 8081cee:	4b0b      	ldr	r3, [pc, #44]	; (8081d1c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081cf0:	6984      	ldr	r4, [r0, #24]
 8081cf2:	4605      	mov	r5, r0
 8081cf4:	6003      	str	r3, [r0, #0]
 8081cf6:	b17c      	cbz	r4, 8081d18 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081cf8:	6863      	ldr	r3, [r4, #4]
 8081cfa:	3b01      	subs	r3, #1
 8081cfc:	6063      	str	r3, [r4, #4]
 8081cfe:	b95b      	cbnz	r3, 8081d18 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8081d00:	6823      	ldr	r3, [r4, #0]
 8081d02:	4620      	mov	r0, r4
 8081d04:	689b      	ldr	r3, [r3, #8]
 8081d06:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081d08:	68a3      	ldr	r3, [r4, #8]
 8081d0a:	3b01      	subs	r3, #1
 8081d0c:	60a3      	str	r3, [r4, #8]
 8081d0e:	b91b      	cbnz	r3, 8081d18 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8081d10:	6823      	ldr	r3, [r4, #0]
 8081d12:	4620      	mov	r0, r4
 8081d14:	68db      	ldr	r3, [r3, #12]
 8081d16:	4798      	blx	r3
 8081d18:	4628      	mov	r0, r5
 8081d1a:	bd38      	pop	{r3, r4, r5, pc}
 8081d1c:	0808b9c0 	.word	0x0808b9c0

08081d20 <_ZN9TCPClientD0Ev>:
 8081d20:	b510      	push	{r4, lr}
 8081d22:	4604      	mov	r4, r0
 8081d24:	f7ff ffe2 	bl	8081cec <_ZN9TCPClientD1Ev>
 8081d28:	4620      	mov	r0, r4
 8081d2a:	f7fe f9b8 	bl	808009e <_ZdlPv>
 8081d2e:	4620      	mov	r0, r4
 8081d30:	bd10      	pop	{r4, pc}

08081d32 <_ZN10UBX_NEOM8ND1Ev>:
    _callback(callback) {

    decode_init();
}

UBX_NEOM8N::~UBX_NEOM8N() {}
 8081d32:	b510      	push	{r4, lr}

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081d34:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8081d38:	4604      	mov	r4, r0
 8081d3a:	b123      	cbz	r3, 8081d46 <_ZN10UBX_NEOM8ND1Ev+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081d3c:	f500 7192 	add.w	r1, r0, #292	; 0x124
 8081d40:	2203      	movs	r2, #3
 8081d42:	4608      	mov	r0, r1
 8081d44:	4798      	blx	r3
 8081d46:	4620      	mov	r0, r4
 8081d48:	bd10      	pop	{r4, pc}

08081d4a <_ZN10UBX_NEOM8N11decode_initEv>:
        break;
    }
}

void UBX_NEOM8N::decode_init() {
    _decode_state = UBX_DECODE_SYNC1;
 8081d4a:	2300      	movs	r3, #0
 8081d4c:	7183      	strb	r3, [r0, #6]
    _rx_ck_a = 0;
 8081d4e:	7403      	strb	r3, [r0, #16]
    _rx_ck_b = 0;
 8081d50:	7443      	strb	r3, [r0, #17]
    _rx_payload_length = 0;
 8081d52:	8183      	strh	r3, [r0, #12]
    _rx_payload_index = 0;
 8081d54:	81c3      	strh	r3, [r0, #14]
 8081d56:	4770      	bx	lr

08081d58 <_ZN10UBX_NEOM8NC1ESt8functionIFvtRK9ubx_buf_tEE>:
#define UBX_TRACE_ASSIST(s, ...)    {Serial.printlnf(s, ## __VA_ARGS__);}

/**** Warning macros, disable to save memory */
#define UBX_WARN(s, ...)        {Serial.printlnf(s, ## __VA_ARGS__);}

UBX_NEOM8N::UBX_NEOM8N(std::function<void(uint16_t, const ubx_buf_t &)> callback) :
 8081d58:	b570      	push	{r4, r5, r6, lr}
 8081d5a:	4604      	mov	r4, r0
 8081d5c:	460d      	mov	r5, r1
    _ack_state(UBX_ACK_IDLE),
    _ack_waiting_msg(0),
    _aop_status(true),
    _last_assistnow_fetch_unixtime(0),
    _assistnow_ip(),
    _callback(callback) {
 8081d5e:	2600      	movs	r6, #0
 8081d60:	2301      	movs	r3, #1
 8081d62:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
 8081d66:	7146      	strb	r6, [r0, #5]
 8081d68:	8246      	strh	r6, [r0, #18]
 8081d6a:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
 8081d6e:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 8081d72:	f004 f8bf 	bl	8085ef4 <_ZN9IPAddressC1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d76:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 8081d7a:	68ab      	ldr	r3, [r5, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081d7c:	b153      	cbz	r3, 8081d94 <_ZN10UBX_NEOM8NC1ESt8functionIFvtRK9ubx_buf_tEE+0x3c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081d7e:	2202      	movs	r2, #2
 8081d80:	4629      	mov	r1, r5
 8081d82:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8081d86:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081d88:	68eb      	ldr	r3, [r5, #12]
 8081d8a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	  _M_manager = __x._M_manager;
 8081d8e:	68ab      	ldr	r3, [r5, #8]
 8081d90:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c

    decode_init();
 8081d94:	4620      	mov	r0, r4
 8081d96:	f7ff ffd8 	bl	8081d4a <_ZN10UBX_NEOM8N11decode_initEv>
}
 8081d9a:	4620      	mov	r0, r4
 8081d9c:	bd70      	pop	{r4, r5, r6, pc}

08081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>:
    _rx_payload_length = 0;
    _rx_payload_index = 0;
}

void UBX_NEOM8N::add_byte_to_checksum(const uint8_t b) {
    _rx_ck_a = _rx_ck_a + b;
 8081d9e:	7c03      	ldrb	r3, [r0, #16]
 8081da0:	4419      	add	r1, r3
    _rx_ck_b = _rx_ck_b + _rx_ck_a;
 8081da2:	7c43      	ldrb	r3, [r0, #17]
    _rx_payload_length = 0;
    _rx_payload_index = 0;
}

void UBX_NEOM8N::add_byte_to_checksum(const uint8_t b) {
    _rx_ck_a = _rx_ck_a + b;
 8081da4:	b2c9      	uxtb	r1, r1
 8081da6:	7401      	strb	r1, [r0, #16]
    _rx_ck_b = _rx_ck_b + _rx_ck_a;
 8081da8:	4419      	add	r1, r3
 8081daa:	7441      	strb	r1, [r0, #17]
 8081dac:	4770      	bx	lr

08081dae <_ZN10UBX_NEOM8N13calc_checksumEPKhtP14ubx_checksum_t>:
}

void UBX_NEOM8N::calc_checksum(const uint8_t *buffer, const uint16_t length, ubx_checksum_t *checksum) {
 8081dae:	b530      	push	{r4, r5, lr}
 8081db0:	460d      	mov	r5, r1
    for (uint16_t i = 0; i < length; i++) {
 8081db2:	1a68      	subs	r0, r5, r1
 8081db4:	b280      	uxth	r0, r0
 8081db6:	4282      	cmp	r2, r0
 8081db8:	d909      	bls.n	8081dce <_ZN10UBX_NEOM8N13calc_checksumEPKhtP14ubx_checksum_t+0x20>
        checksum->ck_a = checksum->ck_a + buffer[i];
 8081dba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8081dbe:	7818      	ldrb	r0, [r3, #0]
 8081dc0:	4420      	add	r0, r4
        checksum->ck_b = checksum->ck_b + checksum->ck_a;
 8081dc2:	785c      	ldrb	r4, [r3, #1]
    _rx_ck_b = _rx_ck_b + _rx_ck_a;
}

void UBX_NEOM8N::calc_checksum(const uint8_t *buffer, const uint16_t length, ubx_checksum_t *checksum) {
    for (uint16_t i = 0; i < length; i++) {
        checksum->ck_a = checksum->ck_a + buffer[i];
 8081dc4:	b2c0      	uxtb	r0, r0
 8081dc6:	7018      	strb	r0, [r3, #0]
        checksum->ck_b = checksum->ck_b + checksum->ck_a;
 8081dc8:	4420      	add	r0, r4
 8081dca:	7058      	strb	r0, [r3, #1]
    _rx_ck_a = _rx_ck_a + b;
    _rx_ck_b = _rx_ck_b + _rx_ck_a;
}

void UBX_NEOM8N::calc_checksum(const uint8_t *buffer, const uint16_t length, ubx_checksum_t *checksum) {
    for (uint16_t i = 0; i < length; i++) {
 8081dcc:	e7f1      	b.n	8081db2 <_ZN10UBX_NEOM8N13calc_checksumEPKhtP14ubx_checksum_t+0x4>
 8081dce:	bd30      	pop	{r4, r5, pc}

08081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>:
    cfg_msg.rate = rate;

    send_message(UBX_MSG_CFG_MSG, (uint8_t *)&cfg_msg, sizeof(cfg_msg));
}

void UBX_NEOM8N::send_message(const uint16_t msg, const uint8_t *payload, const uint16_t length) {
 8081dd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081dd2:	4615      	mov	r5, r2
 8081dd4:	461e      	mov	r6, r3
    ubx_header_t   header = {UBX_SYNC1, UBX_SYNC2};
 8081dd6:	22b5      	movs	r2, #181	; 0xb5
 8081dd8:	2300      	movs	r3, #0
 8081dda:	f88d 2008 	strb.w	r2, [sp, #8]
 8081dde:	2262      	movs	r2, #98	; 0x62
 8081de0:	f88d 2009 	strb.w	r2, [sp, #9]
    ubx_checksum_t checksum = {0, 0};
 8081de4:	f88d 3004 	strb.w	r3, [sp, #4]
 8081de8:	f88d 3005 	strb.w	r3, [sp, #5]

    // Populate header
    header.msg    = msg;
 8081dec:	f8ad 100a 	strh.w	r1, [sp, #10]
    header.length = length;

    // Calculate checksum
    calc_checksum(reinterpret_cast<const uint8_t *>(&header) + 2, sizeof(header) - 2, &checksum); // skip 2 sync bytes
 8081df0:	ab01      	add	r3, sp, #4
 8081df2:	2204      	movs	r2, #4
 8081df4:	f10d 010a 	add.w	r1, sp, #10
    cfg_msg.rate = rate;

    send_message(UBX_MSG_CFG_MSG, (uint8_t *)&cfg_msg, sizeof(cfg_msg));
}

void UBX_NEOM8N::send_message(const uint16_t msg, const uint8_t *payload, const uint16_t length) {
 8081df8:	4604      	mov	r4, r0
    ubx_header_t   header = {UBX_SYNC1, UBX_SYNC2};
    ubx_checksum_t checksum = {0, 0};

    // Populate header
    header.msg    = msg;
    header.length = length;
 8081dfa:	f8ad 600c 	strh.w	r6, [sp, #12]

    // Calculate checksum
    calc_checksum(reinterpret_cast<const uint8_t *>(&header) + 2, sizeof(header) - 2, &checksum); // skip 2 sync bytes
 8081dfe:	f7ff ffd6 	bl	8081dae <_ZN10UBX_NEOM8N13calc_checksumEPKhtP14ubx_checksum_t>

    if (payload != nullptr) {
 8081e02:	b12d      	cbz	r5, 8081e10 <_ZN10UBX_NEOM8N12send_messageEtPKht+0x40>
        calc_checksum(payload, length, &checksum);
 8081e04:	ab01      	add	r3, sp, #4
 8081e06:	4632      	mov	r2, r6
 8081e08:	4629      	mov	r1, r5
 8081e0a:	4620      	mov	r0, r4
 8081e0c:	f7ff ffcf 	bl	8081dae <_ZN10UBX_NEOM8N13calc_checksumEPKhtP14ubx_checksum_t>
    }

    // Send message
    serial->write(reinterpret_cast<const uint8_t *>(&header), sizeof(header));
 8081e10:	6820      	ldr	r0, [r4, #0]
 8081e12:	2206      	movs	r2, #6
 8081e14:	6803      	ldr	r3, [r0, #0]
 8081e16:	a902      	add	r1, sp, #8
 8081e18:	68db      	ldr	r3, [r3, #12]
 8081e1a:	4798      	blx	r3

    if (payload != nullptr) {
 8081e1c:	b12d      	cbz	r5, 8081e2a <_ZN10UBX_NEOM8N12send_messageEtPKht+0x5a>
        serial->write(payload, length);
 8081e1e:	6820      	ldr	r0, [r4, #0]
 8081e20:	4632      	mov	r2, r6
 8081e22:	6803      	ldr	r3, [r0, #0]
 8081e24:	4629      	mov	r1, r5
 8081e26:	68db      	ldr	r3, [r3, #12]
 8081e28:	4798      	blx	r3
    }

    serial->write(reinterpret_cast<const uint8_t *>(&checksum), sizeof(checksum));
 8081e2a:	6820      	ldr	r0, [r4, #0]
 8081e2c:	2202      	movs	r2, #2
 8081e2e:	6803      	ldr	r3, [r0, #0]
 8081e30:	a901      	add	r1, sp, #4
 8081e32:	68db      	ldr	r3, [r3, #12]
 8081e34:	4798      	blx	r3
}
 8081e36:	b004      	add	sp, #16
 8081e38:	bd70      	pop	{r4, r5, r6, pc}

08081e3a <_ZN10UBX_NEOM8N22configure_message_rateEth>:
        checksum->ck_a = checksum->ck_a + buffer[i];
        checksum->ck_b = checksum->ck_b + checksum->ck_a;
    }
}

void UBX_NEOM8N::configure_message_rate(const uint16_t msg, const uint8_t rate) {
 8081e3a:	b507      	push	{r0, r1, r2, lr}
    ubx_payload_tx_cfg_msg_t cfg_msg;   // don't use _buf (allow interleaved operation)

    cfg_msg.msg  = msg;
    cfg_msg.rate = rate;

    send_message(UBX_MSG_CFG_MSG, (uint8_t *)&cfg_msg, sizeof(cfg_msg));
 8081e3c:	2303      	movs	r3, #3
}

void UBX_NEOM8N::configure_message_rate(const uint16_t msg, const uint8_t rate) {
    ubx_payload_tx_cfg_msg_t cfg_msg;   // don't use _buf (allow interleaved operation)

    cfg_msg.msg  = msg;
 8081e3e:	f8ad 1004 	strh.w	r1, [sp, #4]
    cfg_msg.rate = rate;
 8081e42:	f88d 2006 	strb.w	r2, [sp, #6]

    send_message(UBX_MSG_CFG_MSG, (uint8_t *)&cfg_msg, sizeof(cfg_msg));
 8081e46:	f44f 7183 	mov.w	r1, #262	; 0x106
 8081e4a:	aa01      	add	r2, sp, #4
 8081e4c:	f7ff ffc0 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>
}
 8081e50:	b003      	add	sp, #12
 8081e52:	f85d fb04 	ldr.w	pc, [sp], #4

08081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8081e56:	460a      	mov	r2, r1
 8081e58:	2101      	movs	r1, #1
 8081e5a:	f003 b9ff 	b.w	808525c <_ZN5Print11printf_implEbPKcz>
	...

08081e60 <_ZN10UBX_NEOM8N15payload_rx_initEv>:
        break;
    }
}

bool UBX_NEOM8N::payload_rx_init() {
    switch (_rx_msg) {
 8081e60:	f240 3201 	movw	r2, #769	; 0x301
        decode_init();
        break;
    }
}

bool UBX_NEOM8N::payload_rx_init() {
 8081e64:	b508      	push	{r3, lr}
    switch (_rx_msg) {
 8081e66:	8903      	ldrh	r3, [r0, #8]
 8081e68:	4293      	cmp	r3, r2
 8081e6a:	d016      	beq.n	8081e9a <_ZN10UBX_NEOM8N15payload_rx_initEv+0x3a>
 8081e6c:	d806      	bhi.n	8081e7c <_ZN10UBX_NEOM8N15payload_rx_initEv+0x1c>
 8081e6e:	2b05      	cmp	r3, #5
 8081e70:	d016      	beq.n	8081ea0 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x40>
 8081e72:	f240 1205 	movw	r2, #261	; 0x105
 8081e76:	4293      	cmp	r3, r2
 8081e78:	d012      	beq.n	8081ea0 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x40>
 8081e7a:	e014      	b.n	8081ea6 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x46>
 8081e7c:	f240 7201 	movw	r2, #1793	; 0x701
 8081e80:	4293      	cmp	r3, r2
 8081e82:	d004      	beq.n	8081e8e <_ZN10UBX_NEOM8N15payload_rx_initEv+0x2e>
 8081e84:	f246 0201 	movw	r2, #24577	; 0x6001
 8081e88:	4293      	cmp	r3, r2
 8081e8a:	d006      	beq.n	8081e9a <_ZN10UBX_NEOM8N15payload_rx_initEv+0x3a>
 8081e8c:	e00b      	b.n	8081ea6 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x46>
    case UBX_MSG_NAV_PVT:
        if (_rx_payload_length != sizeof(ubx_payload_rx_nav_pvt_t)) {
 8081e8e:	8983      	ldrh	r3, [r0, #12]
 8081e90:	2b5c      	cmp	r3, #92	; 0x5c
            _rx_state = UBX_RXMSG_ERROR_LENGTH;
 8081e92:	bf14      	ite	ne
 8081e94:	2303      	movne	r3, #3
        } else {
            _rx_state = UBX_RXMSG_HANDLE;
 8081e96:	2301      	moveq	r3, #1
 8081e98:	e006      	b.n	8081ea8 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x48>
            _rx_state = UBX_RXMSG_HANDLE;
        }
        break;

    case UBX_MSG_NAV_AOPSTATUS:
        if (_rx_payload_length != sizeof(ubx_payload_rx_nav_aopstatus_t)) {
 8081e9a:	8983      	ldrh	r3, [r0, #12]
 8081e9c:	2b10      	cmp	r3, #16
 8081e9e:	e7f8      	b.n	8081e92 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x32>
        }

        break;

    case UBX_MSG_ACK_NAK:
        if (_rx_payload_length != sizeof(ubx_payload_rx_ack_nak_t)) {
 8081ea0:	8983      	ldrh	r3, [r0, #12]
 8081ea2:	2b02      	cmp	r3, #2
 8081ea4:	e7f5      	b.n	8081e92 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x32>
            _rx_state = UBX_RXMSG_HANDLE;
        }
        break;

    default:
        _rx_state = UBX_RXMSG_DISABLE;  // disable all other messages
 8081ea6:	2302      	movs	r3, #2
 8081ea8:	7283      	strb	r3, [r0, #10]
        break;
    }

    switch (_rx_state) {
 8081eaa:	7a83      	ldrb	r3, [r0, #10]
 8081eac:	2b03      	cmp	r3, #3
 8081eae:	d807      	bhi.n	8081ec0 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x60>
 8081eb0:	e8df f003 	tbb	[pc, r3]
 8081eb4:	020b0d0d 	.word	0x020b0d0d

    case UBX_RXMSG_DISABLE: // disable unexpected messages
        return false;

    case UBX_RXMSG_ERROR_LENGTH:    // error: invalid length
        UBX_WARN("ubx msg invalid len");
 8081eb8:	f004 f8a2 	bl	8086000 <_Z16_fetch_usbserialv>
 8081ebc:	4905      	ldr	r1, [pc, #20]	; (8081ed4 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x74>)
 8081ebe:	e002      	b.n	8081ec6 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x66>
        return false;

    default:    // invalid message state
        UBX_WARN("ubx internal err1");
 8081ec0:	f004 f89e 	bl	8086000 <_Z16_fetch_usbserialv>
 8081ec4:	4904      	ldr	r1, [pc, #16]	; (8081ed8 <_ZN10UBX_NEOM8N15payload_rx_initEv+0x78>)
 8081ec6:	f7ff ffc6 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>
        return false;
 8081eca:	2000      	movs	r0, #0
 8081ecc:	bd08      	pop	{r3, pc}
    }

    switch (_rx_state) {
    case UBX_RXMSG_HANDLE:  // handle message
    case UBX_RXMSG_IGNORE:  // ignore message but don't report error
        return true;
 8081ece:	2001      	movs	r0, #1

    default:    // invalid message state
        UBX_WARN("ubx internal err1");
        return false;
    }
}
 8081ed0:	bd08      	pop	{r3, pc}
 8081ed2:	bf00      	nop
 8081ed4:	0808afc5 	.word	0x0808afc5
 8081ed8:	0808afd9 	.word	0x0808afd9

08081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>:
 8081edc:	4613      	mov	r3, r2
 8081ede:	460a      	mov	r2, r1
 8081ee0:	2101      	movs	r1, #1
 8081ee2:	f003 b9bb 	b.w	808525c <_ZN5Print11printf_implEbPKcz>

08081ee6 <_ZNKSt8functionIFvtRK9ubx_buf_tEEclEtS2_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081ee6:	b507      	push	{r0, r1, r2, lr}
 8081ee8:	f8ad 1006 	strh.w	r1, [sp, #6]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081eec:	6881      	ldr	r1, [r0, #8]
 8081eee:	b909      	cbnz	r1, 8081ef4 <_ZNKSt8functionIFvtRK9ubx_buf_tEEclEtS2_+0xe>
	__throw_bad_function_call();
 8081ef0:	f004 fb4d 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081ef4:	68c3      	ldr	r3, [r0, #12]
 8081ef6:	f10d 0106 	add.w	r1, sp, #6
 8081efa:	4798      	blx	r3
    }
 8081efc:	b003      	add	sp, #12
 8081efe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081f04 <_ZN10UBX_NEOM8N15payload_rx_doneEv>:
bool UBX_NEOM8N::payload_rx_add(const uint8_t b) {
    _buf.raw[_rx_payload_index] = b;
    return (++_rx_payload_index >= _rx_payload_length);
}

void UBX_NEOM8N::payload_rx_done() {
 8081f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // return if no message handled
    if (_rx_state != UBX_RXMSG_HANDLE) {
 8081f06:	7a85      	ldrb	r5, [r0, #10]
bool UBX_NEOM8N::payload_rx_add(const uint8_t b) {
    _buf.raw[_rx_payload_index] = b;
    return (++_rx_payload_index >= _rx_payload_length);
}

void UBX_NEOM8N::payload_rx_done() {
 8081f08:	4604      	mov	r4, r0
    // return if no message handled
    if (_rx_state != UBX_RXMSG_HANDLE) {
 8081f0a:	2d01      	cmp	r5, #1
 8081f0c:	d168      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
        return;
    }

    // handle message
    switch (_rx_msg) {
 8081f0e:	f240 3201 	movw	r2, #769	; 0x301
 8081f12:	8903      	ldrh	r3, [r0, #8]
 8081f14:	4293      	cmp	r3, r2
 8081f16:	d02b      	beq.n	8081f70 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0x6c>
 8081f18:	d806      	bhi.n	8081f28 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0x24>
 8081f1a:	2b05      	cmp	r3, #5
 8081f1c:	d04d      	beq.n	8081fba <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xb6>
 8081f1e:	f240 1205 	movw	r2, #261	; 0x105
 8081f22:	4293      	cmp	r3, r2
 8081f24:	d036      	beq.n	8081f94 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0x90>
 8081f26:	e05b      	b.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
 8081f28:	f240 7201 	movw	r2, #1793	; 0x701
 8081f2c:	4293      	cmp	r3, r2
 8081f2e:	d017      	beq.n	8081f60 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0x5c>
 8081f30:	f246 0201 	movw	r2, #24577	; 0x6001
 8081f34:	4293      	cmp	r3, r2
 8081f36:	d153      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
        UBX_TRACE_RXMSG("[%lu] Rx NAV-STATUS", millis());
        _callback(_rx_msg, _buf);
        break;

    case UBX_MSG_NAV_AOPSTATUS:
        UBX_TRACE_RXMSG("[%lu] Rx NAV-AOPSTATUS %d", millis(), _buf.payload_rx_nav_aopstatus.status);
 8081f38:	f004 f862 	bl	8086000 <_Z16_fetch_usbserialv>
 8081f3c:	4606      	mov	r6, r0
 8081f3e:	f002 f9a1 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081f42:	7e63      	ldrb	r3, [r4, #25]
 8081f44:	4a27      	ldr	r2, [pc, #156]	; (8081fe4 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xe0>)
 8081f46:	9300      	str	r3, [sp, #0]
 8081f48:	4629      	mov	r1, r5
 8081f4a:	4603      	mov	r3, r0
 8081f4c:	4630      	mov	r0, r6
 8081f4e:	f003 f985 	bl	808525c <_ZN5Print11printf_implEbPKcz>
        _aop_status = (_buf.payload_rx_nav_aopstatus.status != 0);
 8081f52:	7e63      	ldrb	r3, [r4, #25]
 8081f54:	3300      	adds	r3, #0
 8081f56:	bf18      	it	ne
 8081f58:	2301      	movne	r3, #1
 8081f5a:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 8081f5e:	e03f      	b.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>

    // handle message
    switch (_rx_msg) {
    case UBX_MSG_NAV_PVT:
        //uncomment to enable log entry for every nav-pvt msg received
        UBX_TRACE_RXMSG("[%lu] Rx NAV-PVT", millis());
 8081f60:	f004 f84e 	bl	8086000 <_Z16_fetch_usbserialv>
 8081f64:	4605      	mov	r5, r0
 8081f66:	f002 f98d 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081f6a:	491f      	ldr	r1, [pc, #124]	; (8081fe8 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xe4>)
 8081f6c:	4602      	mov	r2, r0
 8081f6e:	e006      	b.n	8081f7e <_ZN10UBX_NEOM8N15payload_rx_doneEv+0x7a>
        _callback(_rx_msg, _buf);
        break;

    case UBX_MSG_NAV_STATUS:
        //uncomment to enable log entry for every nav-status msg received
        UBX_TRACE_RXMSG("[%lu] Rx NAV-STATUS", millis());
 8081f70:	f004 f846 	bl	8086000 <_Z16_fetch_usbserialv>
 8081f74:	4605      	mov	r5, r0
 8081f76:	f002 f985 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081f7a:	4602      	mov	r2, r0
 8081f7c:	491b      	ldr	r1, [pc, #108]	; (8081fec <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xe8>)
 8081f7e:	4628      	mov	r0, r5
 8081f80:	f7ff ffac 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
        _callback(_rx_msg, _buf);
 8081f84:	f104 0214 	add.w	r2, r4, #20
 8081f88:	8921      	ldrh	r1, [r4, #8]
 8081f8a:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8081f8e:	f7ff ffaa 	bl	8081ee6 <_ZNKSt8functionIFvtRK9ubx_buf_tEEclEtS2_>
 8081f92:	e025      	b.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
        UBX_TRACE_RXMSG("[%lu] Rx NAV-AOPSTATUS %d", millis(), _buf.payload_rx_nav_aopstatus.status);
        _aop_status = (_buf.payload_rx_nav_aopstatus.status != 0);
        break;

    case UBX_MSG_ACK_ACK:
        UBX_TRACE_RXMSG("[%lu] Rx ACK-ACK", millis());
 8081f94:	f004 f834 	bl	8086000 <_Z16_fetch_usbserialv>
 8081f98:	4605      	mov	r5, r0
 8081f9a:	f002 f973 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081f9e:	4914      	ldr	r1, [pc, #80]	; (8081ff0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xec>)
 8081fa0:	4602      	mov	r2, r0
 8081fa2:	4628      	mov	r0, r5
 8081fa4:	f7ff ff9a 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>

        if ((_ack_state == UBX_ACK_WAITING) && (_buf.payload_rx_ack_ack.msg == _ack_waiting_msg)) {
 8081fa8:	7963      	ldrb	r3, [r4, #5]
 8081faa:	2b01      	cmp	r3, #1
 8081fac:	d118      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
 8081fae:	8aa2      	ldrh	r2, [r4, #20]
 8081fb0:	8a63      	ldrh	r3, [r4, #18]
 8081fb2:	429a      	cmp	r2, r3
 8081fb4:	d114      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
            _ack_state = UBX_ACK_GOT_ACK;
 8081fb6:	2302      	movs	r3, #2
 8081fb8:	e011      	b.n	8081fde <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xda>
        }
        break;

    case UBX_MSG_ACK_NAK:
        UBX_TRACE_RXMSG("[%lu] Rx ACK-NAK", millis());
 8081fba:	f004 f821 	bl	8086000 <_Z16_fetch_usbserialv>
 8081fbe:	4605      	mov	r5, r0
 8081fc0:	f002 f960 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8081fc4:	490b      	ldr	r1, [pc, #44]	; (8081ff4 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xf0>)
 8081fc6:	4602      	mov	r2, r0
 8081fc8:	4628      	mov	r0, r5
 8081fca:	f7ff ff87 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>

        if ((_ack_state == UBX_ACK_WAITING) && (_buf.payload_rx_ack_ack.msg == _ack_waiting_msg)) {
 8081fce:	7963      	ldrb	r3, [r4, #5]
 8081fd0:	2b01      	cmp	r3, #1
 8081fd2:	d105      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
 8081fd4:	8aa2      	ldrh	r2, [r4, #20]
 8081fd6:	8a63      	ldrh	r3, [r4, #18]
 8081fd8:	429a      	cmp	r2, r3
 8081fda:	d101      	bne.n	8081fe0 <_ZN10UBX_NEOM8N15payload_rx_doneEv+0xdc>
            _ack_state = UBX_ACK_GOT_NAK;
 8081fdc:	2303      	movs	r3, #3
 8081fde:	7163      	strb	r3, [r4, #5]
        }
        break;
    }
}
 8081fe0:	b002      	add	sp, #8
 8081fe2:	bd70      	pop	{r4, r5, r6, pc}
 8081fe4:	0808b010 	.word	0x0808b010
 8081fe8:	0808afeb 	.word	0x0808afeb
 8081fec:	0808affc 	.word	0x0808affc
 8081ff0:	0808b02a 	.word	0x0808b02a
 8081ff4:	0808b03b 	.word	0x0808b03b

08081ff8 <_ZN10UBX_NEOM8N10parse_charEh>:
            parse_char(serial->read());
        }
    }
}

void UBX_NEOM8N::parse_char(const uint8_t b) {
 8081ff8:	b510      	push	{r4, lr}
    switch (_decode_state) {
 8081ffa:	7983      	ldrb	r3, [r0, #6]
            parse_char(serial->read());
        }
    }
}

void UBX_NEOM8N::parse_char(const uint8_t b) {
 8081ffc:	4604      	mov	r4, r0
 8081ffe:	460a      	mov	r2, r1
    switch (_decode_state) {
 8082000:	2b08      	cmp	r3, #8
 8082002:	d859      	bhi.n	80820b8 <_ZN10UBX_NEOM8N10parse_charEh+0xc0>
 8082004:	e8df f003 	tbb	[pc, r3]
 8082008:	130d0905 	.word	0x130d0905
 808200c:	4032221c 	.word	0x4032221c
 8082010:	52          	.byte	0x52
 8082011:	00          	.byte	0x00
    /* Expecting Sync1 */
    case UBX_DECODE_SYNC1:
        if (b == UBX_SYNC1) {   // Sync1 found --> expecting Sync2
 8082012:	2ab5      	cmp	r2, #181	; 0xb5
 8082014:	d150      	bne.n	80820b8 <_ZN10UBX_NEOM8N10parse_charEh+0xc0>
            UBX_TRACE_PARSER("A");
            _decode_state = UBX_DECODE_SYNC2;
 8082016:	2301      	movs	r3, #1
 8082018:	e046      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        }
        break;

    /* Expecting Sync2 */
    case UBX_DECODE_SYNC2:
        if (b == UBX_SYNC2) {   // Sync2 found --> expecting Class
 808201a:	2a62      	cmp	r2, #98	; 0x62
 808201c:	d13e      	bne.n	808209c <_ZN10UBX_NEOM8N10parse_charEh+0xa4>
            UBX_TRACE_PARSER("B");
            _decode_state = UBX_DECODE_CLASS;
 808201e:	2302      	movs	r3, #2
 8082020:	e042      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        break;

    /* Expecting Class */
    case UBX_DECODE_CLASS:
        UBX_TRACE_PARSER("C");
        add_byte_to_checksum(b);  // checksum is calculated for everything except Sync and Checksum bytes
 8082022:	4611      	mov	r1, r2
 8082024:	f7ff febb 	bl	8081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>
        _rx_msg = b;
        _decode_state = UBX_DECODE_ID;
 8082028:	2303      	movs	r3, #3

    /* Expecting Class */
    case UBX_DECODE_CLASS:
        UBX_TRACE_PARSER("C");
        add_byte_to_checksum(b);  // checksum is calculated for everything except Sync and Checksum bytes
        _rx_msg = b;
 808202a:	8102      	strh	r2, [r0, #8]
 808202c:	e03c      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        break;

    /* Expecting ID */
    case UBX_DECODE_ID:
        UBX_TRACE_PARSER("D");
        add_byte_to_checksum(b);
 808202e:	4611      	mov	r1, r2
 8082030:	f7ff feb5 	bl	8081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>
        _rx_msg |= b << 8;
 8082034:	8903      	ldrh	r3, [r0, #8]
 8082036:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 808203a:	8102      	strh	r2, [r0, #8]
        _decode_state = UBX_DECODE_LENGTH1;
 808203c:	2304      	movs	r3, #4
 808203e:	e033      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        break;

    /* Expecting first length byte */
    case UBX_DECODE_LENGTH1:
        UBX_TRACE_PARSER("E");
        add_byte_to_checksum(b);
 8082040:	4611      	mov	r1, r2
 8082042:	f7ff feac 	bl	8081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>
        _rx_payload_length = b;
        _decode_state = UBX_DECODE_LENGTH2;
 8082046:	2305      	movs	r3, #5

    /* Expecting first length byte */
    case UBX_DECODE_LENGTH1:
        UBX_TRACE_PARSER("E");
        add_byte_to_checksum(b);
        _rx_payload_length = b;
 8082048:	8182      	strh	r2, [r0, #12]
 808204a:	e02d      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        break;

    /* Expecting second length byte */
    case UBX_DECODE_LENGTH2:
        UBX_TRACE_PARSER("F");
        add_byte_to_checksum(b);
 808204c:	4611      	mov	r1, r2
 808204e:	f7ff fea6 	bl	8081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>
        _rx_payload_length |= b << 8;   // calculate payload size
 8082052:	8983      	ldrh	r3, [r0, #12]
 8082054:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8082058:	8182      	strh	r2, [r0, #12]

        if (payload_rx_init()) {   // start payload reception
 808205a:	f7ff ff01 	bl	8081e60 <_ZN10UBX_NEOM8N15payload_rx_initEv>
 808205e:	b1e8      	cbz	r0, 808209c <_ZN10UBX_NEOM8N10parse_charEh+0xa4>
            _decode_state = (_rx_payload_length > 0) ? UBX_DECODE_PAYLOAD : UBX_DECODE_CHKSUM1;
 8082060:	89a3      	ldrh	r3, [r4, #12]
 8082062:	2b00      	cmp	r3, #0
 8082064:	bf14      	ite	ne
 8082066:	2306      	movne	r3, #6
 8082068:	2307      	moveq	r3, #7
 808206a:	e01d      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        break;

    /* Expecting payload */
    case UBX_DECODE_PAYLOAD:
        UBX_TRACE_PARSER(".");
        add_byte_to_checksum(b);
 808206c:	4611      	mov	r1, r2
 808206e:	f7ff fe96 	bl	8081d9e <_ZN10UBX_NEOM8N20add_byte_to_checksumEh>
        return false;
    }
}

bool UBX_NEOM8N::payload_rx_add(const uint8_t b) {
    _buf.raw[_rx_payload_index] = b;
 8082072:	89c3      	ldrh	r3, [r0, #14]
 8082074:	18c1      	adds	r1, r0, r3
 8082076:	750a      	strb	r2, [r1, #20]
    return (++_rx_payload_index >= _rx_payload_length);
 8082078:	3301      	adds	r3, #1
    /* Expecting payload */
    case UBX_DECODE_PAYLOAD:
        UBX_TRACE_PARSER(".");
        add_byte_to_checksum(b);

        if (payload_rx_add(b)) {
 808207a:	8982      	ldrh	r2, [r0, #12]
    }
}

bool UBX_NEOM8N::payload_rx_add(const uint8_t b) {
    _buf.raw[_rx_payload_index] = b;
    return (++_rx_payload_index >= _rx_payload_length);
 808207c:	b29b      	uxth	r3, r3
    /* Expecting payload */
    case UBX_DECODE_PAYLOAD:
        UBX_TRACE_PARSER(".");
        add_byte_to_checksum(b);

        if (payload_rx_add(b)) {
 808207e:	429a      	cmp	r2, r3
    }
}

bool UBX_NEOM8N::payload_rx_add(const uint8_t b) {
    _buf.raw[_rx_payload_index] = b;
    return (++_rx_payload_index >= _rx_payload_length);
 8082080:	81c3      	strh	r3, [r0, #14]
    /* Expecting payload */
    case UBX_DECODE_PAYLOAD:
        UBX_TRACE_PARSER(".");
        add_byte_to_checksum(b);

        if (payload_rx_add(b)) {
 8082082:	d819      	bhi.n	80820b8 <_ZN10UBX_NEOM8N10parse_charEh+0xc0>
            // payload complete, expecting checksum
            _decode_state = UBX_DECODE_CHKSUM1;
 8082084:	2307      	movs	r3, #7
 8082086:	e00f      	b.n	80820a8 <_ZN10UBX_NEOM8N10parse_charEh+0xb0>
        }
        break;

    /* Expecting first checksum byte */
    case UBX_DECODE_CHKSUM1:
        if (_rx_ck_a != b) {
 8082088:	7c03      	ldrb	r3, [r0, #16]
 808208a:	4293      	cmp	r3, r2
 808208c:	d00b      	beq.n	80820a6 <_ZN10UBX_NEOM8N10parse_charEh+0xae>
            UBX_WARN("ubx checksum err for msg %0.4X", _rx_msg);
 808208e:	f003 ffb7 	bl	8086000 <_Z16_fetch_usbserialv>
 8082092:	8923      	ldrh	r3, [r4, #8]
 8082094:	4a09      	ldr	r2, [pc, #36]	; (80820bc <_ZN10UBX_NEOM8N10parse_charEh+0xc4>)
 8082096:	2101      	movs	r1, #1
 8082098:	f003 f8e0 	bl	808525c <_ZN5Print11printf_implEbPKcz>
            decode_init();
 808209c:	4620      	mov	r0, r4
        }

        decode_init();
        break;
    }
}
 808209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* Expecting first checksum byte */
    case UBX_DECODE_CHKSUM1:
        if (_rx_ck_a != b) {
            UBX_WARN("ubx checksum err for msg %0.4X", _rx_msg);
            decode_init();
 80820a2:	f7ff be52 	b.w	8081d4a <_ZN10UBX_NEOM8N11decode_initEv>
        } else {
            _decode_state = UBX_DECODE_CHKSUM2;
 80820a6:	2308      	movs	r3, #8
 80820a8:	71a3      	strb	r3, [r4, #6]
 80820aa:	bd10      	pop	{r4, pc}
        }
        break;

    /* Expecting second checksum byte */
    case UBX_DECODE_CHKSUM2:
        if (_rx_ck_b != b) {
 80820ac:	7c43      	ldrb	r3, [r0, #17]
 80820ae:	4293      	cmp	r3, r2
 80820b0:	d1ed      	bne.n	808208e <_ZN10UBX_NEOM8N10parse_charEh+0x96>
            UBX_WARN("ubx checksum err for msg %0.4X", _rx_msg);
        } else {
            payload_rx_done();    // finish payload processing
 80820b2:	f7ff ff27 	bl	8081f04 <_ZN10UBX_NEOM8N15payload_rx_doneEv>
 80820b6:	e7f1      	b.n	808209c <_ZN10UBX_NEOM8N10parse_charEh+0xa4>
 80820b8:	bd10      	pop	{r4, pc}
 80820ba:	bf00      	nop
 80820bc:	0808b04c 	.word	0x0808b04c

080820c0 <_ZN10UBX_NEOM8N6updateEv>:
      UBX_WARN("No ack for CFG-CFG");
      return false;
    }
}

void UBX_NEOM8N::update() {
 80820c0:	b510      	push	{r4, lr}
 80820c2:	4604      	mov	r4, r0
    while (serial->available() > 0) {
 80820c4:	6820      	ldr	r0, [r4, #0]
 80820c6:	6803      	ldr	r3, [r0, #0]
 80820c8:	691b      	ldr	r3, [r3, #16]
 80820ca:	4798      	blx	r3
 80820cc:	2800      	cmp	r0, #0
 80820ce:	dd08      	ble.n	80820e2 <_ZN10UBX_NEOM8N6updateEv+0x22>
		parse_char(serial->read());
 80820d0:	6820      	ldr	r0, [r4, #0]
 80820d2:	6803      	ldr	r3, [r0, #0]
 80820d4:	695b      	ldr	r3, [r3, #20]
 80820d6:	4798      	blx	r3
 80820d8:	b2c1      	uxtb	r1, r0
 80820da:	4620      	mov	r0, r4
 80820dc:	f7ff ff8c 	bl	8081ff8 <_ZN10UBX_NEOM8N10parse_charEh>
      return false;
    }
}

void UBX_NEOM8N::update() {
    while (serial->available() > 0) {
 80820e0:	e7f0      	b.n	80820c4 <_ZN10UBX_NEOM8N6updateEv+0x4>
 80820e2:	bd10      	pop	{r4, pc}

080820e4 <_ZN10UBX_NEOM8N6assistEv>:
    _buf.payload_tx_cfg_rst.resetMode = 0x02;

    send_message(UBX_MSG_CFG_RST, _buf.raw, sizeof(_buf.payload_tx_cfg_rst));
}

void UBX_NEOM8N::assist() {
 80820e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80820e8:	b08c      	sub	sp, #48	; 0x30
 80820ea:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80820ec:	f002 fb58 	bl	80847a0 <spark_cloud_flag_connected>
    if (!Particle.connected()) return;
 80820f0:	2800      	cmp	r0, #0
 80820f2:	f000 80fb 	beq.w	80822ec <_ZN10UBX_NEOM8N6assistEv+0x208>

    if (_last_assistnow_fetch_unixtime == 0 || Time.now() > _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S) {
 80820f6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80820fa:	b13b      	cbz	r3, 808210c <_ZN10UBX_NEOM8N6assistEv+0x28>
 80820fc:	f003 fa69 	bl	80855d2 <_ZN9TimeClass3nowEv>
 8082100:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8082104:	331e      	adds	r3, #30
 8082106:	4298      	cmp	r0, r3
 8082108:	f340 80f0 	ble.w	80822ec <_ZN10UBX_NEOM8N6assistEv+0x208>
        UBX_TRACE_ASSIST("[%lu] Requesting AssistNow Online.", millis());
 808210c:	f003 ff78 	bl	8086000 <_Z16_fetch_usbserialv>
 8082110:	4605      	mov	r5, r0
 8082112:	f002 f8b7 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>

        if (!_assistnow_ip) {
 8082116:	f504 778e 	add.w	r7, r4, #284	; 0x11c

void UBX_NEOM8N::assist() {
    if (!Particle.connected()) return;

    if (_last_assistnow_fetch_unixtime == 0 || Time.now() > _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S) {
        UBX_TRACE_ASSIST("[%lu] Requesting AssistNow Online.", millis());
 808211a:	4602      	mov	r2, r0
 808211c:	4975      	ldr	r1, [pc, #468]	; (80822f4 <_ZN10UBX_NEOM8N6assistEv+0x210>)
 808211e:	4628      	mov	r0, r5
 8082120:	f7ff fedc 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8082124:	4638      	mov	r0, r7
 8082126:	f003 fefb 	bl	8085f20 <_ZNK9IPAddresscvbEv>

        if (!_assistnow_ip) {
 808212a:	4605      	mov	r5, r0
 808212c:	bb00      	cbnz	r0, 8082170 <_ZN10UBX_NEOM8N6assistEv+0x8c>
            UBX_TRACE_ASSIST("[%lu] Resolving AssistNow domain.", millis());
 808212e:	f003 ff67 	bl	8086000 <_Z16_fetch_usbserialv>
 8082132:	4606      	mov	r6, r0
 8082134:	f002 f8a6 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082138:	496f      	ldr	r1, [pc, #444]	; (80822f8 <_ZN10UBX_NEOM8N6assistEv+0x214>)
 808213a:	4602      	mov	r2, r0
 808213c:	4630      	mov	r0, r6
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808213e:	ae0c      	add	r6, sp, #48	; 0x30
 8082140:	f7ff fecc 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
 8082144:	f846 5d24 	str.w	r5, [r6, #-36]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082148:	462b      	mov	r3, r5
 808214a:	9500      	str	r5, [sp, #0]
 808214c:	4632      	mov	r2, r6
 808214e:	2120      	movs	r1, #32
 8082150:	486a      	ldr	r0, [pc, #424]	; (80822fc <_ZN10UBX_NEOM8N6assistEv+0x218>)
 8082152:	f002 fa2f 	bl	80845b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082156:	b120      	cbz	r0, 8082162 <_ZN10UBX_NEOM8N6assistEv+0x7e>
 8082158:	4629      	mov	r1, r5
 808215a:	a805      	add	r0, sp, #20
 808215c:	f003 feda 	bl	8085f14 <_ZN9IPAddressC1Em>
 8082160:	e003      	b.n	808216a <_ZN10UBX_NEOM8N6assistEv+0x86>
 8082162:	4631      	mov	r1, r6
 8082164:	a805      	add	r0, sp, #20
 8082166:	f003 fecd 	bl	8085f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808216a:	9b06      	ldr	r3, [sp, #24]
 808216c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
 8082170:	4638      	mov	r0, r7
 8082172:	f003 fed5 	bl	8085f20 <_ZNK9IPAddresscvbEv>
            // photon or redbear's duo
            _assistnow_ip = WiFi.resolve(ASSISTNOW_DOMAIN);
            #endif
        }

        if (_assistnow_ip) {
 8082176:	2800      	cmp	r0, #0
 8082178:	f000 8093 	beq.w	80822a2 <_ZN10UBX_NEOM8N6assistEv+0x1be>
            TCPClient client;
 808217c:	a805      	add	r0, sp, #20
 808217e:	f002 feb3 	bl	8084ee8 <_ZN9TCPClientC1Ev>
            UBX_TRACE_ASSIST("[%lu] Connecting to AssistNow.", millis());
 8082182:	f003 ff3d 	bl	8086000 <_Z16_fetch_usbserialv>
 8082186:	4605      	mov	r5, r0
 8082188:	f002 f87c 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808218c:	495c      	ldr	r1, [pc, #368]	; (8082300 <_ZN10UBX_NEOM8N6assistEv+0x21c>)
 808218e:	4602      	mov	r2, r0
 8082190:	4628      	mov	r0, r5
 8082192:	f7ff fea3 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8082196:	4b5b      	ldr	r3, [pc, #364]	; (8082304 <_ZN10UBX_NEOM8N6assistEv+0x220>)
            if (client.connect(_assistnow_ip, 80)) {
 8082198:	2250      	movs	r2, #80	; 0x50
 808219a:	9303      	str	r3, [sp, #12]
 808219c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80821a0:	a903      	add	r1, sp, #12
 80821a2:	9304      	str	r3, [sp, #16]
 80821a4:	a805      	add	r0, sp, #20
 80821a6:	2300      	movs	r3, #0
 80821a8:	f002 fea8 	bl	8084efc <_ZN9TCPClient7connectE9IPAddresstm>
 80821ac:	2800      	cmp	r0, #0
 80821ae:	d06a      	beq.n	8082286 <_ZN10UBX_NEOM8N6assistEv+0x1a2>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80821b0:	4e55      	ldr	r6, [pc, #340]	; (8082308 <_ZN10UBX_NEOM8N6assistEv+0x224>)
 80821b2:	4d52      	ldr	r5, [pc, #328]	; (80822fc <_ZN10UBX_NEOM8N6assistEv+0x218>)
 80821b4:	4633      	mov	r3, r6
 80821b6:	4a55      	ldr	r2, [pc, #340]	; (808230c <_ZN10UBX_NEOM8N6assistEv+0x228>)
 80821b8:	2100      	movs	r1, #0
 80821ba:	a805      	add	r0, sp, #20
 80821bc:	f003 f84e 	bl	808525c <_ZN5Print11printf_implEbPKcz>
 80821c0:	462b      	mov	r3, r5
 80821c2:	4a53      	ldr	r2, [pc, #332]	; (8082310 <_ZN10UBX_NEOM8N6assistEv+0x22c>)
 80821c4:	2100      	movs	r1, #0
 80821c6:	a805      	add	r0, sp, #20
 80821c8:	f003 f848 	bl	808525c <_ZN5Print11printf_implEbPKcz>
                client.printf(
                    "GET /GetOnlineData.ashx?token=%s;datatype=eph,alm,aux; HTTP/1.1\n",ASSISTNOW_TOKEN);
                client.printf("Host: %s\n\n", ASSISTNOW_DOMAIN);

                UBX_TRACE_ASSIST("[%lu] Sent request:", millis());
 80821cc:	f003 ff18 	bl	8086000 <_Z16_fetch_usbserialv>
 80821d0:	4607      	mov	r7, r0
 80821d2:	f002 f857 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80821d6:	494f      	ldr	r1, [pc, #316]	; (8082314 <_ZN10UBX_NEOM8N6assistEv+0x230>)
 80821d8:	4602      	mov	r2, r0
 80821da:	4638      	mov	r0, r7
 80821dc:	f7ff fe7e 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
                UBX_TRACE_ASSIST("[%lu] GET /GetOnlineData.ashx?"
 80821e0:	f003 ff0e 	bl	8086000 <_Z16_fetch_usbserialv>
 80821e4:	4607      	mov	r7, r0
 80821e6:	f002 f84d 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80821ea:	4a4b      	ldr	r2, [pc, #300]	; (8082318 <_ZN10UBX_NEOM8N6assistEv+0x234>)
 80821ec:	4603      	mov	r3, r0
 80821ee:	2101      	movs	r1, #1
 80821f0:	9600      	str	r6, [sp, #0]
 80821f2:	4638      	mov	r0, r7
 80821f4:	f003 f832 	bl	808525c <_ZN5Print11printf_implEbPKcz>
                                 "token=%s;datatype=eph,alm,aux; HTTP/1.1",
                                 millis(), ASSISTNOW_TOKEN);
                UBX_TRACE_ASSIST("[%lu] Host: %s", millis(), ASSISTNOW_DOMAIN);
 80821f8:	f003 ff02 	bl	8086000 <_Z16_fetch_usbserialv>
 80821fc:	4606      	mov	r6, r0
 80821fe:	f002 f841 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082202:	4a46      	ldr	r2, [pc, #280]	; (808231c <_ZN10UBX_NEOM8N6assistEv+0x238>)
 8082204:	4603      	mov	r3, r0
 8082206:	2101      	movs	r1, #1
 8082208:	9500      	str	r5, [sp, #0]
 808220a:	4630      	mov	r0, r6
 808220c:	f003 f826 	bl	808525c <_ZN5Print11printf_implEbPKcz>

                UBX_TRACE_ASSIST("[%lu] Waiting for AssistNow response.", millis());
 8082210:	f003 fef6 	bl	8086000 <_Z16_fetch_usbserialv>
 8082214:	4605      	mov	r5, r0
 8082216:	f002 f835 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808221a:	4941      	ldr	r1, [pc, #260]	; (8082320 <_ZN10UBX_NEOM8N6assistEv+0x23c>)
 808221c:	4602      	mov	r2, r0
 808221e:	4628      	mov	r0, r5
 8082220:	f7ff fe5c 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
 8082224:	f002 f82e 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
                uint32_t last_received = millis();
                const uint32_t timeout = 10000;
                uint32_t response_size = 0;
                // Find HTTP response body (all content after the first double newline) and forward
                // it to the receiver
                uint8_t num_newlines_seen = 0;
 8082228:	2500      	movs	r5, #0
 808222a:	4680      	mov	r8, r0
                UBX_TRACE_ASSIST("[%lu] Host: %s", millis(), ASSISTNOW_DOMAIN);

                UBX_TRACE_ASSIST("[%lu] Waiting for AssistNow response.", millis());
                uint32_t last_received = millis();
                const uint32_t timeout = 10000;
                uint32_t response_size = 0;
 808222c:	462f      	mov	r7, r5
                // Find HTTP response body (all content after the first double newline) and forward
                // it to the receiver
                uint8_t num_newlines_seen = 0;
                while (client.connected() && millis() < last_received + timeout) {
 808222e:	a805      	add	r0, sp, #20
 8082230:	f002 ff06 	bl	8085040 <_ZN9TCPClient9connectedEv>
 8082234:	2800      	cmp	r0, #0
 8082236:	d03f      	beq.n	80822b8 <_ZN10UBX_NEOM8N6assistEv+0x1d4>
 8082238:	f002 f824 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808223c:	f508 531c 	add.w	r3, r8, #9984	; 0x2700
 8082240:	3310      	adds	r3, #16
 8082242:	4298      	cmp	r0, r3
 8082244:	d238      	bcs.n	80822b8 <_ZN10UBX_NEOM8N6assistEv+0x1d4>
                    while (client.available() > 0) {
 8082246:	a805      	add	r0, sp, #20
 8082248:	f002 fdc0 	bl	8084dcc <_ZN9TCPClient9availableEv>
 808224c:	2800      	cmp	r0, #0
 808224e:	ddee      	ble.n	808222e <_ZN10UBX_NEOM8N6assistEv+0x14a>
 8082250:	f002 f818 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082254:	4680      	mov	r8, r0
                        last_received = millis();
                        char c = client.read();
 8082256:	a805      	add	r0, sp, #20
 8082258:	f002 fd5f 	bl	8084d1a <_ZN9TCPClient4readEv>

                        if (num_newlines_seen != 2) {
 808225c:	2d02      	cmp	r5, #2
                // it to the receiver
                uint8_t num_newlines_seen = 0;
                while (client.connected() && millis() < last_received + timeout) {
                    while (client.available() > 0) {
                        last_received = millis();
                        char c = client.read();
 808225e:	b2c6      	uxtb	r6, r0

                        if (num_newlines_seen != 2) {
 8082260:	d03e      	beq.n	80822e0 <_ZN10UBX_NEOM8N6assistEv+0x1fc>
                            Serial.write(c);
 8082262:	f003 fecd 	bl	8086000 <_Z16_fetch_usbserialv>
 8082266:	6803      	ldr	r3, [r0, #0]
 8082268:	4631      	mov	r1, r6
 808226a:	689b      	ldr	r3, [r3, #8]
 808226c:	4798      	blx	r3
                        }

                        if (num_newlines_seen == 2) {
                            serial->write(c);
                            ++response_size;
                        } else if (c == '\n') {
 808226e:	2e0a      	cmp	r6, #10
 8082270:	d102      	bne.n	8082278 <_ZN10UBX_NEOM8N6assistEv+0x194>
                            ++num_newlines_seen;
 8082272:	3501      	adds	r5, #1
 8082274:	b2ed      	uxtb	r5, r5
 8082276:	e002      	b.n	808227e <_ZN10UBX_NEOM8N6assistEv+0x19a>
                        } else if (c != '\r') {
                            num_newlines_seen = 0;
 8082278:	2e0d      	cmp	r6, #13
 808227a:	bf18      	it	ne
 808227c:	2500      	movne	r5, #0
                        }

                        // Process messages from receiver to avoid dropping position fixes
                        update();
 808227e:	4620      	mov	r0, r4
 8082280:	f7ff ff1e 	bl	80820c0 <_ZN10UBX_NEOM8N6updateEv>
                uint32_t response_size = 0;
                // Find HTTP response body (all content after the first double newline) and forward
                // it to the receiver
                uint8_t num_newlines_seen = 0;
                while (client.connected() && millis() < last_received + timeout) {
                    while (client.available() > 0) {
 8082284:	e7df      	b.n	8082246 <_ZN10UBX_NEOM8N6assistEv+0x162>
                client.stop();
                UBX_TRACE_ASSIST("[%lu] Forwarded %lu bytes of AssistNow to receiver.", millis(), response_size);

                _last_assistnow_fetch_unixtime = Time.now();
            } else {
                UBX_TRACE_ASSIST("[%lu] Failed to connect to AssistNow.", millis());
 8082286:	f003 febb 	bl	8086000 <_Z16_fetch_usbserialv>
 808228a:	4604      	mov	r4, r0
 808228c:	f001 fffa 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082290:	4924      	ldr	r1, [pc, #144]	; (8082324 <_ZN10UBX_NEOM8N6assistEv+0x240>)
 8082292:	4602      	mov	r2, r0
 8082294:	4620      	mov	r0, r4
 8082296:	f7ff fe21 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
            _assistnow_ip = WiFi.resolve(ASSISTNOW_DOMAIN);
            #endif
        }

        if (_assistnow_ip) {
            TCPClient client;
 808229a:	a805      	add	r0, sp, #20
 808229c:	f7ff fd26 	bl	8081cec <_ZN9TCPClientD1Ev>
 80822a0:	e024      	b.n	80822ec <_ZN10UBX_NEOM8N6assistEv+0x208>
                _last_assistnow_fetch_unixtime = Time.now();
            } else {
                UBX_TRACE_ASSIST("[%lu] Failed to connect to AssistNow.", millis());
            }
        } else {
            UBX_TRACE_ASSIST("[%lu] Failed to resolve AssistNow domain.", millis());
 80822a2:	f003 fead 	bl	8086000 <_Z16_fetch_usbserialv>
 80822a6:	4604      	mov	r4, r0
 80822a8:	f001 ffec 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80822ac:	491e      	ldr	r1, [pc, #120]	; (8082328 <_ZN10UBX_NEOM8N6assistEv+0x244>)
 80822ae:	4602      	mov	r2, r0
 80822b0:	4620      	mov	r0, r4
 80822b2:	f7ff fe13 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
 80822b6:	e019      	b.n	80822ec <_ZN10UBX_NEOM8N6assistEv+0x208>

                        // Process messages from receiver to avoid dropping position fixes
                        update();
                    }
                }
                client.stop();
 80822b8:	a805      	add	r0, sp, #20
 80822ba:	f002 fdc5 	bl	8084e48 <_ZN9TCPClient4stopEv>
                UBX_TRACE_ASSIST("[%lu] Forwarded %lu bytes of AssistNow to receiver.", millis(), response_size);
 80822be:	f003 fe9f 	bl	8086000 <_Z16_fetch_usbserialv>
 80822c2:	4605      	mov	r5, r0
 80822c4:	f001 ffde 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80822c8:	4a18      	ldr	r2, [pc, #96]	; (808232c <_ZN10UBX_NEOM8N6assistEv+0x248>)
 80822ca:	4603      	mov	r3, r0
 80822cc:	2101      	movs	r1, #1
 80822ce:	9700      	str	r7, [sp, #0]
 80822d0:	4628      	mov	r0, r5
 80822d2:	f002 ffc3 	bl	808525c <_ZN5Print11printf_implEbPKcz>

                _last_assistnow_fetch_unixtime = Time.now();
 80822d6:	f003 f97c 	bl	80855d2 <_ZN9TimeClass3nowEv>
 80822da:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 80822de:	e7dc      	b.n	808229a <_ZN10UBX_NEOM8N6assistEv+0x1b6>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 80822e0:	4631      	mov	r1, r6
 80822e2:	6820      	ldr	r0, [r4, #0]
 80822e4:	f003 ff59 	bl	808619a <_ZN11USARTSerial5writeEt>
                            Serial.write(c);
                        }

                        if (num_newlines_seen == 2) {
                            serial->write(c);
                            ++response_size;
 80822e8:	3701      	adds	r7, #1
 80822ea:	e7c8      	b.n	808227e <_ZN10UBX_NEOM8N6assistEv+0x19a>
    }
    /*else {
        UBX_TRACE_ASSIST("[%lu] Skipping AssistNow fetch; %d seconds until next fetch.", millis(),
                         _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S - Time.now());
    }*/
}
 80822ec:	b00c      	add	sp, #48	; 0x30
 80822ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80822f2:	bf00      	nop
 80822f4:	0808b1ee 	.word	0x0808b1ee
 80822f8:	0808b06b 	.word	0x0808b06b
 80822fc:	0808afa4 	.word	0x0808afa4
 8082300:	0808b08d 	.word	0x0808b08d
 8082304:	0808bb48 	.word	0x0808bb48
 8082308:	0808b0ac 	.word	0x0808b0ac
 808230c:	0808b0c3 	.word	0x0808b0c3
 8082310:	0808b104 	.word	0x0808b104
 8082314:	0808b10f 	.word	0x0808b10f
 8082318:	0808b123 	.word	0x0808b123
 808231c:	0808b169 	.word	0x0808b169
 8082320:	0808b178 	.word	0x0808b178
 8082324:	0808b19e 	.word	0x0808b19e
 8082328:	0808b1c4 	.word	0x0808b1c4
 808232c:	0808b211 	.word	0x0808b211

08082330 <_ZN10UBX_NEOM8N7receiveEm>:
    bool ret = (_ack_state == UBX_ACK_GOT_ACK);
    _ack_state = UBX_ACK_IDLE;
    return ret;
}

void UBX_NEOM8N::receive(const uint32_t max_timeout) {
 8082330:	b570      	push	{r4, r5, r6, lr}
 8082332:	4605      	mov	r5, r0
 8082334:	460c      	mov	r4, r1
 8082336:	f001 ffa5 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808233a:	4606      	mov	r6, r0
 808233c:	f001 ffa2 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
    uint32_t timeout = max_timeout;

    uint32_t last_received = millis();
    while (millis() < last_received + timeout) {
 8082340:	19a3      	adds	r3, r4, r6
 8082342:	4298      	cmp	r0, r3
 8082344:	d212      	bcs.n	808236c <_ZN10UBX_NEOM8N7receiveEm+0x3c>
        while (serial->available() > 0) {
 8082346:	6828      	ldr	r0, [r5, #0]
 8082348:	6803      	ldr	r3, [r0, #0]
 808234a:	691b      	ldr	r3, [r3, #16]
 808234c:	4798      	blx	r3
 808234e:	2800      	cmp	r0, #0
 8082350:	ddf4      	ble.n	808233c <_ZN10UBX_NEOM8N7receiveEm+0xc>
 8082352:	f001 ff97 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082356:	4606      	mov	r6, r0
            last_received = millis();
            timeout = UBX_PACKET_TIMEOUT;
            parse_char(serial->read());
 8082358:	6828      	ldr	r0, [r5, #0]

    uint32_t last_received = millis();
    while (millis() < last_received + timeout) {
        while (serial->available() > 0) {
            last_received = millis();
            timeout = UBX_PACKET_TIMEOUT;
 808235a:	240a      	movs	r4, #10
            parse_char(serial->read());
 808235c:	6803      	ldr	r3, [r0, #0]
 808235e:	695b      	ldr	r3, [r3, #20]
 8082360:	4798      	blx	r3
 8082362:	b2c1      	uxtb	r1, r0
 8082364:	4628      	mov	r0, r5
 8082366:	f7ff fe47 	bl	8081ff8 <_ZN10UBX_NEOM8N10parse_charEh>
void UBX_NEOM8N::receive(const uint32_t max_timeout) {
    uint32_t timeout = max_timeout;

    uint32_t last_received = millis();
    while (millis() < last_received + timeout) {
        while (serial->available() > 0) {
 808236a:	e7ec      	b.n	8082346 <_ZN10UBX_NEOM8N7receiveEm+0x16>
 808236c:	bd70      	pop	{r4, r5, r6, pc}

0808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>:
                         _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S - Time.now());
    }*/
}

bool UBX_NEOM8N::wait_for_ack(const uint16_t msg, const uint32_t timeout) {
    _ack_state = UBX_ACK_WAITING;
 808236e:	2301      	movs	r3, #1
        UBX_TRACE_ASSIST("[%lu] Skipping AssistNow fetch; %d seconds until next fetch.", millis(),
                         _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S - Time.now());
    }*/
}

bool UBX_NEOM8N::wait_for_ack(const uint16_t msg, const uint32_t timeout) {
 8082370:	b570      	push	{r4, r5, r6, lr}
    _ack_state = UBX_ACK_WAITING;
 8082372:	7143      	strb	r3, [r0, #5]
    _ack_waiting_msg = msg; // memorize sent msg class&ID for ACK check
 8082374:	8241      	strh	r1, [r0, #18]
        UBX_TRACE_ASSIST("[%lu] Skipping AssistNow fetch; %d seconds until next fetch.", millis(),
                         _last_assistnow_fetch_unixtime + ASSISTNOW_FETCH_INTERVAL_S - Time.now());
    }*/
}

bool UBX_NEOM8N::wait_for_ack(const uint16_t msg, const uint32_t timeout) {
 8082376:	4615      	mov	r5, r2
 8082378:	4604      	mov	r4, r0
 808237a:	f001 ff83 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
    _ack_state = UBX_ACK_WAITING;
    _ack_waiting_msg = msg; // memorize sent msg class&ID for ACK check

    uint32_t time_started = millis();

    while ((_ack_state == UBX_ACK_WAITING) && (millis() < time_started + timeout)) {
 808237e:	182e      	adds	r6, r5, r0
 8082380:	7963      	ldrb	r3, [r4, #5]
 8082382:	2b01      	cmp	r3, #1
 8082384:	d108      	bne.n	8082398 <_ZN10UBX_NEOM8N12wait_for_ackEtm+0x2a>
 8082386:	f001 ff7d 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 808238a:	42b0      	cmp	r0, r6
 808238c:	d204      	bcs.n	8082398 <_ZN10UBX_NEOM8N12wait_for_ackEtm+0x2a>
        receive(timeout);
 808238e:	4629      	mov	r1, r5
 8082390:	4620      	mov	r0, r4
 8082392:	f7ff ffcd 	bl	8082330 <_ZN10UBX_NEOM8N7receiveEm>
    _ack_state = UBX_ACK_WAITING;
    _ack_waiting_msg = msg; // memorize sent msg class&ID for ACK check

    uint32_t time_started = millis();

    while ((_ack_state == UBX_ACK_WAITING) && (millis() < time_started + timeout)) {
 8082396:	e7f3      	b.n	8082380 <_ZN10UBX_NEOM8N12wait_for_ackEtm+0x12>
        receive(timeout);
    }

    bool ret = (_ack_state == UBX_ACK_GOT_ACK);
 8082398:	7960      	ldrb	r0, [r4, #5]
    _ack_state = UBX_ACK_IDLE;
 808239a:	2300      	movs	r3, #0
 808239c:	7163      	strb	r3, [r4, #5]
    return ret;
}
 808239e:	1e83      	subs	r3, r0, #2
 80823a0:	4258      	negs	r0, r3
 80823a2:	4158      	adcs	r0, r3
 80823a4:	bd70      	pop	{r4, r5, r6, pc}

080823a6 <_ZN10UBX_NEOM8N16wait_for_silenceEm>:
            parse_char(serial->read());
        }
    }
}

void UBX_NEOM8N::wait_for_silence(const uint32_t timeout) {
 80823a6:	b570      	push	{r4, r5, r6, lr}
 80823a8:	4604      	mov	r4, r0
 80823aa:	460e      	mov	r6, r1
 80823ac:	f001 ff6a 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80823b0:	4605      	mov	r5, r0
 80823b2:	f001 ff67 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
    uint32_t last_received = millis();
    while (millis() < last_received + timeout) {
 80823b6:	19ab      	adds	r3, r5, r6
 80823b8:	4298      	cmp	r0, r3
 80823ba:	d211      	bcs.n	80823e0 <_ZN10UBX_NEOM8N16wait_for_silenceEm+0x3a>
        while (serial->available() > 0) {
 80823bc:	6820      	ldr	r0, [r4, #0]
 80823be:	6803      	ldr	r3, [r0, #0]
 80823c0:	691b      	ldr	r3, [r3, #16]
 80823c2:	4798      	blx	r3
 80823c4:	2800      	cmp	r0, #0
 80823c6:	ddf4      	ble.n	80823b2 <_ZN10UBX_NEOM8N16wait_for_silenceEm+0xc>
 80823c8:	f001 ff5c 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80823cc:	4605      	mov	r5, r0
            last_received = millis();
            parse_char(serial->read());
 80823ce:	6820      	ldr	r0, [r4, #0]
 80823d0:	6803      	ldr	r3, [r0, #0]
 80823d2:	695b      	ldr	r3, [r3, #20]
 80823d4:	4798      	blx	r3
 80823d6:	b2c1      	uxtb	r1, r0
 80823d8:	4620      	mov	r0, r4
 80823da:	f7ff fe0d 	bl	8081ff8 <_ZN10UBX_NEOM8N10parse_charEh>
}

void UBX_NEOM8N::wait_for_silence(const uint32_t timeout) {
    uint32_t last_received = millis();
    while (millis() < last_received + timeout) {
        while (serial->available() > 0) {
 80823de:	e7ed      	b.n	80823bc <_ZN10UBX_NEOM8N16wait_for_silenceEm+0x16>
 80823e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080823e4 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh>:
    decode_init();
}

UBX_NEOM8N::~UBX_NEOM8N() {}

bool UBX_NEOM8N::start(USARTSerial *uart, uint32_t baud, uint8_t en_pin) {
 80823e4:	b538      	push	{r3, r4, r5, lr}
 80823e6:	4604      	mov	r4, r0
 80823e8:	461d      	mov	r5, r3
 80823ea:	4608      	mov	r0, r1
    // Start receiver
    serial = uart;
    serial->begin(baud);

    pinMode(en_pin, OUTPUT);
 80823ec:	b2ad      	uxth	r5, r5

UBX_NEOM8N::~UBX_NEOM8N() {}

bool UBX_NEOM8N::start(USARTSerial *uart, uint32_t baud, uint8_t en_pin) {
    // Start receiver
    serial = uart;
 80823ee:	6021      	str	r1, [r4, #0]
    serial->begin(baud);
 80823f0:	4611      	mov	r1, r2
 80823f2:	f003 fecf 	bl	8086194 <_ZN11USARTSerial5beginEm>

    pinMode(en_pin, OUTPUT);
 80823f6:	4628      	mov	r0, r5
 80823f8:	2101      	movs	r1, #1
 80823fa:	f003 ffab 	bl	8086354 <pinMode>
    digitalWrite(en_pin, HIGH); //using a modified Pololu S7V8F3 voltage regulator
 80823fe:	2101      	movs	r1, #1
 8082400:	4628      	mov	r0, r5
 8082402:	f003 ffb8 	bl	8086376 <digitalWrite>

    /* flush input and wait for at least 100 ms silence */
    decode_init();
 8082406:	4620      	mov	r0, r4
 8082408:	f7ff fc9f 	bl	8081d4a <_ZN10UBX_NEOM8N11decode_initEv>
    wait_for_silence(100);
 808240c:	2164      	movs	r1, #100	; 0x64
 808240e:	4620      	mov	r0, r4
 8082410:	f7ff ffc9 	bl	80823a6 <_ZN10UBX_NEOM8N16wait_for_silenceEm>
    decode_init();

    /* Send a CFG-PRT message to set the UBX protocol for in and out */
    memset(&_buf.payload_tx_cfg_prt, 0, sizeof(_buf.payload_tx_cfg_prt));
 8082414:	f104 0514 	add.w	r5, r4, #20
    digitalWrite(en_pin, HIGH); //using a modified Pololu S7V8F3 voltage regulator

    /* flush input and wait for at least 100 ms silence */
    decode_init();
    wait_for_silence(100);
    decode_init();
 8082418:	4620      	mov	r0, r4
 808241a:	f7ff fc96 	bl	8081d4a <_ZN10UBX_NEOM8N11decode_initEv>

    /* Send a CFG-PRT message to set the UBX protocol for in and out */
    memset(&_buf.payload_tx_cfg_prt, 0, sizeof(_buf.payload_tx_cfg_prt));
 808241e:	2214      	movs	r2, #20
 8082420:	2100      	movs	r1, #0
 8082422:	4628      	mov	r0, r5
 8082424:	f007 f81a 	bl	808945c <memset>
    _buf.payload_tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
 8082428:	2301      	movs	r3, #1
    _buf.payload_tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
 808242a:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
    wait_for_silence(100);
    decode_init();

    /* Send a CFG-PRT message to set the UBX protocol for in and out */
    memset(&_buf.payload_tx_cfg_prt, 0, sizeof(_buf.payload_tx_cfg_prt));
    _buf.payload_tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
 808242e:	7523      	strb	r3, [r4, #20]
    _buf.payload_tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
 8082430:	61a2      	str	r2, [r4, #24]
    _buf.payload_tx_cfg_prt.baudRate     = UBX_TX_CFG_PRT_BAUDRATE;
    _buf.payload_tx_cfg_prt.inProtoMask  = UBX_TX_CFG_PRT_INPROTOMASK;
 8082432:	8423      	strh	r3, [r4, #32]

    /* Send a CFG-PRT message to set the UBX protocol for in and out */
    memset(&_buf.payload_tx_cfg_prt, 0, sizeof(_buf.payload_tx_cfg_prt));
    _buf.payload_tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
    _buf.payload_tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
    _buf.payload_tx_cfg_prt.baudRate     = UBX_TX_CFG_PRT_BAUDRATE;
 8082434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    _buf.payload_tx_cfg_prt.inProtoMask  = UBX_TX_CFG_PRT_INPROTOMASK;
    _buf.payload_tx_cfg_prt.outProtoMask = UBX_TX_CFG_PRT_OUTPROTOMASK;
 8082438:	2303      	movs	r3, #3

    /* Send a CFG-PRT message to set the UBX protocol for in and out */
    memset(&_buf.payload_tx_cfg_prt, 0, sizeof(_buf.payload_tx_cfg_prt));
    _buf.payload_tx_cfg_prt.portID       = UBX_TX_CFG_PRT_PORTID;
    _buf.payload_tx_cfg_prt.mode         = UBX_TX_CFG_PRT_MODE;
    _buf.payload_tx_cfg_prt.baudRate     = UBX_TX_CFG_PRT_BAUDRATE;
 808243a:	61e2      	str	r2, [r4, #28]
    _buf.payload_tx_cfg_prt.inProtoMask  = UBX_TX_CFG_PRT_INPROTOMASK;
    _buf.payload_tx_cfg_prt.outProtoMask = UBX_TX_CFG_PRT_OUTPROTOMASK;
 808243c:	8463      	strh	r3, [r4, #34]	; 0x22
    send_message(UBX_MSG_CFG_PRT, _buf.raw, sizeof(_buf.payload_tx_cfg_prt));
 808243e:	462a      	mov	r2, r5
 8082440:	2314      	movs	r3, #20
 8082442:	2106      	movs	r1, #6
 8082444:	4620      	mov	r0, r4
 8082446:	f7ff fcc3 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>

    wait_for_ack(UBX_MSG_CFG_PRT, UBX_CONFIG_TIMEOUT); // no ack expected
 808244a:	22c8      	movs	r2, #200	; 0xc8
 808244c:	2106      	movs	r1, #6
 808244e:	4620      	mov	r0, r4
 8082450:	f7ff ff8d 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>

    /* Send a CFG-PM2 message ((to limit peak current: disabled) */
    memset(&_buf.payload_tx_cfg_pm2, 0, sizeof(_buf.payload_tx_cfg_pm2));
 8082454:	2230      	movs	r2, #48	; 0x30
 8082456:	2100      	movs	r1, #0
 8082458:	4628      	mov	r0, r5
 808245a:	f006 ffff 	bl	808945c <memset>
    _buf.payload_tx_cfg_pm2.version = 0x02;
 808245e:	2302      	movs	r3, #2
 8082460:	7523      	strb	r3, [r4, #20]
    _buf.payload_tx_cfg_pm2.flags = 0x00021000; // not limiting current. To limit: 0x00021100
 8082462:	f44f 3304 	mov.w	r3, #135168	; 0x21000
 8082466:	61a3      	str	r3, [r4, #24]
    _buf.payload_tx_cfg_pm2.updatePeriod = 1000; // update every 1000ms
 8082468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808246c:	61e3      	str	r3, [r4, #28]
    _buf.payload_tx_cfg_pm2.searchPeriod = 10000;// retry after 10s if acquisition fails
 808246e:	f242 7310 	movw	r3, #10000	; 0x2710
    send_message(UBX_MSG_CFG_PM2, _buf.raw, sizeof(_buf.payload_tx_cfg_pm2));
 8082472:	462a      	mov	r2, r5
    /* Send a CFG-PM2 message ((to limit peak current: disabled) */
    memset(&_buf.payload_tx_cfg_pm2, 0, sizeof(_buf.payload_tx_cfg_pm2));
    _buf.payload_tx_cfg_pm2.version = 0x02;
    _buf.payload_tx_cfg_pm2.flags = 0x00021000; // not limiting current. To limit: 0x00021100
    _buf.payload_tx_cfg_pm2.updatePeriod = 1000; // update every 1000ms
    _buf.payload_tx_cfg_pm2.searchPeriod = 10000;// retry after 10s if acquisition fails
 8082474:	6223      	str	r3, [r4, #32]
    send_message(UBX_MSG_CFG_PM2, _buf.raw, sizeof(_buf.payload_tx_cfg_pm2));
 8082476:	f643 3106 	movw	r1, #15110	; 0x3b06
 808247a:	4620      	mov	r0, r4
 808247c:	2330      	movs	r3, #48	; 0x30
 808247e:	f7ff fca7 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>

    if (!wait_for_ack(UBX_MSG_CFG_PM2, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-PM2");
 8082482:	22c8      	movs	r2, #200	; 0xc8
 8082484:	f643 3106 	movw	r1, #15110	; 0x3b06
 8082488:	4620      	mov	r0, r4
 808248a:	f7ff ff70 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 808248e:	b920      	cbnz	r0, 808249a <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0xb6>
 8082490:	f003 fdb6 	bl	8086000 <_Z16_fetch_usbserialv>
 8082494:	493f      	ldr	r1, [pc, #252]	; (8082594 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1b0>)
 8082496:	f7ff fcde 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>


    /* Send a CFG-RATE message to define update rate */
    memset(&_buf.payload_tx_cfg_rate, 0, sizeof(_buf.payload_tx_cfg_rate));
 808249a:	2300      	movs	r3, #0
    _buf.payload_tx_cfg_rate.measRate   = UBX_TX_CFG_RATE_MEASINTERVAL;
 808249c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

    if (!wait_for_ack(UBX_MSG_CFG_PM2, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-PM2");


    /* Send a CFG-RATE message to define update rate */
    memset(&_buf.payload_tx_cfg_rate, 0, sizeof(_buf.payload_tx_cfg_rate));
 80824a0:	80ab      	strh	r3, [r5, #4]
    _buf.payload_tx_cfg_rate.measRate   = UBX_TX_CFG_RATE_MEASINTERVAL;
 80824a2:	82a2      	strh	r2, [r4, #20]
    _buf.payload_tx_cfg_rate.navRate    = UBX_TX_CFG_RATE_NAVRATE;
 80824a4:	2201      	movs	r2, #1
 80824a6:	82e2      	strh	r2, [r4, #22]
    _buf.payload_tx_cfg_rate.timeRef    = UBX_TX_CFG_RATE_TIMEREF;
 80824a8:	8323      	strh	r3, [r4, #24]
    send_message(UBX_MSG_CFG_RATE, _buf.raw, sizeof(_buf.payload_tx_cfg_rate));
 80824aa:	462a      	mov	r2, r5
 80824ac:	f640 0106 	movw	r1, #2054	; 0x806
 80824b0:	4620      	mov	r0, r4
 80824b2:	2306      	movs	r3, #6
 80824b4:	f7ff fc8c 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>

    if (!wait_for_ack(UBX_MSG_CFG_RATE, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-RATE");
 80824b8:	22c8      	movs	r2, #200	; 0xc8
 80824ba:	f640 0106 	movw	r1, #2054	; 0x806
 80824be:	4620      	mov	r0, r4
 80824c0:	f7ff ff55 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 80824c4:	b920      	cbnz	r0, 80824d0 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0xec>
 80824c6:	f003 fd9b 	bl	8086000 <_Z16_fetch_usbserialv>
 80824ca:	4933      	ldr	r1, [pc, #204]	; (8082598 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1b4>)
 80824cc:	f7ff fcc3 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    /* send a NAV5 message to set the options for the internal filter */
    memset(&_buf.payload_tx_cfg_nav5, 0, sizeof(_buf.payload_tx_cfg_nav5));
 80824d0:	2224      	movs	r2, #36	; 0x24
 80824d2:	2100      	movs	r1, #0
 80824d4:	4628      	mov	r0, r5
 80824d6:	f006 ffc1 	bl	808945c <memset>
    _buf.payload_tx_cfg_nav5.mask       = UBX_TX_CFG_NAV5_MASK;
 80824da:	2305      	movs	r3, #5
 80824dc:	82a3      	strh	r3, [r4, #20]
    _buf.payload_tx_cfg_nav5.dynModel   = UBX_TX_CFG_NAV5_DYNMODEL;
 80824de:	2300      	movs	r3, #0
 80824e0:	75a3      	strb	r3, [r4, #22]
    _buf.payload_tx_cfg_nav5.fixMode    = UBX_TX_CFG_NAV5_FIXMODE;
 80824e2:	2303      	movs	r3, #3
 80824e4:	75e3      	strb	r3, [r4, #23]
    send_message(UBX_MSG_CFG_NAV5, _buf.raw, sizeof(_buf.payload_tx_cfg_nav5));
 80824e6:	462a      	mov	r2, r5
 80824e8:	f242 4106 	movw	r1, #9222	; 0x2406
 80824ec:	4620      	mov	r0, r4
 80824ee:	2324      	movs	r3, #36	; 0x24
 80824f0:	f7ff fc6e 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>

    if (!wait_for_ack(UBX_MSG_CFG_NAV5, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-NAV5");
 80824f4:	22c8      	movs	r2, #200	; 0xc8
 80824f6:	f242 4106 	movw	r1, #9222	; 0x2406
 80824fa:	4620      	mov	r0, r4
 80824fc:	f7ff ff37 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 8082500:	b920      	cbnz	r0, 808250c <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x128>
 8082502:	f003 fd7d 	bl	8086000 <_Z16_fetch_usbserialv>
 8082506:	4925      	ldr	r1, [pc, #148]	; (808259c <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1b8>)
 8082508:	f7ff fca5 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    /* configure message rates */
    /* the last argument is divisor for measurement rate (set by CFG RATE) */
    configure_message_rate(UBX_MSG_NAV_PVT, 1);   
 808250c:	2201      	movs	r2, #1
 808250e:	f240 7101 	movw	r1, #1793	; 0x701
 8082512:	4620      	mov	r0, r4
 8082514:	f7ff fc91 	bl	8081e3a <_ZN10UBX_NEOM8N22configure_message_rateEth>
    if (!wait_for_ack(UBX_MSG_CFG_MSG, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-MSG NAV-PVT");
 8082518:	22c8      	movs	r2, #200	; 0xc8
 808251a:	f44f 7183 	mov.w	r1, #262	; 0x106
 808251e:	4620      	mov	r0, r4
 8082520:	f7ff ff25 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 8082524:	b920      	cbnz	r0, 8082530 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x14c>
 8082526:	f003 fd6b 	bl	8086000 <_Z16_fetch_usbserialv>
 808252a:	491d      	ldr	r1, [pc, #116]	; (80825a0 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1bc>)
 808252c:	f7ff fc93 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    configure_message_rate(UBX_MSG_NAV_STATUS, 1);
 8082530:	2201      	movs	r2, #1
 8082532:	f240 3101 	movw	r1, #769	; 0x301
 8082536:	4620      	mov	r0, r4
 8082538:	f7ff fc7f 	bl	8081e3a <_ZN10UBX_NEOM8N22configure_message_rateEth>
    if (!wait_for_ack(UBX_MSG_CFG_MSG, UBX_CONFIG_TIMEOUT)) UBX_WARN("No ack for CFG-MSG NAV-STATUS");
 808253c:	22c8      	movs	r2, #200	; 0xc8
 808253e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8082542:	4620      	mov	r0, r4
 8082544:	f7ff ff13 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 8082548:	b920      	cbnz	r0, 8082554 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x170>
 808254a:	f003 fd59 	bl	8086000 <_Z16_fetch_usbserialv>
 808254e:	4915      	ldr	r1, [pc, #84]	; (80825a4 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1c0>)
 8082550:	f7ff fc81 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    // Save configuration to battery-backed RAM
    memset(&_buf.payload_tx_cfg_cfg, 0, sizeof(_buf.payload_tx_cfg_cfg));
 8082554:	220d      	movs	r2, #13
 8082556:	2100      	movs	r1, #0
 8082558:	4628      	mov	r0, r5
 808255a:	f006 ff7f 	bl	808945c <memset>
    _buf.payload_tx_cfg_cfg.saveMask = 0x0000000B; // save ioPort, msgConf, and navConf
 808255e:	230b      	movs	r3, #11
 8082560:	61a3      	str	r3, [r4, #24]
    _buf.payload_tx_cfg_cfg.deviceMask = 0x01; // save to BBR
 8082562:	2301      	movs	r3, #1
 8082564:	f884 3020 	strb.w	r3, [r4, #32]
    send_message(UBX_MSG_CFG_CFG, _buf.raw, sizeof(_buf.payload_tx_cfg_cfg));
 8082568:	4620      	mov	r0, r4
 808256a:	230d      	movs	r3, #13
 808256c:	462a      	mov	r2, r5
 808256e:	f640 1106 	movw	r1, #2310	; 0x906
 8082572:	f7ff fc2d 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>
    if (wait_for_ack(UBX_MSG_CFG_CFG, UBX_CONFIG_TIMEOUT)) {
 8082576:	4620      	mov	r0, r4
 8082578:	22c8      	movs	r2, #200	; 0xc8
 808257a:	f640 1106 	movw	r1, #2310	; 0x906
 808257e:	f7ff fef6 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 8082582:	4604      	mov	r4, r0
 8082584:	b920      	cbnz	r0, 8082590 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1ac>
      return true;
    } else {
      UBX_WARN("No ack for CFG-CFG");
 8082586:	f003 fd3b 	bl	8086000 <_Z16_fetch_usbserialv>
 808258a:	4907      	ldr	r1, [pc, #28]	; (80825a8 <_ZN10UBX_NEOM8N5startEP11USARTSerialmh+0x1c4>)
 808258c:	f7ff fc63 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>
      return false;
    }
}
 8082590:	4620      	mov	r0, r4
 8082592:	bd38      	pop	{r3, r4, r5, pc}
 8082594:	0808b245 	.word	0x0808b245
 8082598:	0808b258 	.word	0x0808b258
 808259c:	0808b26c 	.word	0x0808b26c
 80825a0:	0808b280 	.word	0x0808b280
 80825a4:	0808b29b 	.word	0x0808b29b
 80825a8:	0808b2b9 	.word	0x0808b2b9

080825ac <_ZN10UBX_NEOM8N4stopEv>:
    while (serial->available() > 0) {
		parse_char(serial->read());
	}
}

void UBX_NEOM8N::stop() {
 80825ac:	b538      	push	{r3, r4, r5, lr}
 80825ae:	4604      	mov	r4, r0
    // Reset the AssistNow Autonomous computation status
    _aop_status = true;
 80825b0:	2201      	movs	r2, #1
 80825b2:	f880 2114 	strb.w	r2, [r0, #276]	; 0x114
    // Wait until AssistNow Autonomous computations are done
    configure_message_rate(UBX_MSG_NAV_AOPSTATUS, 1);
 80825b6:	f246 0101 	movw	r1, #24577	; 0x6001
 80825ba:	f7ff fc3e 	bl	8081e3a <_ZN10UBX_NEOM8N22configure_message_rateEth>
    if (!wait_for_ack(UBX_MSG_CFG_MSG, UBX_CONFIG_TIMEOUT)) {
 80825be:	22c8      	movs	r2, #200	; 0xc8
 80825c0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80825c4:	4620      	mov	r0, r4
 80825c6:	f7ff fed2 	bl	808236e <_ZN10UBX_NEOM8N12wait_for_ackEtm>
 80825ca:	b920      	cbnz	r0, 80825d6 <_ZN10UBX_NEOM8N4stopEv+0x2a>
        UBX_WARN("No ack for CFG-MSG NAV-AOPSTATUS");
 80825cc:	f003 fd18 	bl	8086000 <_Z16_fetch_usbserialv>
 80825d0:	4912      	ldr	r1, [pc, #72]	; (808261c <_ZN10UBX_NEOM8N4stopEv+0x70>)
 80825d2:	f7ff fc40 	bl	8081e56 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    }

    while (_aop_status) {
 80825d6:	f894 3114 	ldrb.w	r3, [r4, #276]	; 0x114
 80825da:	b173      	cbz	r3, 80825fa <_ZN10UBX_NEOM8N4stopEv+0x4e>
        UBX_TRACE_CONFIG("[%lu] Waiting for AOP", millis());
 80825dc:	f003 fd10 	bl	8086000 <_Z16_fetch_usbserialv>
 80825e0:	4605      	mov	r5, r0
 80825e2:	f001 fe4f 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 80825e6:	490e      	ldr	r1, [pc, #56]	; (8082620 <_ZN10UBX_NEOM8N4stopEv+0x74>)
 80825e8:	4602      	mov	r2, r0
 80825ea:	4628      	mov	r0, r5
 80825ec:	f7ff fc76 	bl	8081edc <_ZN5Print8printlnfIImEEEjPKcDpT_>
        receive(100);
 80825f0:	2164      	movs	r1, #100	; 0x64
 80825f2:	4620      	mov	r0, r4
 80825f4:	f7ff fe9c 	bl	8082330 <_ZN10UBX_NEOM8N7receiveEm>
    configure_message_rate(UBX_MSG_NAV_AOPSTATUS, 1);
    if (!wait_for_ack(UBX_MSG_CFG_MSG, UBX_CONFIG_TIMEOUT)) {
        UBX_WARN("No ack for CFG-MSG NAV-AOPSTATUS");
    }

    while (_aop_status) {
 80825f8:	e7ed      	b.n	80825d6 <_ZN10UBX_NEOM8N4stopEv+0x2a>
    }

    // Perform a clean shutdown of the receiver by requesting it to back up navigation data to
    // battery-backed RAM and shut down
    memset(&_buf.payload_tx_rxm_pmreq, 0, sizeof(_buf.payload_tx_rxm_pmreq));
    _buf.payload_tx_rxm_pmreq.duration = 0; // infinite duration (until next power on)
 80825fa:	6163      	str	r3, [r4, #20]
    _buf.payload_tx_rxm_pmreq.flags    = 0x02; // go into backup mode
 80825fc:	2302      	movs	r3, #2
 80825fe:	61a3      	str	r3, [r4, #24]

    send_message(UBX_MSG_RXM_PMREQ, _buf.raw, sizeof(_buf.payload_tx_rxm_pmreq));
 8082600:	4620      	mov	r0, r4
 8082602:	2308      	movs	r3, #8
 8082604:	f104 0214 	add.w	r2, r4, #20
 8082608:	f244 1102 	movw	r1, #16642	; 0x4102
 808260c:	f7ff fbe0 	bl	8081dd0 <_ZN10UBX_NEOM8N12send_messageEtPKht>

    // Wait for silence
    wait_for_silence(100);
 8082610:	4620      	mov	r0, r4
}
 8082612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _buf.payload_tx_rxm_pmreq.flags    = 0x02; // go into backup mode

    send_message(UBX_MSG_RXM_PMREQ, _buf.raw, sizeof(_buf.payload_tx_rxm_pmreq));

    // Wait for silence
    wait_for_silence(100);
 8082616:	2164      	movs	r1, #100	; 0x64
 8082618:	f7ff bec5 	b.w	80823a6 <_ZN10UBX_NEOM8N16wait_for_silenceEm>
 808261c:	0808b2cc 	.word	0x0808b2cc
 8082620:	0808b2ed 	.word	0x0808b2ed

08082624 <_GLOBAL__sub_I__ZN10UBX_NEOM8NC2ESt8functionIFvtRK9ubx_buf_tEE>:
 8082624:	f001 bdb6 	b.w	8084194 <HAL_Pin_Map>

08082628 <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082628:	6842      	ldr	r2, [r0, #4]
 808262a:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
 808262c:	f012 0f01 	tst.w	r2, #1
 8082630:	ea4f 0062 	mov.w	r0, r2, asr #1
 8082634:	bf18      	it	ne
 8082636:	580a      	ldrne	r2, [r1, r0]
 8082638:	4408      	add	r0, r1
 808263a:	bf18      	it	ne
 808263c:	58d3      	ldrne	r3, [r2, r3]
 808263e:	4718      	bx	r3

08082640 <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 8082640:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8082642:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
 8082644:	d101      	bne.n	808264a <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 8082646:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
 8082648:	e005      	b.n	8082656 <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808264a:	2a02      	cmp	r2, #2
 808264c:	d103      	bne.n	8082656 <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808264e:	b110      	cbz	r0, 8082656 <_ZNSt17_Function_handlerIFvR17PublishQueueAsyncEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
 8082650:	c903      	ldmia	r1, {r0, r1}
 8082652:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8082656:	2000      	movs	r0, #0
 8082658:	4770      	bx	lr
	...

0808265c <_ZN17PublishQueueAsyncD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(RetainedBufHeader)];
	}
}

PublishQueueAsync::~PublishQueueAsync() {
 808265c:	b538      	push	{r3, r4, r5, lr}
 808265e:	4604      	mov	r4, r0
 8082660:	4b0f      	ldr	r3, [pc, #60]	; (80826a0 <_ZN17PublishQueueAsyncD1Ev+0x44>)
 8082662:	f840 3b28 	str.w	r3, [r0], #40
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082666:	f7fe f847 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 808266a:	68e0      	ldr	r0, [r4, #12]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
 808266c:	b1a8      	cbz	r0, 808269a <_ZN17PublishQueueAsyncD1Ev+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
 808266e:	f001 fe41 	bl	80842f4 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
 8082672:	b990      	cbnz	r0, 808269a <_ZN17PublishQueueAsyncD1Ev+0x3e>
            return;

        if (!exited_) {
 8082674:	7f23      	ldrb	r3, [r4, #28]
 8082676:	b91b      	cbnz	r3, 8082680 <_ZN17PublishQueueAsyncD1Ev+0x24>
 8082678:	68e0      	ldr	r0, [r4, #12]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
 808267a:	b108      	cbz	r0, 8082680 <_ZN17PublishQueueAsyncD1Ev+0x24>
 808267c:	f001 fe4a 	bl	8084314 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
 8082680:	6925      	ldr	r5, [r4, #16]
 8082682:	b13d      	cbz	r5, 8082694 <_ZN17PublishQueueAsyncD1Ev+0x38>
 8082684:	4628      	mov	r0, r5
 8082686:	f7fe f837 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 808268a:	4628      	mov	r0, r5
 808268c:	f7fd fd07 	bl	808009e <_ZdlPv>
            wrapper = NULL;
 8082690:	2300      	movs	r3, #0
 8082692:	6123      	str	r3, [r4, #16]
        }

        os_thread_cleanup(handle);
 8082694:	68e0      	ldr	r0, [r4, #12]
 8082696:	f001 fe45 	bl	8084324 <os_thread_cleanup>

}
 808269a:	4620      	mov	r0, r4
 808269c:	bd38      	pop	{r3, r4, r5, pc}
 808269e:	bf00      	nop
 80826a0:	0808b30c 	.word	0x0808b30c

080826a4 <_ZN17PublishQueueAsyncD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(RetainedBufHeader)];
	}
}

PublishQueueAsync::~PublishQueueAsync() {
 80826a4:	b510      	push	{r4, lr}
 80826a6:	4604      	mov	r4, r0

}
 80826a8:	f7ff ffd8 	bl	808265c <_ZN17PublishQueueAsyncD1Ev>
 80826ac:	4620      	mov	r0, r4
 80826ae:	f7fd fcf6 	bl	808009e <_ZdlPv>
 80826b2:	4620      	mov	r0, r4
 80826b4:	bd10      	pop	{r4, pc}

080826b6 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 80826b6:	b40e      	push	{r1, r2, r3}
 80826b8:	b500      	push	{lr}
 80826ba:	b08c      	sub	sp, #48	; 0x30
 80826bc:	aa0d      	add	r2, sp, #52	; 0x34
 80826be:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80826c2:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826c4:	e88d 0006 	stmia.w	sp, {r1, r2}
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80826c8:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80826ca:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826cc:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80826ce:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826d0:	aa04      	add	r2, sp, #16
 80826d2:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80826d4:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826d6:	f001 ffb5 	bl	8084644 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
 80826da:	b00c      	add	sp, #48	; 0x30
 80826dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80826e0:	b003      	add	sp, #12
 80826e2:	4770      	bx	lr

080826e4 <_ZNK5spark6Logger4infoEPKcz>:

inline void spark::Logger::info(const char *fmt, ...) const {
 80826e4:	b40e      	push	{r1, r2, r3}
 80826e6:	b500      	push	{lr}
 80826e8:	b08c      	sub	sp, #48	; 0x30
 80826ea:	aa0d      	add	r2, sp, #52	; 0x34
 80826ec:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80826f0:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826f2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80826f6:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80826f8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826fa:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80826fc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80826fe:	aa04      	add	r2, sp, #16
 8082700:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8082702:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8082704:	f001 ff9e 	bl	8084644 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8082708:	b00c      	add	sp, #48	; 0x30
 808270a:	f85d eb04 	ldr.w	lr, [sp], #4
 808270e:	b003      	add	sp, #12
 8082710:	4770      	bx	lr

08082712 <_ZN17PublishQueueAsync12getQueueSizeEv>:
	return result;
}

uint16_t PublishQueueAsync::getQueueSize() {
	return numEventsInQueue;
}
 8082712:	8940      	ldrh	r0, [r0, #10]
 8082714:	4770      	bx	lr

08082716 <_ZN17PublishQueueAsync9skipEventEPh>:

uint8_t *PublishQueueAsync::skipEvent(uint8_t *start) {
 8082716:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(EventData);
 8082718:	f101 0408 	add.w	r4, r1, #8

uint16_t PublishQueueAsync::getQueueSize() {
	return numEventsInQueue;
}

uint8_t *PublishQueueAsync::skipEvent(uint8_t *start) {
 808271c:	4605      	mov	r5, r0
	start += sizeof(EventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 808271e:	4620      	mov	r0, r4
 8082720:	f007 fc0e 	bl	8089f40 <strlen>
 8082724:	3001      	adds	r0, #1
 8082726:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8082728:	4620      	mov	r0, r4
 808272a:	f007 fc09 	bl	8089f40 <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
 808272e:	686b      	ldr	r3, [r5, #4]
}

uint8_t *PublishQueueAsync::skipEvent(uint8_t *start) {
	start += sizeof(EventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8082730:	3001      	adds	r0, #1
 8082732:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
 8082734:	1ac3      	subs	r3, r0, r3
 8082736:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
 808273a:	bf1c      	itt	ne
 808273c:	f1c3 0304 	rsbne	r3, r3, #4
 8082740:	18c0      	addne	r0, r0, r3
	}


	return start;
}
 8082742:	bd38      	pop	{r3, r4, r5, pc}

08082744 <_ZN17PublishQueueAsyncC1EPht>:
	// padded to 4-byte alignment
} EventData;

static Logger log("app.pubq");

PublishQueueAsync::PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 8082744:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8082748:	460e      	mov	r6, r1
 808274a:	4604      	mov	r4, r0
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize),
		thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048) {
 808274c:	4b26      	ldr	r3, [pc, #152]	; (80827e8 <_ZN17PublishQueueAsyncC1EPht+0xa4>)
 808274e:	2500      	movs	r5, #0
 8082750:	e880 0048 	stmia.w	r0, {r3, r6}

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
 8082754:	4b25      	ldr	r3, [pc, #148]	; (80827ec <_ZN17PublishQueueAsyncC1EPht+0xa8>)
 8082756:	8122      	strh	r2, [r4, #8]
 8082758:	300c      	adds	r0, #12
 808275a:	f820 5c02 	strh.w	r5, [r0, #-2]
 808275e:	6163      	str	r3, [r4, #20]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8082760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8082764:	e88d 0009 	stmia.w	sp, {r0, r3}
	// padded to 4-byte alignment
} EventData;

static Logger log("app.pubq");

PublishQueueAsync::PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 8082768:	4690      	mov	r8, r2
 808276a:	4b21      	ldr	r3, [pc, #132]	; (80827f0 <_ZN17PublishQueueAsyncC1EPht+0xac>)
 808276c:	2202      	movs	r2, #2

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
 808276e:	60e5      	str	r5, [r4, #12]
 8082770:	6125      	str	r5, [r4, #16]
 8082772:	61a4      	str	r4, [r4, #24]
 8082774:	7725      	strb	r5, [r4, #28]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 8082776:	491f      	ldr	r1, [pc, #124]	; (80827f4 <_ZN17PublishQueueAsyncC1EPht+0xb0>)
 8082778:	f001 fdb4 	bl	80842e4 <os_thread_create>
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize),
		thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048) {
 808277c:	f247 5330 	movw	r3, #30000	; 0x7530

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
	if (hdr->magic == RETAINED_BUF_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8082780:	4637      	mov	r7, r6

static Logger log("app.pubq");

PublishQueueAsync::PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize),
		thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048) {
 8082782:	6263      	str	r3, [r4, #36]	; 0x24
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8082784:	4b1c      	ldr	r3, [pc, #112]	; (80827f8 <_ZN17PublishQueueAsyncC1EPht+0xb4>)
 8082786:	62e5      	str	r5, [r4, #44]	; 0x2c
 8082788:	62a3      	str	r3, [r4, #40]	; 0x28
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808278a:	4b1c      	ldr	r3, [pc, #112]	; (80827fc <_ZN17PublishQueueAsyncC1EPht+0xb8>)
 808278c:	63a5      	str	r5, [r4, #56]	; 0x38
 808278e:	6363      	str	r3, [r4, #52]	; 0x34
	    _M_manager = &_My_handler::_M_manager;
 8082790:	4b1b      	ldr	r3, [pc, #108]	; (8082800 <_ZN17PublishQueueAsyncC1EPht+0xbc>)
 8082792:	63e5      	str	r5, [r4, #60]	; 0x3c
 8082794:	6323      	str	r3, [r4, #48]	; 0x30
 8082796:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
	if (hdr->magic == RETAINED_BUF_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 808279a:	4b1a      	ldr	r3, [pc, #104]	; (8082804 <_ZN17PublishQueueAsyncC1EPht+0xc0>)
 808279c:	f857 2b08 	ldr.w	r2, [r7], #8
 80827a0:	4699      	mov	r9, r3
 80827a2:	429a      	cmp	r2, r3
 80827a4:	d114      	bne.n	80827d0 <_ZN17PublishQueueAsyncC1EPht+0x8c>
 80827a6:	88b3      	ldrh	r3, [r6, #4]
 80827a8:	b29b      	uxth	r3, r3
 80827aa:	4598      	cmp	r8, r3
 80827ac:	d110      	bne.n	80827d0 <_ZN17PublishQueueAsyncC1EPht+0x8c>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 80827ae:	eb06 0a08 	add.w	sl, r6, r8

		nextFree = &retainedBuffer[sizeof(RetainedBufHeader)];
 80827b2:	6227      	str	r7, [r4, #32]
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
 80827b4:	88f3      	ldrh	r3, [r6, #6]
 80827b6:	b2aa      	uxth	r2, r5
 80827b8:	b29b      	uxth	r3, r3
 80827ba:	429a      	cmp	r2, r3
 80827bc:	d20f      	bcs.n	80827de <_ZN17PublishQueueAsyncC1EPht+0x9a>
			nextFree = skipEvent(nextFree);
 80827be:	6a21      	ldr	r1, [r4, #32]
 80827c0:	4620      	mov	r0, r4
 80827c2:	f7ff ffa8 	bl	8082716 <_ZN17PublishQueueAsync9skipEventEPh>
			if (nextFree > end) {
 80827c6:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(RetainedBufHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
 80827c8:	6220      	str	r0, [r4, #32]
 80827ca:	f105 0501 	add.w	r5, r5, #1
			if (nextFree > end) {
 80827ce:	d2f1      	bcs.n	80827b4 <_ZN17PublishQueueAsyncC1EPht+0x70>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = RETAINED_BUF_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
 80827d0:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = RETAINED_BUF_HEADER_MAGIC;
 80827d2:	f8c6 9000 	str.w	r9, [r6]
		hdr->size = retainedBufferSize;
 80827d6:	f8a6 8004 	strh.w	r8, [r6, #4]
		hdr->numEvents = 0;
 80827da:	80f3      	strh	r3, [r6, #6]
		nextFree = &retainedBuffer[sizeof(RetainedBufHeader)];
 80827dc:	6227      	str	r7, [r4, #32]
	}
}
 80827de:	4620      	mov	r0, r4
 80827e0:	b002      	add	sp, #8
 80827e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80827e6:	bf00      	nop
 80827e8:	0808b30c 	.word	0x0808b30c
 80827ec:	080829a3 	.word	0x080829a3
 80827f0:	08080edb 	.word	0x08080edb
 80827f4:	0808b314 	.word	0x0808b314
 80827f8:	080829f5 	.word	0x080829f5
 80827fc:	08082629 	.word	0x08082629
 8082800:	08082641 	.word	0x08082641
 8082804:	d19cab61 	.word	0xd19cab61

08082808 <_ZN17PublishQueueAsync15discardOldEventEb>:

	return start;
}


bool PublishQueueAsync::discardOldEvent(bool secondEvent) {
 8082808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808280c:	4605      	mov	r5, r0
 808280e:	4688      	mov	r8, r1
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8082810:	2100      	movs	r1, #0
 8082812:	4608      	mov	r0, r1
 8082814:	f001 fd8e 	bl	8084334 <os_thread_scheduling>
	// log.info("discardOldEvent secondEvent=%d", secondEvent);
	SINGLE_THREADED_BLOCK() {
		RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
 8082818:	f8d5 9004 	ldr.w	r9, [r5, #4]
		uint8_t *start = &retainedBuffer[sizeof(RetainedBufHeader)];
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 808281c:	892f      	ldrh	r7, [r5, #8]

bool PublishQueueAsync::discardOldEvent(bool secondEvent) {
	// log.info("discardOldEvent secondEvent=%d", secondEvent);
	SINGLE_THREADED_BLOCK() {
		RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
		uint8_t *start = &retainedBuffer[sizeof(RetainedBufHeader)];
 808281e:	f109 0408 	add.w	r4, r9, #8
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 8082822:	444f      	add	r7, r9
 8082824:	f8b9 3006 	ldrh.w	r3, [r9, #6]

		if (secondEvent) {
 8082828:	f1b8 0f00 	cmp.w	r8, #0
 808282c:	d007      	beq.n	808283e <_ZN17PublishQueueAsync15discardOldEventEb+0x36>
			if (hdr->numEvents < 2) {
 808282e:	2b01      	cmp	r3, #1
 8082830:	d92c      	bls.n	808288c <_ZN17PublishQueueAsync15discardOldEventEb+0x84>
				return false;
			}
			start = skipEvent(start);
 8082832:	4621      	mov	r1, r4
 8082834:	4628      	mov	r0, r5
 8082836:	f7ff ff6e 	bl	8082716 <_ZN17PublishQueueAsync9skipEventEPh>
 808283a:	4604      	mov	r4, r0
 808283c:	e000      	b.n	8082840 <_ZN17PublishQueueAsync15discardOldEventEb+0x38>
		}
		else {
			if (hdr->numEvents < 1) {
 808283e:	b32b      	cbz	r3, 808288c <_ZN17PublishQueueAsync15discardOldEventEb+0x84>
				return false;
			}
		}

		// Remove the event at start
		uint8_t *next = skipEvent(start);
 8082840:	4621      	mov	r1, r4
 8082842:	4628      	mov	r0, r5
 8082844:	f7ff ff67 	bl	8082716 <_ZN17PublishQueueAsync9skipEventEPh>
		size_t len = next - start;

		size_t after = end - next;
		if (after > 0) {
 8082848:	1a3a      	subs	r2, r7, r0
				return false;
			}
		}

		// Remove the event at start
		uint8_t *next = skipEvent(start);
 808284a:	4606      	mov	r6, r0
		size_t len = next - start;
 808284c:	ebc4 0a00 	rsb	sl, r4, r0

		size_t after = end - next;
		if (after > 0) {
 8082850:	d003      	beq.n	808285a <_ZN17PublishQueueAsync15discardOldEventEb+0x52>
			// Move events down
			memmove(start, next, after);
 8082852:	4601      	mov	r1, r0
 8082854:	4620      	mov	r0, r4
 8082856:	f006 fde6 	bl	8089426 <memmove>
		}

		nextFree -= len;
 808285a:	6a2b      	ldr	r3, [r5, #32]
		hdr->numEvents--;

		log.trace("discardOldEvent secondEvent=%d start=%lx next=%lx end=%lx numEvents=%u",
				secondEvent, (uint32_t)start, (uint32_t)next, (uint32_t)end, hdr->numEvents);
 808285c:	4642      	mov	r2, r8
		if (after > 0) {
			// Move events down
			memmove(start, next, after);
		}

		nextFree -= len;
 808285e:	ebca 0303 	rsb	r3, sl, r3
 8082862:	622b      	str	r3, [r5, #32]
		hdr->numEvents--;
 8082864:	f8b9 3006 	ldrh.w	r3, [r9, #6]

		log.trace("discardOldEvent secondEvent=%d start=%lx next=%lx end=%lx numEvents=%u",
				secondEvent, (uint32_t)start, (uint32_t)next, (uint32_t)end, hdr->numEvents);
 8082868:	490c      	ldr	r1, [pc, #48]	; (808289c <_ZN17PublishQueueAsync15discardOldEventEb+0x94>)
			// Move events down
			memmove(start, next, after);
		}

		nextFree -= len;
		hdr->numEvents--;
 808286a:	3b01      	subs	r3, #1
 808286c:	b29b      	uxth	r3, r3
 808286e:	f8a9 3006 	strh.w	r3, [r9, #6]

		log.trace("discardOldEvent secondEvent=%d start=%lx next=%lx end=%lx numEvents=%u",
				secondEvent, (uint32_t)start, (uint32_t)next, (uint32_t)end, hdr->numEvents);
 8082872:	480b      	ldr	r0, [pc, #44]	; (80828a0 <_ZN17PublishQueueAsync15discardOldEventEb+0x98>)
 8082874:	9302      	str	r3, [sp, #8]
 8082876:	e88d 00c0 	stmia.w	sp, {r6, r7}
 808287a:	4623      	mov	r3, r4
 808287c:	f7ff ff1b 	bl	80826b6 <_ZNK5spark6Logger5traceEPKcz>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8082880:	2001      	movs	r0, #1
 8082882:	2100      	movs	r1, #0
 8082884:	f001 fd56 	bl	8084334 <os_thread_scheduling>
	}

	return true;
 8082888:	2001      	movs	r0, #1
 808288a:	e004      	b.n	8082896 <_ZN17PublishQueueAsync15discardOldEventEb+0x8e>
 808288c:	2001      	movs	r0, #1
 808288e:	2100      	movs	r1, #0
 8082890:	f001 fd50 	bl	8084334 <os_thread_scheduling>
 8082894:	2000      	movs	r0, #0
}
 8082896:	b004      	add	sp, #16
 8082898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808289c:	0808b326 	.word	0x0808b326
 80828a0:	20000d1c 	.word	0x20000d1c

080828a4 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:

PublishQueueAsync::~PublishQueueAsync() {

}

bool PublishQueueAsync::publish(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80828a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	if (data == NULL) {
		data = "";
 80828a8:	4f33      	ldr	r7, [pc, #204]	; (8082978 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd4>)

PublishQueueAsync::~PublishQueueAsync() {

}

bool PublishQueueAsync::publish(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80828aa:	4605      	mov	r5, r0
	if (data == NULL) {
		data = "";
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(EventData) + strlen(eventName) + strlen(data) + 2;
 80828ac:	4608      	mov	r0, r1
}

bool PublishQueueAsync::publish(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {

	if (data == NULL) {
		data = "";
 80828ae:	2a00      	cmp	r2, #0
 80828b0:	bf18      	it	ne
 80828b2:	4617      	movne	r7, r2

PublishQueueAsync::~PublishQueueAsync() {

}

bool PublishQueueAsync::publish(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80828b4:	469a      	mov	sl, r3
 80828b6:	4688      	mov	r8, r1
	if (data == NULL) {
		data = "";
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(EventData) + strlen(eventName) + strlen(data) + 2;
 80828b8:	f007 fb42 	bl	8089f40 <strlen>
 80828bc:	4604      	mov	r4, r0
 80828be:	4638      	mov	r0, r7
 80828c0:	f007 fb3e 	bl	8089f40 <strlen>
 80828c4:	4420      	add	r0, r4
 80828c6:	f100 040a 	add.w	r4, r0, #10
	if ((size % 4) != 0) {
 80828ca:	07a3      	lsls	r3, r4, #30
		size += 4 - (size % 4);
 80828cc:	bf18      	it	ne
 80828ce:	f024 0403 	bicne.w	r4, r4, #3
 80828d2:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 80828d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80828da:	bf18      	it	ne
 80828dc:	3404      	addne	r4, #4
	}

	log.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
 80828de:	463b      	mov	r3, r7
 80828e0:	9403      	str	r4, [sp, #12]
 80828e2:	9602      	str	r6, [sp, #8]
 80828e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80828e8:	f8cd a000 	str.w	sl, [sp]
 80828ec:	4642      	mov	r2, r8
 80828ee:	4923      	ldr	r1, [pc, #140]	; (808297c <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>)
 80828f0:	4823      	ldr	r0, [pc, #140]	; (8082980 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xdc>)
 80828f2:	f7ff fef7 	bl	80826e4 <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(RetainedBufHeader))) {
 80828f6:	892b      	ldrh	r3, [r5, #8]
 80828f8:	3b08      	subs	r3, #8
 80828fa:	429c      	cmp	r4, r3
 80828fc:	d836      	bhi.n	808296c <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc8>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80828fe:	2100      	movs	r1, #0
 8082900:	4608      	mov	r0, r1
 8082902:	f001 fd17 	bl	8084334 <os_thread_scheduling>
		return false;
	}

	while(true) {
		SINGLE_THREADED_BLOCK() {
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 8082906:	6869      	ldr	r1, [r5, #4]
			if ((size_t)(end - nextFree) >= size) {
 8082908:	892b      	ldrh	r3, [r5, #8]
 808290a:	6a2a      	ldr	r2, [r5, #32]
 808290c:	440b      	add	r3, r1
 808290e:	1a9b      	subs	r3, r3, r2
 8082910:	429c      	cmp	r4, r3
 8082912:	d81d      	bhi.n	8082950 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
				// There is room to fit this
				EventData *eventData = reinterpret_cast<EventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
 8082914:	ea49 0606 	orr.w	r6, r9, r6
		SINGLE_THREADED_BLOCK() {
			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				EventData *eventData = reinterpret_cast<EventData *>(nextFree);
				eventData->ttl = ttl;
 8082918:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
 808291c:	7116      	strb	r6, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
 808291e:	6a2e      	ldr	r6, [r5, #32]
				cp += sizeof(EventData);

				strcpy(cp, eventName);
 8082920:	4641      	mov	r1, r8
				EventData *eventData = reinterpret_cast<EventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();

				char *cp = reinterpret_cast<char *>(nextFree);
				cp += sizeof(EventData);
 8082922:	3608      	adds	r6, #8

				strcpy(cp, eventName);
 8082924:	4630      	mov	r0, r6
 8082926:	f006 fdd3 	bl	80894d0 <strcpy>
				cp += strlen(cp) + 1;
 808292a:	4630      	mov	r0, r6
 808292c:	f007 fb08 	bl	8089f40 <strlen>

				strcpy(cp, data);
 8082930:	3001      	adds	r0, #1
 8082932:	4639      	mov	r1, r7
 8082934:	4430      	add	r0, r6
 8082936:	f006 fdcb 	bl	80894d0 <strcpy>

				nextFree += size;
 808293a:	6a28      	ldr	r0, [r5, #32]

				RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
 808293c:	686a      	ldr	r2, [r5, #4]
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
 808293e:	4404      	add	r4, r0
 8082940:	622c      	str	r4, [r5, #32]

				RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
				hdr->numEvents++;
 8082942:	88d3      	ldrh	r3, [r2, #6]
				numEventsInQueue = hdr->numEvents;
				// log.info("numEvents=%u", hdr->numEvents);
				return true;
 8082944:	2401      	movs	r4, #1
				strcpy(cp, data);

				nextFree += size;

				RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
				hdr->numEvents++;
 8082946:	3301      	adds	r3, #1
 8082948:	b29b      	uxth	r3, r3
 808294a:	80d3      	strh	r3, [r2, #6]
				numEventsInQueue = hdr->numEvents;
 808294c:	816b      	strh	r3, [r5, #10]
				// log.info("numEvents=%u", hdr->numEvents);
				return true;
 808294e:	e008      	b.n	8082962 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xbe>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
 8082950:	88cb      	ldrh	r3, [r1, #6]
 8082952:	2b01      	cmp	r3, #1
 8082954:	d004      	beq.n	8082960 <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xbc>
				return false;
			}

			// Discard the oldest event (false) if we're not currently sending.
			// If we are sending (isSending=true), discard the second oldest event
			discardOldEvent(isSending);
 8082956:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 808295a:	4628      	mov	r0, r5
 808295c:	f7ff ff54 	bl	8082808 <_ZN17PublishQueueAsync15discardOldEventEb>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
 8082960:	2400      	movs	r4, #0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8082962:	2100      	movs	r1, #0
 8082964:	2001      	movs	r0, #1
 8082966:	f001 fce5 	bl	8084334 <os_thread_scheduling>
 808296a:	e000      	b.n	808296e <_ZN17PublishQueueAsync7publishEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xca>
	log.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);

	if  (size > (retainedBufferSize - sizeof(RetainedBufHeader))) {
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
 808296c:	2400      	movs	r4, #0
			return false;
		}
	}

	return true;
}
 808296e:	4620      	mov	r0, r4
 8082970:	b004      	add	sp, #16
 8082972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082976:	bf00      	nop
 8082978:	0808b10e 	.word	0x0808b10e
 808297c:	0808b36d 	.word	0x0808b36d
 8082980:	20000d1c 	.word	0x20000d1c

08082984 <_ZN17PublishQueueAsync14threadFunctionEv>:

	return true;
}


void PublishQueueAsync::threadFunction() {
 8082984:	4604      	mov	r4, r0
 8082986:	b508      	push	{r3, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082988:	f100 0528 	add.w	r5, r0, #40	; 0x28
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808298c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808298e:	b90b      	cbnz	r3, 8082994 <_ZN17PublishQueueAsync14threadFunctionEv+0x10>
	__throw_bad_function_call();
 8082990:	f003 fdfd 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8082996:	4621      	mov	r1, r4
 8082998:	4628      	mov	r0, r5
 808299a:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
 808299c:	f001 fcb2 	bl	8084304 <os_thread_yield>
 80829a0:	e7f4      	b.n	808298c <_ZN17PublishQueueAsync14threadFunctionEv+0x8>

080829a2 <_ZN17PublishQueueAsync20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsync::threadFunctionStatic(void *param) {
 80829a2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
 80829a4:	f7ff ffee 	bl	8082984 <_ZN17PublishQueueAsync14threadFunctionEv>

080829a8 <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 80829a8:	b510      	push	{r4, lr}
 80829aa:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80829ac:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 80829b0:	b086      	sub	sp, #24
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80829b2:	9202      	str	r2, [sp, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80829b4:	68a2      	ldr	r2, [r4, #8]
 80829b6:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80829b8:	ab02      	add	r3, sp, #8
 80829ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80829be:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80829c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80829c6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80829ca:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80829ce:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80829d0:	4a06      	ldr	r2, [pc, #24]	; (80829ec <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
 80829d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80829d6:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80829d8:	68e2      	ldr	r2, [r4, #12]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80829da:	4618      	mov	r0, r3
 80829dc:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80829de:	4a04      	ldr	r2, [pc, #16]	; (80829f0 <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
 80829e0:	60e2      	str	r2, [r4, #12]
 80829e2:	f7fd fe89 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
 80829e6:	4620      	mov	r0, r4
 80829e8:	b006      	add	sp, #24
 80829ea:	bd10      	pop	{r4, pc}
 80829ec:	08082641 	.word	0x08082641
 80829f0:	08082629 	.word	0x08082629

080829f4 <_ZN17PublishQueueAsync10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsync::startState() {
 80829f4:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsync::checkQueueState;
 80829f6:	4b05      	ldr	r3, [pc, #20]	; (8082a0c <_ZN17PublishQueueAsync10startStateEv+0x18>)
 80829f8:	4669      	mov	r1, sp
 80829fa:	9300      	str	r3, [sp, #0]
 80829fc:	3028      	adds	r0, #40	; 0x28
 80829fe:	2300      	movs	r3, #0
 8082a00:	9301      	str	r3, [sp, #4]
 8082a02:	f7ff ffd1 	bl	80829a8 <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
 8082a06:	b003      	add	sp, #12
 8082a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8082a0c:	08082a7d 	.word	0x08082a7d

08082a10 <_ZN17PublishQueueAsync14waitRetryStateEv>:
		// No event or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsync::waitRetryState() {
 8082a10:	b513      	push	{r0, r1, r4, lr}
 8082a12:	4604      	mov	r4, r0
 8082a14:	f001 fc36 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
 8082a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082a1a:	1ac0      	subs	r0, r0, r3
 8082a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082a1e:	4298      	cmp	r0, r3
 8082a20:	d308      	bcc.n	8082a34 <_ZN17PublishQueueAsync14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsync::checkQueueState;
 8082a22:	4b05      	ldr	r3, [pc, #20]	; (8082a38 <_ZN17PublishQueueAsync14waitRetryStateEv+0x28>)
 8082a24:	4669      	mov	r1, sp
 8082a26:	9300      	str	r3, [sp, #0]
 8082a28:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8082a2c:	2300      	movs	r3, #0
 8082a2e:	9301      	str	r3, [sp, #4]
 8082a30:	f7ff ffba 	bl	80829a8 <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
 8082a34:	b002      	add	sp, #8
 8082a36:	bd10      	pop	{r4, pc}
 8082a38:	08082a7d 	.word	0x08082a7d

08082a3c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8082a3c:	b570      	push	{r4, r5, r6, lr}
 8082a3e:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a40:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
 8082a42:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a44:	f001 fe36 	bl	80846b4 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 8082a48:	b908      	cbnz	r0, 8082a4e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
 8082a4a:	2000      	movs	r0, #0
 8082a4c:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
 8082a4e:	2c00      	cmp	r4, #0
 8082a50:	dd03      	ble.n	8082a5a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
 8082a52:	f001 fc17 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082a56:	4605      	mov	r5, r0
 8082a58:	e000      	b.n	8082a5c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
 8082a5a:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082a5c:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8082a5e:	b93b      	cbnz	r3, 8082a70 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
 8082a60:	2c00      	cmp	r4, #0
 8082a62:	dd07      	ble.n	8082a74 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8082a64:	f001 fc0e 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082a68:	1b40      	subs	r0, r0, r5
 8082a6a:	42a0      	cmp	r0, r4
 8082a6c:	d302      	bcc.n	8082a74 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
 8082a6e:	e7ec      	b.n	8082a4a <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
 8082a70:	2001      	movs	r0, #1
 8082a72:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 8082a74:	f001 fe84 	bl	8084780 <spark_process>
 8082a78:	e7f0      	b.n	8082a5c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
	...

08082a7c <_ZN17PublishQueueAsync15checkQueueStateEv>:

	// Ready to process events
	stateHandler = &PublishQueueAsync::checkQueueState;
}

void PublishQueueAsync::checkQueueState() {
 8082a7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8082a80:	2100      	movs	r1, #0
	// Is there data waiting to go out?
	volatile RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);
 8082a82:	6845      	ldr	r5, [r0, #4]

	// Ready to process events
	stateHandler = &PublishQueueAsync::checkQueueState;
}

void PublishQueueAsync::checkQueueState() {
 8082a84:	4604      	mov	r4, r0
 8082a86:	4608      	mov	r0, r1
 8082a88:	f001 fc54 	bl	8084334 <os_thread_scheduling>
	// Is there data waiting to go out?
	volatile RetainedBufHeader *hdr = reinterpret_cast<RetainedBufHeader *>(retainedBuffer);

	bool haveEvent = false;
	SINGLE_THREADED_BLOCK() {
		haveEvent = (hdr->numEvents > 0);
 8082a8c:	88ed      	ldrh	r5, [r5, #6]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8082a8e:	2100      	movs	r1, #0
 8082a90:	b2ad      	uxth	r5, r5
 8082a92:	2001      	movs	r0, #1
 8082a94:	f001 fc4e 	bl	8084334 <os_thread_scheduling>
	}

	if (haveEvent && Particle.connected() && millis() - lastPublish >= 1010) {
 8082a98:	2d00      	cmp	r5, #0
 8082a9a:	d06e      	beq.n	8082b7a <_ZN17PublishQueueAsync15checkQueueStateEv+0xfe>
 8082a9c:	f001 fe80 	bl	80847a0 <spark_cloud_flag_connected>
 8082aa0:	2800      	cmp	r0, #0
 8082aa2:	d06a      	beq.n	8082b7a <_ZN17PublishQueueAsync15checkQueueStateEv+0xfe>
 8082aa4:	f001 fbee 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
 8082aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082aaa:	1ac0      	subs	r0, r0, r3
 8082aac:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8082ab0:	4298      	cmp	r0, r3
 8082ab2:	d962      	bls.n	8082b7a <_ZN17PublishQueueAsync15checkQueueStateEv+0xfe>
		// We have an event and can probably publish
		isSending = true;

		EventData *data = reinterpret_cast<EventData *>(&retainedBuffer[sizeof(RetainedBufHeader)]);
 8082ab4:	6867      	ldr	r7, [r4, #4]
		haveEvent = (hdr->numEvents > 0);
	}

	if (haveEvent && Particle.connected() && millis() - lastPublish >= 1010) {
		// We have an event and can probably publish
		isSending = true;
 8082ab6:	2301      	movs	r3, #1

		EventData *data = reinterpret_cast<EventData *>(&retainedBuffer[sizeof(RetainedBufHeader)]);
		const char *eventName = reinterpret_cast<const char *>(&retainedBuffer[sizeof(RetainedBufHeader) + sizeof(EventData)]);
 8082ab8:	f107 0510 	add.w	r5, r7, #16
		haveEvent = (hdr->numEvents > 0);
	}

	if (haveEvent && Particle.connected() && millis() - lastPublish >= 1010) {
		// We have an event and can probably publish
		isSending = true;
 8082abc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

		EventData *data = reinterpret_cast<EventData *>(&retainedBuffer[sizeof(RetainedBufHeader)]);
		const char *eventName = reinterpret_cast<const char *>(&retainedBuffer[sizeof(RetainedBufHeader) + sizeof(EventData)]);
		const char *eventData = eventName;
		eventData += strlen(eventData) + 1;
 8082ac0:	4628      	mov	r0, r5
 8082ac2:	f007 fa3d 	bl	8089f40 <strlen>

		PublishFlags flags(PublishFlag(data->flags));
 8082ac6:	f897 800c 	ldrb.w	r8, [r7, #12]
		isSending = true;

		EventData *data = reinterpret_cast<EventData *>(&retainedBuffer[sizeof(RetainedBufHeader)]);
		const char *eventName = reinterpret_cast<const char *>(&retainedBuffer[sizeof(RetainedBufHeader) + sizeof(EventData)]);
		const char *eventData = eventName;
		eventData += strlen(eventData) + 1;
 8082aca:	3001      	adds	r0, #1

		// For reasons that are not entirely obvious to me, you can't use WITH_ACK. If you specify it
		// on the Photon or Electron, Particle.publish will immediately return false. This only happens
		// with this code running in a separate thread. It works fine from the main thread.

		log.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8082acc:	f8cd 8004 	str.w	r8, [sp, #4]
 8082ad0:	68bb      	ldr	r3, [r7, #8]
		isSending = true;

		EventData *data = reinterpret_cast<EventData *>(&retainedBuffer[sizeof(RetainedBufHeader)]);
		const char *eventName = reinterpret_cast<const char *>(&retainedBuffer[sizeof(RetainedBufHeader) + sizeof(EventData)]);
		const char *eventData = eventName;
		eventData += strlen(eventData) + 1;
 8082ad2:	182e      	adds	r6, r5, r0

		// For reasons that are not entirely obvious to me, you can't use WITH_ACK. If you specify it
		// on the Photon or Electron, Particle.publish will immediately return false. This only happens
		// with this code running in a separate thread. It works fine from the main thread.

		log.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8082ad4:	462a      	mov	r2, r5
 8082ad6:	9300      	str	r3, [sp, #0]
 8082ad8:	4929      	ldr	r1, [pc, #164]	; (8082b80 <_ZN17PublishQueueAsync15checkQueueStateEv+0x104>)
 8082ada:	4633      	mov	r3, r6
 8082adc:	4829      	ldr	r0, [pc, #164]	; (8082b84 <_ZN17PublishQueueAsync15checkQueueStateEv+0x108>)
 8082ade:	f7ff fe01 	bl	80826e4 <_ZNK5spark6Logger4infoEPKcz>
		bool bResult = Particle.publish(eventName, eventData, data->ttl, flags);
 8082ae2:	68bb      	ldr	r3, [r7, #8]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8082ae4:	4629      	mov	r1, r5
 8082ae6:	4632      	mov	r2, r6
 8082ae8:	a802      	add	r0, sp, #8
 8082aea:	f88d 8000 	strb.w	r8, [sp]
 8082aee:	f003 f87d 	bl	8085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8082af2:	9d02      	ldr	r5, [sp, #8]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
 8082af4:	2100      	movs	r1, #0
 8082af6:	4628      	mov	r0, r5
 8082af8:	f7ff ffa0 	bl	8082a3c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
 8082afc:	786b      	ldrb	r3, [r5, #1]
 8082afe:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
 8082b02:	2b00      	cmp	r3, #0
 8082b04:	d037      	beq.n	8082b76 <_ZN17PublishQueueAsync15checkQueueStateEv+0xfa>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
 8082b06:	2100      	movs	r1, #0
 8082b08:	4628      	mov	r0, r5
 8082b0a:	f7ff ff97 	bl	8082a3c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082b0e:	782b      	ldrb	r3, [r5, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
 8082b10:	2b01      	cmp	r3, #1
 8082b12:	d130      	bne.n	8082b76 <_ZN17PublishQueueAsync15checkQueueStateEv+0xfa>
            return result_;
 8082b14:	7b2e      	ldrb	r6, [r5, #12]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8082b16:	9d03      	ldr	r5, [sp, #12]
 8082b18:	b17d      	cbz	r5, 8082b3a <_ZN17PublishQueueAsync15checkQueueStateEv+0xbe>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8082b1a:	686b      	ldr	r3, [r5, #4]
 8082b1c:	3b01      	subs	r3, #1
 8082b1e:	606b      	str	r3, [r5, #4]
 8082b20:	b95b      	cbnz	r3, 8082b3a <_ZN17PublishQueueAsync15checkQueueStateEv+0xbe>
        {
          _M_dispose();
 8082b22:	682b      	ldr	r3, [r5, #0]
 8082b24:	4628      	mov	r0, r5
 8082b26:	689b      	ldr	r3, [r3, #8]
 8082b28:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8082b2a:	68ab      	ldr	r3, [r5, #8]
 8082b2c:	3b01      	subs	r3, #1
 8082b2e:	60ab      	str	r3, [r5, #8]
 8082b30:	b91b      	cbnz	r3, 8082b3a <_ZN17PublishQueueAsync15checkQueueStateEv+0xbe>
            _M_destroy();
 8082b32:	682b      	ldr	r3, [r5, #0]
 8082b34:	4628      	mov	r0, r5
 8082b36:	68db      	ldr	r3, [r3, #12]
 8082b38:	4798      	blx	r3
		if (bResult) {
 8082b3a:	b146      	cbz	r6, 8082b4e <_ZN17PublishQueueAsync15checkQueueStateEv+0xd2>
			// Successfully published
			log.info("published successfully");
 8082b3c:	4912      	ldr	r1, [pc, #72]	; (8082b88 <_ZN17PublishQueueAsync15checkQueueStateEv+0x10c>)
 8082b3e:	4811      	ldr	r0, [pc, #68]	; (8082b84 <_ZN17PublishQueueAsync15checkQueueStateEv+0x108>)
 8082b40:	f7ff fdd0 	bl	80826e4 <_ZNK5spark6Logger4infoEPKcz>
			discardOldEvent(false);
 8082b44:	2100      	movs	r1, #0
 8082b46:	4620      	mov	r0, r4
 8082b48:	f7ff fe5e 	bl	8082808 <_ZN17PublishQueueAsync15discardOldEventEb>
 8082b4c:	e00c      	b.n	8082b68 <_ZN17PublishQueueAsync15checkQueueStateEv+0xec>
		}
		else {
			// Did not successfully transmit, try again after retry time
			log.info("published failed, will retry in %lu ms", failureRetryMs);
 8082b4e:	490f      	ldr	r1, [pc, #60]	; (8082b8c <_ZN17PublishQueueAsync15checkQueueStateEv+0x110>)
 8082b50:	480c      	ldr	r0, [pc, #48]	; (8082b84 <_ZN17PublishQueueAsync15checkQueueStateEv+0x108>)
 8082b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8082b54:	f7ff fdc6 	bl	80826e4 <_ZNK5spark6Logger4infoEPKcz>
			stateHandler = &PublishQueueAsync::waitRetryState;
 8082b58:	4b0d      	ldr	r3, [pc, #52]	; (8082b90 <_ZN17PublishQueueAsync15checkQueueStateEv+0x114>)
 8082b5a:	a902      	add	r1, sp, #8
 8082b5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8082b60:	9302      	str	r3, [sp, #8]
 8082b62:	9603      	str	r6, [sp, #12]
 8082b64:	f7ff ff20 	bl	80829a8 <_ZNSt8functionIFvR17PublishQueueAsyncEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
		}
		isSending = false;
 8082b68:	2300      	movs	r3, #0
 8082b6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8082b6e:	f001 fb89 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		lastPublish = millis();
 8082b72:	63e0      	str	r0, [r4, #60]	; 0x3c
	}
	else {
		// No event or can't publish yet (not connected or published too recently)
	}

}
 8082b74:	e001      	b.n	8082b7a <_ZN17PublishQueueAsync15checkQueueStateEv+0xfe>
        }
        return std::move(defaultValue);
 8082b76:	2600      	movs	r6, #0
 8082b78:	e7cd      	b.n	8082b16 <_ZN17PublishQueueAsync15checkQueueStateEv+0x9a>
 8082b7a:	b004      	add	sp, #16
 8082b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b80:	0808b3ec 	.word	0x0808b3ec
 8082b84:	20000d1c 	.word	0x20000d1c
 8082b88:	0808b3ae 	.word	0x0808b3ae
 8082b8c:	0808b3c5 	.word	0x0808b3c5
 8082b90:	08082a11 	.word	0x08082a11

08082b94 <_GLOBAL__sub_I__ZN17PublishQueueAsyncC2EPht>:


// [static]
void PublishQueueAsync::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}
 8082b94:	b508      	push	{r3, lr}
 8082b96:	f001 fafd 	bl	8084194 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082b9a:	4a02      	ldr	r2, [pc, #8]	; (8082ba4 <_GLOBAL__sub_I__ZN17PublishQueueAsyncC2EPht+0x10>)
 8082b9c:	4b02      	ldr	r3, [pc, #8]	; (8082ba8 <_GLOBAL__sub_I__ZN17PublishQueueAsyncC2EPht+0x14>)
 8082b9e:	601a      	str	r2, [r3, #0]
 8082ba0:	bd08      	pop	{r3, pc}
 8082ba2:	bf00      	nop
 8082ba4:	0808b40d 	.word	0x0808b40d
 8082ba8:	20000d1c 	.word	0x20000d1c

08082bac <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 8082bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082bb0:	461e      	mov	r6, r3
 8082bb2:	b085      	sub	sp, #20
 8082bb4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8082bb8:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8082bba:	1a9a      	subs	r2, r3, r2
 8082bbc:	2a00      	cmp	r2, #0
 8082bbe:	bfb8      	it	lt
 8082bc0:	4252      	neglt	r2, r2
 8082bc2:	9200      	str	r2, [sp, #0]
 8082bc4:	1a72      	subs	r2, r6, r1
 8082bc6:	2a00      	cmp	r2, #0
 8082bc8:	bfb8      	it	lt
 8082bca:	4252      	neglt	r2, r2
 8082bcc:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 8082bce:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 8082bd0:	9a00      	ldr	r2, [sp, #0]
 8082bd2:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 8082bd4:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 8082bd6:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 8082bd8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 8082bdc:	dd05      	ble.n	8082bea <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 8082bde:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 8082be0:	461e      	mov	r6, r3
 8082be2:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 8082be4:	4622      	mov	r2, r4
    swap(x0, y0);
 8082be6:	462c      	mov	r4, r5
 8082be8:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 8082bea:	42b4      	cmp	r4, r6
 8082bec:	dd05      	ble.n	8082bfa <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 8082bee:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 8082bf0:	461d      	mov	r5, r3
 8082bf2:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 8082bf4:	4622      	mov	r2, r4
 8082bf6:	4634      	mov	r4, r6
 8082bf8:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 8082bfa:	1b5a      	subs	r2, r3, r5
 8082bfc:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8082bfe:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 8082c02:	bfb8      	it	lt
 8082c04:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8082c06:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 8082c0a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 8082c0c:	fa0f f788 	sxth.w	r7, r8
 8082c10:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 8082c12:	429d      	cmp	r5, r3
 8082c14:	bfb4      	ite	lt
 8082c16:	2301      	movlt	r3, #1
 8082c18:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 8082c1c:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 8082c20:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 8082c22:	42b4      	cmp	r4, r6
 8082c24:	dc1f      	bgt.n	8082c66 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 8082c26:	9a01      	ldr	r2, [sp, #4]
 8082c28:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 8082c2a:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 8082c2c:	4293      	cmp	r3, r2
 8082c2e:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 8082c32:	bfc8      	it	gt
 8082c34:	4622      	movgt	r2, r4
 8082c36:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8082c3a:	bfc8      	it	gt
 8082c3c:	4629      	movgt	r1, r5
 8082c3e:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 8082c40:	bfdc      	itt	le
 8082c42:	462a      	movle	r2, r5
 8082c44:	4621      	movle	r1, r4
 8082c46:	47d8      	blx	fp
    }
    err -= dy;
 8082c48:	9b03      	ldr	r3, [sp, #12]
 8082c4a:	1aff      	subs	r7, r7, r3
 8082c4c:	b2bb      	uxth	r3, r7
 8082c4e:	b21f      	sxth	r7, r3
    if (err < 0) {
 8082c50:	2f00      	cmp	r7, #0
 8082c52:	da05      	bge.n	8082c60 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 8082c54:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 8082c56:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 8082c5a:	4415      	add	r5, r2
 8082c5c:	b22d      	sxth	r5, r5
      err += dx;
 8082c5e:	b23f      	sxth	r7, r7
 8082c60:	3401      	adds	r4, #1
 8082c62:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 8082c64:	e7dd      	b.n	8082c22 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 8082c66:	b005      	add	sp, #20
 8082c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082c6c <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 8082c6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8082c70:	4604      	mov	r4, r0
 8082c72:	4691      	mov	r9, r2
 8082c74:	460d      	mov	r5, r1
 8082c76:	4698      	mov	r8, r3
 8082c78:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 8082c7c:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 8082c7e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 8082c82:	9600      	str	r6, [sp, #0]
 8082c84:	69ff      	ldr	r7, [r7, #28]
 8082c86:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 8082c88:	6823      	ldr	r3, [r4, #0]
 8082c8a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8082c8e:	9600      	str	r6, [sp, #0]
 8082c90:	444a      	add	r2, r9
 8082c92:	69df      	ldr	r7, [r3, #28]
 8082c94:	4629      	mov	r1, r5
 8082c96:	4643      	mov	r3, r8
 8082c98:	4620      	mov	r0, r4
 8082c9a:	b212      	sxth	r2, r2
 8082c9c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 8082c9e:	6823      	ldr	r3, [r4, #0]
 8082ca0:	9600      	str	r6, [sp, #0]
 8082ca2:	699f      	ldr	r7, [r3, #24]
 8082ca4:	464a      	mov	r2, r9
 8082ca6:	4653      	mov	r3, sl
 8082ca8:	4629      	mov	r1, r5
 8082caa:	4620      	mov	r0, r4
 8082cac:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 8082cae:	6823      	ldr	r3, [r4, #0]
 8082cb0:	f108 31ff 	add.w	r1, r8, #4294967295
 8082cb4:	960a      	str	r6, [sp, #40]	; 0x28
 8082cb6:	4429      	add	r1, r5
 8082cb8:	699d      	ldr	r5, [r3, #24]
 8082cba:	464a      	mov	r2, r9
 8082cbc:	4653      	mov	r3, sl
 8082cbe:	4620      	mov	r0, r4
 8082cc0:	46ac      	mov	ip, r5
 8082cc2:	b209      	sxth	r1, r1
}
 8082cc4:	b002      	add	sp, #8
 8082cc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 8082cca:	4760      	bx	ip

08082ccc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 8082ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 8082cce:	3b01      	subs	r3, #1
 8082cd0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8082cd4:	4413      	add	r3, r2
 8082cd6:	6804      	ldr	r4, [r0, #0]
 8082cd8:	b21b      	sxth	r3, r3
 8082cda:	9300      	str	r3, [sp, #0]
 8082cdc:	9501      	str	r5, [sp, #4]
 8082cde:	6964      	ldr	r4, [r4, #20]
 8082ce0:	460b      	mov	r3, r1
 8082ce2:	47a0      	blx	r4
}
 8082ce4:	b003      	add	sp, #12
 8082ce6:	bd30      	pop	{r4, r5, pc}

08082ce8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 8082ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 8082cea:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8082cee:	6804      	ldr	r4, [r0, #0]
 8082cf0:	e88d 0024 	stmia.w	sp, {r2, r5}
 8082cf4:	3b01      	subs	r3, #1
 8082cf6:	440b      	add	r3, r1
 8082cf8:	6964      	ldr	r4, [r4, #20]
 8082cfa:	b21b      	sxth	r3, r3
 8082cfc:	47a0      	blx	r4
}
 8082cfe:	b003      	add	sp, #12
 8082d00:	bd30      	pop	{r4, r5, pc}

08082d02 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 8082d02:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8082d06:	4605      	mov	r5, r0
 8082d08:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 8082d0a:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 8082d0c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8082d10:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 8082d14:	eb01 0a03 	add.w	sl, r1, r3
 8082d18:	4554      	cmp	r4, sl
 8082d1a:	da0b      	bge.n	8082d34 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 8082d1c:	682b      	ldr	r3, [r5, #0]
 8082d1e:	f8cd 9000 	str.w	r9, [sp]
 8082d22:	699e      	ldr	r6, [r3, #24]
 8082d24:	4621      	mov	r1, r4
 8082d26:	4643      	mov	r3, r8
 8082d28:	463a      	mov	r2, r7
 8082d2a:	4628      	mov	r0, r5
 8082d2c:	3401      	adds	r4, #1
 8082d2e:	47b0      	blx	r6
 8082d30:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 8082d32:	e7f1      	b.n	8082d18 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 8082d34:	b002      	add	sp, #8
 8082d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08082d3a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 8082d3a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 8082d3c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8082d40:	6804      	ldr	r4, [r0, #0]
 8082d42:	9101      	str	r1, [sp, #4]
 8082d44:	9200      	str	r2, [sp, #0]
 8082d46:	2200      	movs	r2, #0
 8082d48:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8082d4c:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8082d4e:	4611      	mov	r1, r2
 8082d50:	47a0      	blx	r4
}
 8082d52:	b002      	add	sp, #8
 8082d54:	bd10      	pop	{r4, pc}

08082d56 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 8082d56:	4770      	bx	lr

08082d58 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 8082d58:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 8082d5a:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 8082d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 8082d60:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 8082d62:	4d07      	ldr	r5, [pc, #28]	; (8082d80 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082d64:	2400      	movs	r4, #0
 8082d66:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 8082d68:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 8082d6a:	2201      	movs	r2, #1
 8082d6c:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 8082d6e:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 8082d70:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 8082d72:	8204      	strh	r4, [r0, #16]
 8082d74:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 8082d76:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 8082d78:	82c1      	strh	r1, [r0, #22]
 8082d7a:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 8082d7c:	7682      	strb	r2, [r0, #26]
}
 8082d7e:	bd30      	pop	{r4, r5, pc}
 8082d80:	0808b420 	.word	0x0808b420

08082d84 <_ZN12Adafruit_GFX10drawCircleEssst>:

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
 8082d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082d88:	4604      	mov	r4, r0
 8082d8a:	4688      	mov	r8, r1
 8082d8c:	4617      	mov	r7, r2
 8082d8e:	b08b      	sub	sp, #44	; 0x2c
 8082d90:	9303      	str	r3, [sp, #12]
  int16_t f = 1 - r;
 8082d92:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  wrap      = true;
}

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
 8082d96:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
  int16_t f = 1 - r;
 8082d9a:	f1c6 0301 	rsb	r3, r6, #1
 8082d9e:	b21b      	sxth	r3, r3
 8082da0:	9302      	str	r3, [sp, #8]
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
 8082da2:	ebc6 33c6 	rsb	r3, r6, r6, lsl #15
 8082da6:	005b      	lsls	r3, r3, #1
 8082da8:	b21b      	sxth	r3, r3
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
 8082daa:	fa1f fb82 	uxth.w	fp, r2
// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
  int16_t f = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
 8082dae:	9306      	str	r3, [sp, #24]
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
 8082db0:	6803      	ldr	r3, [r0, #0]
 8082db2:	eb06 020b 	add.w	r2, r6, fp
 8082db6:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8082dba:	b212      	sxth	r2, r2
 8082dbc:	462b      	mov	r3, r5
 8082dbe:	47c8      	blx	r9
  drawPixel(x0  , y0-r, color);
 8082dc0:	6823      	ldr	r3, [r4, #0]
 8082dc2:	ebc6 020b 	rsb	r2, r6, fp
 8082dc6:	4641      	mov	r1, r8
 8082dc8:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8082dcc:	b212      	sxth	r2, r2
 8082dce:	462b      	mov	r3, r5
 8082dd0:	4620      	mov	r0, r4
 8082dd2:	47c8      	blx	r9
  drawPixel(x0+r, y0  , color);
 8082dd4:	fa1f f388 	uxth.w	r3, r8
 8082dd8:	18f1      	adds	r1, r6, r3
 8082dda:	9301      	str	r3, [sp, #4]
 8082ddc:	6823      	ldr	r3, [r4, #0]
 8082dde:	463a      	mov	r2, r7
 8082de0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8082de4:	b209      	sxth	r1, r1
 8082de6:	462b      	mov	r3, r5
 8082de8:	4620      	mov	r0, r4
 8082dea:	47c0      	blx	r8
  drawPixel(x0-r, y0  , color);
 8082dec:	9b01      	ldr	r3, [sp, #4]
 8082dee:	463a      	mov	r2, r7
 8082df0:	1b99      	subs	r1, r3, r6
 8082df2:	6823      	ldr	r3, [r4, #0]
 8082df4:	b209      	sxth	r1, r1
 8082df6:	691e      	ldr	r6, [r3, #16]
 8082df8:	4620      	mov	r0, r4
 8082dfa:	462b      	mov	r3, r5
 8082dfc:	47b0      	blx	r6
 8082dfe:	2300      	movs	r3, #0
 8082e00:	9305      	str	r3, [sp, #20]
 8082e02:	9b01      	ldr	r3, [sp, #4]
 8082e04:	3301      	adds	r3, #1
 8082e06:	9307      	str	r3, [sp, #28]
 8082e08:	9b01      	ldr	r3, [sp, #4]
 8082e0a:	3b01      	subs	r3, #1
 8082e0c:	9308      	str	r3, [sp, #32]
 8082e0e:	f10b 0301 	add.w	r3, fp, #1
 8082e12:	9309      	str	r3, [sp, #36]	; 0x24

  while (x<y) {
 8082e14:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8082e18:	9a03      	ldr	r2, [sp, #12]
 8082e1a:	4293      	cmp	r3, r2
 8082e1c:	f280 8084 	bge.w	8082f28 <_ZN12Adafruit_GFX10drawCircleEssst+0x1a4>
    if (f >= 0) {
 8082e20:	9b02      	ldr	r3, [sp, #8]
 8082e22:	2b00      	cmp	r3, #0
 8082e24:	db0b      	blt.n	8082e3e <_ZN12Adafruit_GFX10drawCircleEssst+0xba>
      y--;
 8082e26:	1e53      	subs	r3, r2, #1
 8082e28:	b21b      	sxth	r3, r3
 8082e2a:	9303      	str	r3, [sp, #12]
      ddF_y += 2;
 8082e2c:	9b06      	ldr	r3, [sp, #24]
 8082e2e:	3302      	adds	r3, #2
 8082e30:	b29b      	uxth	r3, r3
 8082e32:	b21a      	sxth	r2, r3
 8082e34:	9206      	str	r2, [sp, #24]
      f += ddF_y;
 8082e36:	9a02      	ldr	r2, [sp, #8]
 8082e38:	4413      	add	r3, r2
 8082e3a:	b21b      	sxth	r3, r3
 8082e3c:	9302      	str	r3, [sp, #8]
 8082e3e:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    }
    x++;
    ddF_x += 2;
    f += ddF_x;
 8082e42:	9b02      	ldr	r3, [sp, #8]

    drawPixel(x0 + x, y0 + y, color);
 8082e44:	4620      	mov	r0, r4
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;
 8082e46:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8082e4a:	3303      	adds	r3, #3
 8082e4c:	b21b      	sxth	r3, r3
 8082e4e:	9302      	str	r3, [sp, #8]
 8082e50:	9b07      	ldr	r3, [sp, #28]
 8082e52:	eb07 0a03 	add.w	sl, r7, r3

    drawPixel(x0 + x, y0 + y, color);
 8082e56:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8082e5a:	fa0f fa8a 	sxth.w	sl, sl
 8082e5e:	9304      	str	r3, [sp, #16]
 8082e60:	eb0b 0903 	add.w	r9, fp, r3
 8082e64:	6823      	ldr	r3, [r4, #0]
 8082e66:	fa0f f989 	sxth.w	r9, r9
 8082e6a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8082e6e:	464a      	mov	r2, r9
 8082e70:	4651      	mov	r1, sl
 8082e72:	462b      	mov	r3, r5
 8082e74:	47c0      	blx	r8
 8082e76:	9b08      	ldr	r3, [sp, #32]
    drawPixel(x0 - x, y0 + y, color);
 8082e78:	464a      	mov	r2, r9
 8082e7a:	ebc7 0803 	rsb	r8, r7, r3
 8082e7e:	6823      	ldr	r3, [r4, #0]
 8082e80:	fa0f f888 	sxth.w	r8, r8
 8082e84:	691b      	ldr	r3, [r3, #16]
 8082e86:	4641      	mov	r1, r8
 8082e88:	461e      	mov	r6, r3
 8082e8a:	4620      	mov	r0, r4
 8082e8c:	462b      	mov	r3, r5
 8082e8e:	47b0      	blx	r6
    drawPixel(x0 + x, y0 - y, color);
 8082e90:	9b04      	ldr	r3, [sp, #16]
 8082e92:	4651      	mov	r1, sl
 8082e94:	ebc3 090b 	rsb	r9, r3, fp
 8082e98:	6823      	ldr	r3, [r4, #0]
 8082e9a:	fa0f f989 	sxth.w	r9, r9
 8082e9e:	691b      	ldr	r3, [r3, #16]
 8082ea0:	464a      	mov	r2, r9
 8082ea2:	461e      	mov	r6, r3
 8082ea4:	4620      	mov	r0, r4
 8082ea6:	462b      	mov	r3, r5
 8082ea8:	47b0      	blx	r6
    drawPixel(x0 - x, y0 - y, color);
 8082eaa:	6823      	ldr	r3, [r4, #0]
 8082eac:	464a      	mov	r2, r9
 8082eae:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8082eb2:	4641      	mov	r1, r8
 8082eb4:	462b      	mov	r3, r5
 8082eb6:	4620      	mov	r0, r4
 8082eb8:	47d0      	blx	sl
    drawPixel(x0 + y, y0 + x, color);
 8082eba:	9b01      	ldr	r3, [sp, #4]
 8082ebc:	9a04      	ldr	r2, [sp, #16]
 8082ebe:	4620      	mov	r0, r4
 8082ec0:	eb03 0802 	add.w	r8, r3, r2
 8082ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082ec6:	fa0f f888 	sxth.w	r8, r8
 8082eca:	eb07 0903 	add.w	r9, r7, r3
 8082ece:	6823      	ldr	r3, [r4, #0]
 8082ed0:	fa0f f989 	sxth.w	r9, r9
 8082ed4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8082ed8:	464a      	mov	r2, r9
 8082eda:	4641      	mov	r1, r8
 8082edc:	462b      	mov	r3, r5
 8082ede:	47d0      	blx	sl
    drawPixel(x0 - y, y0 + x, color);
 8082ee0:	9b01      	ldr	r3, [sp, #4]
 8082ee2:	9a04      	ldr	r2, [sp, #16]
 8082ee4:	4620      	mov	r0, r4
 8082ee6:	1a9e      	subs	r6, r3, r2
 8082ee8:	6823      	ldr	r3, [r4, #0]
 8082eea:	b236      	sxth	r6, r6
 8082eec:	464a      	mov	r2, r9
 8082eee:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8082ef2:	4631      	mov	r1, r6
 8082ef4:	462b      	mov	r3, r5
 8082ef6:	47d0      	blx	sl
 8082ef8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8082efc:	1bdf      	subs	r7, r3, r7
    drawPixel(x0 + y, y0 - x, color);
 8082efe:	6823      	ldr	r3, [r4, #0]
 8082f00:	b23f      	sxth	r7, r7
 8082f02:	4641      	mov	r1, r8
 8082f04:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8082f08:	463a      	mov	r2, r7
 8082f0a:	462b      	mov	r3, r5
 8082f0c:	4620      	mov	r0, r4
 8082f0e:	47c8      	blx	r9
    drawPixel(x0 - y, y0 - x, color);
 8082f10:	6823      	ldr	r3, [r4, #0]
 8082f12:	463a      	mov	r2, r7
 8082f14:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8082f18:	4631      	mov	r1, r6
 8082f1a:	462b      	mov	r3, r5
 8082f1c:	4620      	mov	r0, r4
 8082f1e:	47c0      	blx	r8
 8082f20:	9b05      	ldr	r3, [sp, #20]
 8082f22:	3301      	adds	r3, #1
 8082f24:	9305      	str	r3, [sp, #20]
  drawPixel(x0  , y0+r, color);
  drawPixel(x0  , y0-r, color);
  drawPixel(x0+r, y0  , color);
  drawPixel(x0-r, y0  , color);

  while (x<y) {
 8082f26:	e775      	b.n	8082e14 <_ZN12Adafruit_GFX10drawCircleEssst+0x90>
    drawPixel(x0 + y, y0 + x, color);
    drawPixel(x0 - y, y0 + x, color);
    drawPixel(x0 + y, y0 - x, color);
    drawPixel(x0 - y, y0 - x, color);
  }
}
 8082f28:	b00b      	add	sp, #44	; 0x2c
 8082f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082f2e <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {
 8082f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082f32:	461e      	mov	r6, r3
 8082f34:	4604      	mov	r4, r0
 8082f36:	b08d      	sub	sp, #52	; 0x34
 8082f38:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8082f3c:	9208      	str	r2, [sp, #32]
 8082f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8082f40:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8082f44:	fa1f fb81 	uxth.w	fp, r1
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {
 8082f48:	930a      	str	r3, [sp, #40]	; 0x28
 8082f4a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8082f4e:	9304      	str	r3, [sp, #16]

  int16_t f     = 1 - r;
 8082f50:	b2b3      	uxth	r3, r6
 8082f52:	f1c3 0801 	rsb	r8, r3, #1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
 8082f56:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8082f5a:	005b      	lsls	r3, r3, #1
 8082f5c:	b21b      	sxth	r3, r3
 8082f5e:	9306      	str	r3, [sp, #24]
 8082f60:	2300      	movs	r3, #0
 8082f62:	9303      	str	r3, [sp, #12]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
 8082f64:	9b09      	ldr	r3, [sp, #36]	; 0x24

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {

  int16_t f     = 1 - r;
 8082f66:	fa0f f888 	sxth.w	r8, r8
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
 8082f6a:	f003 0301 	and.w	r3, r3, #1
 8082f6e:	930b      	str	r3, [sp, #44]	; 0x2c
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
 8082f70:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8082f74:	42b3      	cmp	r3, r6
 8082f76:	da78      	bge.n	808306a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x13c>
    if (f >= 0) {
 8082f78:	f1b8 0f00 	cmp.w	r8, #0
 8082f7c:	db09      	blt.n	8082f92 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x64>
      y--;
      ddF_y += 2;
 8082f7e:	9b06      	ldr	r3, [sp, #24]
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
 8082f80:	3e01      	subs	r6, #1
      ddF_y += 2;
 8082f82:	3302      	adds	r3, #2
 8082f84:	b29b      	uxth	r3, r3
 8082f86:	b21a      	sxth	r2, r3
      f     += ddF_y;
 8082f88:	4498      	add	r8, r3
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
 8082f8a:	b236      	sxth	r6, r6
      ddF_y += 2;
 8082f8c:	9206      	str	r2, [sp, #24]
      f     += ddF_y;
 8082f8e:	fa0f f888 	sxth.w	r8, r8
 8082f92:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8082f96:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8082f9a:	b29b      	uxth	r3, r3
 8082f9c:	9305      	str	r3, [sp, #20]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
 8082f9e:	3303      	adds	r3, #3
 8082fa0:	4498      	add	r8, r3

    if (cornername & 0x1) {
 8082fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ddF_y += 2;
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
 8082fa4:	fa0f f888 	sxth.w	r8, r8

    if (cornername & 0x1) {
 8082fa8:	b353      	cbz	r3, 8083000 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd2>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8082faa:	9804      	ldr	r0, [sp, #16]
 8082fac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8082fb0:	6825      	ldr	r5, [r4, #0]
 8082fb2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8082fb6:	9000      	str	r0, [sp, #0]
 8082fb8:	fa1f f986 	uxth.w	r9, r6
 8082fbc:	69a8      	ldr	r0, [r5, #24]
 8082fbe:	9307      	str	r3, [sp, #28]
 8082fc0:	f10b 0101 	add.w	r1, fp, #1
 8082fc4:	3301      	adds	r3, #1
 8082fc6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8082fca:	ebc9 0207 	rsb	r2, r9, r7
 8082fce:	4451      	add	r1, sl
 8082fd0:	4605      	mov	r5, r0
 8082fd2:	b21b      	sxth	r3, r3
 8082fd4:	b212      	sxth	r2, r2
 8082fd6:	b209      	sxth	r1, r1
 8082fd8:	4620      	mov	r0, r4
 8082fda:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8082fdc:	9b07      	ldr	r3, [sp, #28]
 8082fde:	9a05      	ldr	r2, [sp, #20]
 8082fe0:	9d04      	ldr	r5, [sp, #16]
 8082fe2:	3303      	adds	r3, #3
 8082fe4:	4413      	add	r3, r2
 8082fe6:	6820      	ldr	r0, [r4, #0]
 8082fe8:	1e7a      	subs	r2, r7, #1
 8082fea:	ebca 0202 	rsb	r2, sl, r2
 8082fee:	eb0b 0109 	add.w	r1, fp, r9
 8082ff2:	9500      	str	r5, [sp, #0]
 8082ff4:	6985      	ldr	r5, [r0, #24]
 8082ff6:	b21b      	sxth	r3, r3
 8082ff8:	b212      	sxth	r2, r2
 8082ffa:	b209      	sxth	r1, r1
 8082ffc:	4620      	mov	r0, r4
 8082ffe:	47a8      	blx	r5
    }
    if (cornername & 0x2) {
 8083000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8083002:	079b      	lsls	r3, r3, #30
 8083004:	d403      	bmi.n	808300e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe0>
 8083006:	9b03      	ldr	r3, [sp, #12]
 8083008:	3301      	adds	r3, #1
 808300a:	9303      	str	r3, [sp, #12]
 808300c:	e7b0      	b.n	8082f70 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x42>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 808300e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 8083012:	b2b7      	uxth	r7, r6
 8083014:	9804      	ldr	r0, [sp, #16]
 8083016:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 808301a:	9507      	str	r5, [sp, #28]
 808301c:	1bea      	subs	r2, r5, r7
 808301e:	6825      	ldr	r5, [r4, #0]
 8083020:	9000      	str	r0, [sp, #0]
 8083022:	69a8      	ldr	r0, [r5, #24]
 8083024:	f109 0301 	add.w	r3, r9, #1
 8083028:	f10b 31ff 	add.w	r1, fp, #4294967295
 808302c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8083030:	ebca 0101 	rsb	r1, sl, r1
 8083034:	4605      	mov	r5, r0
 8083036:	b21b      	sxth	r3, r3
 8083038:	4620      	mov	r0, r4
 808303a:	b212      	sxth	r2, r2
 808303c:	b209      	sxth	r1, r1
 808303e:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8083040:	9a05      	ldr	r2, [sp, #20]
 8083042:	f109 0303 	add.w	r3, r9, #3
 8083046:	441a      	add	r2, r3
 8083048:	4613      	mov	r3, r2
 808304a:	9a07      	ldr	r2, [sp, #28]
 808304c:	9d04      	ldr	r5, [sp, #16]
 808304e:	6820      	ldr	r0, [r4, #0]
 8083050:	3a01      	subs	r2, #1
 8083052:	ebca 0202 	rsb	r2, sl, r2
 8083056:	ebc7 010b 	rsb	r1, r7, fp
 808305a:	9500      	str	r5, [sp, #0]
 808305c:	6985      	ldr	r5, [r0, #24]
 808305e:	b21b      	sxth	r3, r3
 8083060:	b212      	sxth	r2, r2
 8083062:	b209      	sxth	r1, r1
 8083064:	4620      	mov	r0, r4
 8083066:	47a8      	blx	r5
 8083068:	e7cd      	b.n	8083006 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd8>
    }
  }
}
 808306a:	b00d      	add	sp, #52	; 0x34
 808306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083070 <_ZN12Adafruit_GFX10fillCircleEssst>:
    }
  }
}

void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
			      uint16_t color) {
 8083070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083074:	4615      	mov	r5, r2
 8083076:	4604      	mov	r4, r0
 8083078:	4688      	mov	r8, r1
 808307a:	461e      	mov	r6, r3
 808307c:	b085      	sub	sp, #20
 808307e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  drawFastVLine(x0, y0-r, 2*r+1, color);
 8083082:	b29a      	uxth	r2, r3
 8083084:	9700      	str	r7, [sp, #0]
 8083086:	0053      	lsls	r3, r2, #1
 8083088:	f103 0e01 	add.w	lr, r3, #1
 808308c:	6803      	ldr	r3, [r0, #0]
 808308e:	1aaa      	subs	r2, r5, r2
 8083090:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8083094:	b212      	sxth	r2, r2
 8083096:	fa0f f38e 	sxth.w	r3, lr
 808309a:	47c8      	blx	r9
  fillCircleHelper(x0, y0, r, 3, 0, color);
 808309c:	2203      	movs	r2, #3
 808309e:	2300      	movs	r3, #0
 80830a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80830a4:	9702      	str	r7, [sp, #8]
 80830a6:	4633      	mov	r3, r6
 80830a8:	462a      	mov	r2, r5
 80830aa:	4641      	mov	r1, r8
 80830ac:	4620      	mov	r0, r4
 80830ae:	f7ff ff3e 	bl	8082f2e <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
}
 80830b2:	b005      	add	sp, #20
 80830b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080830b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  }
}

void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {
 80830b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80830bc:	b087      	sub	sp, #28
 80830be:	469a      	mov	sl, r3
 80830c0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 80830c4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80830c8:	9302      	str	r3, [sp, #8]
 80830ca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80830ce:	4691      	mov	r9, r2
 80830d0:	9303      	str	r3, [sp, #12]
 80830d2:	f108 0207 	add.w	r2, r8, #7
 80830d6:	2308      	movs	r3, #8

  int16_t i, j, byteWidth = (w + 7) / 8;
 80830d8:	2400      	movs	r4, #0
 80830da:	fb92 fbf3 	sdiv	fp, r2, r3
 80830de:	4625      	mov	r5, r4
  }
}

void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {
 80830e0:	e88d 0003 	stmia.w	sp, {r0, r1}

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
 80830e4:	9305      	str	r3, [sp, #20]
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
 80830e6:	9a02      	ldr	r2, [sp, #8]
 80830e8:	b22b      	sxth	r3, r5
 80830ea:	429a      	cmp	r2, r3
 80830ec:	dd25      	ble.n	808313a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
	drawPixel(x+i, y+j, color);
 80830ee:	eb09 0305 	add.w	r3, r9, r5
 80830f2:	b21b      	sxth	r3, r3
 80830f4:	2600      	movs	r6, #0
 80830f6:	9304      	str	r3, [sp, #16]
 80830f8:	b233      	sxth	r3, r6
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
 80830fa:	4543      	cmp	r3, r8
 80830fc:	da1a      	bge.n	8083134 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x7c>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
 80830fe:	9a05      	ldr	r2, [sp, #20]
 8083100:	b2b1      	uxth	r1, r6
 8083102:	fb93 f3f2 	sdiv	r3, r3, r2
 8083106:	eb0a 0204 	add.w	r2, sl, r4
 808310a:	5cd2      	ldrb	r2, [r2, r3]
 808310c:	2080      	movs	r0, #128	; 0x80
 808310e:	f001 0307 	and.w	r3, r1, #7
 8083112:	fa40 f303 	asr.w	r3, r0, r3
 8083116:	421a      	tst	r2, r3
 8083118:	d00a      	beq.n	8083130 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x78>
	drawPixel(x+i, y+j, color);
 808311a:	9b01      	ldr	r3, [sp, #4]
 808311c:	9a04      	ldr	r2, [sp, #16]
 808311e:	4419      	add	r1, r3
 8083120:	9b00      	ldr	r3, [sp, #0]
 8083122:	b209      	sxth	r1, r1
 8083124:	681b      	ldr	r3, [r3, #0]
 8083126:	9800      	ldr	r0, [sp, #0]
 8083128:	691b      	ldr	r3, [r3, #16]
 808312a:	461f      	mov	r7, r3
 808312c:	9b03      	ldr	r3, [sp, #12]
 808312e:	47b8      	blx	r7
 8083130:	3601      	adds	r6, #1
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
 8083132:	e7e1      	b.n	80830f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x40>
 8083134:	3501      	adds	r5, #1
 8083136:	445c      	add	r4, fp
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
 8083138:	e7d5      	b.n	80830e6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x2e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
	drawPixel(x+i, y+j, color);
      }
    }
  }
}
 808313a:	b007      	add	sp, #28
 808313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083140 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 8083140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083144:	b08f      	sub	sp, #60	; 0x3c
 8083146:	9106      	str	r1, [sp, #24]
 8083148:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 808314c:	4604      	mov	r4, r0
 808314e:	9107      	str	r1, [sp, #28]
 8083150:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8083154:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8083158:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 808315a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 808315e:	9806      	ldr	r0, [sp, #24]
 8083160:	4281      	cmp	r1, r0
 8083162:	dd7d      	ble.n	8083260 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 8083164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8083168:	4291      	cmp	r1, r2
 808316a:	dd79      	ble.n	8083260 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 808316c:	2106      	movs	r1, #6
 808316e:	fb01 0008 	mla	r0, r1, r8, r0
 8083172:	2800      	cmp	r0, #0
 8083174:	dd74      	ble.n	8083260 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 8083176:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 808317a:	2800      	cmp	r0, #0
 808317c:	dd70      	ble.n	8083260 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
 808317e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8083182:	b295      	uxth	r5, r2
 8083184:	930c      	str	r3, [sp, #48]	; 0x30
 8083186:	f105 0308 	add.w	r3, r5, #8
 808318a:	b29b      	uxth	r3, r3
 808318c:	9109      	str	r1, [sp, #36]	; 0x24
 808318e:	2600      	movs	r6, #0
 8083190:	930d      	str	r3, [sp, #52]	; 0x34
 8083192:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 8083194:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
 8083196:	2e05      	cmp	r6, #5
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
 8083198:	bf1f      	itttt	ne
 808319a:	4b33      	ldrne	r3, [pc, #204]	; (8083268 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 808319c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 808319e:	199b      	addne	r3, r3, r6
 80831a0:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80831a4:	fa1f f388 	uxth.w	r3, r8
 80831a8:	9304      	str	r3, [sp, #16]
 80831aa:	9904      	ldr	r1, [sp, #16]
 80831ac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80831b0:	b2b2      	uxth	r2, r6
 80831b2:	fb01 3102 	mla	r1, r1, r2, r3
        }
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80831b6:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80831b8:	b209      	sxth	r1, r1
 80831ba:	910a      	str	r1, [sp, #40]	; 0x28
        }
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80831bc:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80831be:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
      line = 0x0;
 80831c2:	bf08      	it	eq
 80831c4:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80831c8:	9505      	str	r5, [sp, #20]
        }
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80831ca:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        }
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80831cc:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80831ce:	f01a 0f01 	tst.w	sl, #1
 80831d2:	d011      	beq.n	80831f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80831d4:	f1b8 0f01 	cmp.w	r8, #1
 80831d8:	6823      	ldr	r3, [r4, #0]
 80831da:	d103      	bne.n	80831e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80831dc:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80831e0:	9b07      	ldr	r3, [sp, #28]
 80831e2:	e014      	b.n	808320e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80831e4:	9a07      	ldr	r2, [sp, #28]
 80831e6:	9201      	str	r2, [sp, #4]
 80831e8:	9a03      	ldr	r2, [sp, #12]
 80831ea:	9200      	str	r2, [sp, #0]
 80831ec:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80831f0:	4613      	mov	r3, r2
 80831f2:	fa0f f289 	sxth.w	r2, r9
 80831f6:	e018      	b.n	808322a <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        }
      } else if (bg != color) {
 80831f8:	9b07      	ldr	r3, [sp, #28]
 80831fa:	9a08      	ldr	r2, [sp, #32]
 80831fc:	4293      	cmp	r3, r2
 80831fe:	d017      	beq.n	8083230 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 8083200:	f1b8 0f01 	cmp.w	r8, #1
 8083204:	6823      	ldr	r3, [r4, #0]
 8083206:	d107      	bne.n	8083218 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 8083208:	f8d3 b010 	ldr.w	fp, [r3, #16]
 808320c:	4613      	mov	r3, r2
 808320e:	b23a      	sxth	r2, r7
 8083210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8083212:	4620      	mov	r0, r4
 8083214:	47d8      	blx	fp
 8083216:	e00b      	b.n	8083230 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 8083218:	9a08      	ldr	r2, [sp, #32]
 808321a:	9201      	str	r2, [sp, #4]
 808321c:	9a03      	ldr	r2, [sp, #12]
 808321e:	9200      	str	r2, [sp, #0]
 8083220:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8083224:	4613      	mov	r3, r2
 8083226:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 808322a:	990a      	ldr	r1, [sp, #40]	; 0x28
 808322c:	4620      	mov	r0, r4
 808322e:	47d8      	blx	fp
 8083230:	9b04      	ldr	r3, [sp, #16]
 8083232:	9a04      	ldr	r2, [sp, #16]
 8083234:	4499      	add	r9, r3
 8083236:	9b05      	ldr	r3, [sp, #20]
 8083238:	3701      	adds	r7, #1
 808323a:	4413      	add	r3, r2
 808323c:	b29b      	uxth	r3, r3
 808323e:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 8083240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8083242:	b2bf      	uxth	r7, r7
 8083244:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 8083246:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 808324a:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 808324e:	d1be      	bne.n	80831ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 8083250:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 8083252:	3601      	adds	r6, #1
 8083254:	3b01      	subs	r3, #1
 8083256:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 808325a:	b276      	sxtb	r6, r6
 808325c:	9309      	str	r3, [sp, #36]	; 0x24
 808325e:	d198      	bne.n	8083192 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 8083260:	b00f      	add	sp, #60	; 0x3c
 8083262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083266:	bf00      	nop
 8083268:	0808b450 	.word	0x0808b450

0808326c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 808326c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 808326e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 8083270:	b085      	sub	sp, #20
 8083272:	4604      	mov	r4, r0
 8083274:	460b      	mov	r3, r1

  if (c == '\n') {
 8083276:	d104      	bne.n	8083282 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 8083278:	7e02      	ldrb	r2, [r0, #24]
 808327a:	8a43      	ldrh	r3, [r0, #18]
 808327c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8083280:	e023      	b.n	80832ca <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 8083282:	290d      	cmp	r1, #13
 8083284:	d024      	beq.n	80832d0 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8083286:	7e05      	ldrb	r5, [r0, #24]
 8083288:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 808328c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8083290:	9502      	str	r5, [sp, #8]
 8083292:	8ac5      	ldrh	r5, [r0, #22]
 8083294:	9501      	str	r5, [sp, #4]
 8083296:	8a85      	ldrh	r5, [r0, #20]
 8083298:	9500      	str	r5, [sp, #0]
 808329a:	f7ff ff51 	bl	8083140 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 808329e:	7e22      	ldrb	r2, [r4, #24]
 80832a0:	8a23      	ldrh	r3, [r4, #16]
 80832a2:	b291      	uxth	r1, r2
 80832a4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80832a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80832ac:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80832ae:	b21b      	sxth	r3, r3
 80832b0:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80832b2:	b168      	cbz	r0, 80832d0 <_ZN12Adafruit_GFX5writeEh+0x64>
 80832b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80832b8:	f06f 0505 	mvn.w	r5, #5
 80832bc:	fb05 0202 	mla	r2, r5, r2, r0
 80832c0:	4293      	cmp	r3, r2
 80832c2:	dd05      	ble.n	80832d0 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80832c4:	8a63      	ldrh	r3, [r4, #18]
 80832c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80832ca:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80832cc:	2300      	movs	r3, #0
 80832ce:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80832d0:	2001      	movs	r0, #1
 80832d2:	b005      	add	sp, #20
 80832d4:	bd30      	pop	{r4, r5, pc}

080832d6 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80832d6:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80832d8:	8242      	strh	r2, [r0, #18]
 80832da:	4770      	bx	lr

080832dc <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80832dc:	2900      	cmp	r1, #0
 80832de:	bf08      	it	eq
 80832e0:	2101      	moveq	r1, #1
 80832e2:	7601      	strb	r1, [r0, #24]
 80832e4:	4770      	bx	lr

080832e6 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80832e6:	82c1      	strh	r1, [r0, #22]
 80832e8:	8281      	strh	r1, [r0, #20]
 80832ea:	4770      	bx	lr

080832ec <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80832ec:	7e40      	ldrb	r0, [r0, #25]
 80832ee:	4770      	bx	lr

080832f0 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80832f0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80832f4:	4770      	bx	lr

080832f6 <_ZN12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80832f6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80832fa:	4770      	bx	lr

080832fc <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80832fc:	f000 bf4a 	b.w	8084194 <HAL_Pin_Map>

08083300 <_ZN11LSM6DS3CoreC1Ehh>:
//  For I2C, construct LSM6DS3Core myIMU(I2C_MODE, 0x6B);
//
//  Default construction is I2C mode, address 0x6B.
//
//****************************************************************************//
LSM6DS3Core::LSM6DS3Core( uint8_t busType, uint8_t inputArg) : commInterface(I2C_MODE), I2CAddress(0x6B), chipSelectPin(10)
 8083300:	236b      	movs	r3, #107	; 0x6b
 8083302:	7043      	strb	r3, [r0, #1]
 8083304:	230a      	movs	r3, #10
 8083306:	7083      	strb	r3, [r0, #2]
{
	commInterface = busType;
 8083308:	7001      	strb	r1, [r0, #0]
	if( commInterface == I2C_MODE )
 808330a:	b909      	cbnz	r1, 8083310 <_ZN11LSM6DS3CoreC1Ehh+0x10>
	{
		I2CAddress = inputArg;
 808330c:	7042      	strb	r2, [r0, #1]
 808330e:	4770      	bx	lr
	}
	if( commInterface == SPI_MODE )
 8083310:	2901      	cmp	r1, #1
	{
		chipSelectPin = inputArg;
 8083312:	bf08      	it	eq
 8083314:	7082      	strbeq	r2, [r0, #2]
	}

}
 8083316:	4770      	bx	lr

08083318 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh>:
//    two bytes long and 3 bytes are requested, this will over-write some
//    other memory!
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
 8083318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808331c:	461e      	mov	r6, r3
	//define pointer that will point to the external space
	uint8_t i = 0;
	uint8_t c = 0;
	uint8_t tempFFCounter = 0;

	switch (commInterface) {
 808331e:	7803      	ldrb	r3, [r0, #0]
//    two bytes long and 3 bytes are requested, this will over-write some
//    other memory!
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
 8083320:	4607      	mov	r7, r0
 8083322:	460d      	mov	r5, r1
 8083324:	4614      	mov	r4, r2
	//define pointer that will point to the external space
	uint8_t i = 0;
	uint8_t c = 0;
	uint8_t tempFFCounter = 0;

	switch (commInterface) {
 8083326:	b173      	cbz	r3, 8083346 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x2e>
 8083328:	2b01      	cmp	r3, #1
 808332a:	d142      	bne.n	80833b2 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x9a>
		}
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(chipSelectPin, LOW);
 808332c:	2100      	movs	r1, #0
 808332e:	7880      	ldrb	r0, [r0, #2]
 8083330:	f003 f821 	bl	8086376 <digitalWrite>
		// send the device the register you want to read:
		SPI2.transfer(offset | 0x80);  //Ored with "read request" bit
 8083334:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 8083338:	4826      	ldr	r0, [pc, #152]	; (80833d4 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xbc>)
 808333a:	f001 fbcb 	bl	8084ad4 <_ZN8SPIClass8transferEh>
 808333e:	eb05 0806 	add.w	r8, r5, r6
	status_t returnError = IMU_SUCCESS;

	//define pointer that will point to the external space
	uint8_t i = 0;
	uint8_t c = 0;
	uint8_t tempFFCounter = 0;
 8083342:	2400      	movs	r4, #0
 8083344:	e01f      	b.n	8083386 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x6e>

	switch (commInterface) {

	case I2C_MODE:
		Wire.beginTransmission(I2CAddress);
 8083346:	f003 f8dd 	bl	8086504 <_Z19__fetch_global_Wirev>
 808334a:	7879      	ldrb	r1, [r7, #1]
 808334c:	f002 ffb9 	bl	80862c2 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(offset);
 8083350:	f003 f8d8 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083354:	6803      	ldr	r3, [r0, #0]
 8083356:	4621      	mov	r1, r4
 8083358:	689b      	ldr	r3, [r3, #8]
 808335a:	4798      	blx	r3
		if( Wire.endTransmission() != 0 )
 808335c:	f003 f8d2 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083360:	f002 ffba 	bl	80862d8 <_ZN7TwoWire15endTransmissionEv>
 8083364:	bb38      	cbnz	r0, 80833b6 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x9e>
			returnError = IMU_HW_ERROR;
		}
		else  //OK, all worked, keep going
		{
			// request 6 bytes from slave device
			Wire.requestFrom(I2CAddress, length);
 8083366:	f003 f8cd 	bl	8086504 <_Z19__fetch_global_Wirev>
 808336a:	4632      	mov	r2, r6
 808336c:	7879      	ldrb	r1, [r7, #1]
 808336e:	f002 ffa0 	bl	80862b2 <_ZN7TwoWire11requestFromEhh>
 8083372:	19ac      	adds	r4, r5, r6
			while ( (Wire.available()) && (i < length))  // slave may send less than requested
 8083374:	f003 f8c6 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083378:	6803      	ldr	r3, [r0, #0]
 808337a:	691b      	ldr	r3, [r3, #16]
 808337c:	4798      	blx	r3
 808337e:	b1e0      	cbz	r0, 80833ba <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xa2>
 8083380:	42a5      	cmp	r5, r4
 8083382:	d11c      	bne.n	80833be <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xa6>
 8083384:	e015      	b.n	80833b2 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x9a>
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI2.transfer(offset | 0x80);  //Ored with "read request" bit
		while ( i < length ) // slave may send less than requested
 8083386:	4545      	cmp	r5, r8
 8083388:	d00a      	beq.n	80833a0 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x88>
		{
			c = SPI2.transfer(0x00); // receive a byte as character
 808338a:	2100      	movs	r1, #0
 808338c:	4811      	ldr	r0, [pc, #68]	; (80833d4 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xbc>)
 808338e:	f001 fba1 	bl	8084ad4 <_ZN8SPIClass8transferEh>
			if( c == 0xFF )
 8083392:	28ff      	cmp	r0, #255	; 0xff
			{
				//May have problem
				tempFFCounter++;
 8083394:	bf04      	itt	eq
 8083396:	3401      	addeq	r4, #1
 8083398:	b2e4      	uxtbeq	r4, r4
			}
			*outputPointer = c;
 808339a:	f805 0b01 	strb.w	r0, [r5], #1
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI2.transfer(offset | 0x80);  //Ored with "read request" bit
		while ( i < length ) // slave may send less than requested
 808339e:	e7f2      	b.n	8083386 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x6e>
		{
			//Ok, we've recieved all ones, report
			returnError = IMU_ALL_ONES_WARNING;
		}
		// take the chip select high to de-select:
		digitalWrite(chipSelectPin, HIGH);
 80833a0:	2101      	movs	r1, #1
 80833a2:	78b8      	ldrb	r0, [r7, #2]
			i++;
		}
		if( tempFFCounter == i )
		{
			//Ok, we've recieved all ones, report
			returnError = IMU_ALL_ONES_WARNING;
 80833a4:	42b4      	cmp	r4, r6
 80833a6:	bf0c      	ite	eq
 80833a8:	2405      	moveq	r4, #5
 80833aa:	2400      	movne	r4, #0
		}
		// take the chip select high to de-select:
		digitalWrite(chipSelectPin, HIGH);
 80833ac:	f002 ffe3 	bl	8086376 <digitalWrite>
		break;
 80833b0:	e00d      	b.n	80833ce <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xb6>
//    other memory!
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
	status_t returnError = IMU_SUCCESS;
 80833b2:	2400      	movs	r4, #0
 80833b4:	e00b      	b.n	80833ce <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xb6>
	case I2C_MODE:
		Wire.beginTransmission(I2CAddress);
		Wire.write(offset);
		if( Wire.endTransmission() != 0 )
		{
			returnError = IMU_HW_ERROR;
 80833b6:	2401      	movs	r4, #1
 80833b8:	e009      	b.n	80833ce <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xb6>
//    other memory!
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
	status_t returnError = IMU_SUCCESS;
 80833ba:	4604      	mov	r4, r0

	default:
		break;
	}

	return returnError;
 80833bc:	e007      	b.n	80833ce <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0xb6>
		{
			// request 6 bytes from slave device
			Wire.requestFrom(I2CAddress, length);
			while ( (Wire.available()) && (i < length))  // slave may send less than requested
			{
				c = Wire.read(); // receive a byte as character
 80833be:	f003 f8a1 	bl	8086504 <_Z19__fetch_global_Wirev>
 80833c2:	6803      	ldr	r3, [r0, #0]
 80833c4:	695b      	ldr	r3, [r3, #20]
 80833c6:	4798      	blx	r3
				*outputPointer = c;
 80833c8:	f805 0b01 	strb.w	r0, [r5], #1
		}
		else  //OK, all worked, keep going
		{
			// request 6 bytes from slave device
			Wire.requestFrom(I2CAddress, length);
			while ( (Wire.available()) && (i < length))  // slave may send less than requested
 80833cc:	e7d2      	b.n	8083374 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh+0x5c>
	default:
		break;
	}

	return returnError;
}
 80833ce:	4620      	mov	r0, r4
 80833d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80833d4:	20001250 	.word	0x20001250

080833d8 <_ZN11LSM6DS3Core12readRegisterEPhh>:
//  Parameters:
//    *outputPointer -- Pass &variable (address of) to save read data to
//    offset -- register to read
//
//****************************************************************************//
status_t LSM6DS3Core::readRegister(uint8_t* outputPointer, uint8_t offset) {
 80833d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Return value
	uint8_t result;
	uint8_t numBytes = 1;
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {
 80833dc:	7805      	ldrb	r5, [r0, #0]
//  Parameters:
//    *outputPointer -- Pass &variable (address of) to save read data to
//    offset -- register to read
//
//****************************************************************************//
status_t LSM6DS3Core::readRegister(uint8_t* outputPointer, uint8_t offset) {
 80833de:	4604      	mov	r4, r0
 80833e0:	4688      	mov	r8, r1
 80833e2:	4617      	mov	r7, r2
	//Return value
	uint8_t result;
	uint8_t numBytes = 1;
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {
 80833e4:	b1c5      	cbz	r5, 8083418 <_ZN11LSM6DS3Core12readRegisterEPhh+0x40>
 80833e6:	2d01      	cmp	r5, #1
 80833e8:	d13b      	bne.n	8083462 <_ZN11LSM6DS3Core12readRegisterEPhh+0x8a>
		}
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(chipSelectPin, LOW);
 80833ea:	2100      	movs	r1, #0
 80833ec:	7880      	ldrb	r0, [r0, #2]
 80833ee:	f002 ffc2 	bl	8086376 <digitalWrite>
		// send the device the register you want to read:
		SPI2.transfer(offset | 0x80);  //Ored with "read request" bit
 80833f2:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 80833f6:	481e      	ldr	r0, [pc, #120]	; (8083470 <_ZN11LSM6DS3Core12readRegisterEPhh+0x98>)
 80833f8:	f001 fb6c 	bl	8084ad4 <_ZN8SPIClass8transferEh>
		// send a value of 0 to read the first byte returned:
		result = SPI2.transfer(0x00);
 80833fc:	2100      	movs	r1, #0
 80833fe:	481c      	ldr	r0, [pc, #112]	; (8083470 <_ZN11LSM6DS3Core12readRegisterEPhh+0x98>)
 8083400:	f001 fb68 	bl	8084ad4 <_ZN8SPIClass8transferEh>
 8083404:	4606      	mov	r6, r0
		// take the chip select high to de-select:
		digitalWrite(chipSelectPin, HIGH);
 8083406:	4629      	mov	r1, r5
 8083408:	78a0      	ldrb	r0, [r4, #2]
 808340a:	f002 ffb4 	bl	8086376 <digitalWrite>

		if( result == 0xFF )
		{
			//we've recieved all ones, report
			returnError = IMU_ALL_ONES_WARNING;
 808340e:	2eff      	cmp	r6, #255	; 0xff
 8083410:	bf14      	ite	ne
 8083412:	2500      	movne	r5, #0
 8083414:	2505      	moveq	r5, #5
 8083416:	e025      	b.n	8083464 <_ZN11LSM6DS3Core12readRegisterEPhh+0x8c>
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {

	case I2C_MODE:
		Wire.beginTransmission(I2CAddress);
 8083418:	f003 f874 	bl	8086504 <_Z19__fetch_global_Wirev>
 808341c:	7861      	ldrb	r1, [r4, #1]
 808341e:	f002 ff50 	bl	80862c2 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(offset);
 8083422:	f003 f86f 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083426:	6803      	ldr	r3, [r0, #0]
 8083428:	4639      	mov	r1, r7
 808342a:	689b      	ldr	r3, [r3, #8]
 808342c:	4798      	blx	r3
		if( Wire.endTransmission() != 0 )
 808342e:	f003 f869 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083432:	f002 ff51 	bl	80862d8 <_ZN7TwoWire15endTransmissionEv>
//****************************************************************************//
status_t LSM6DS3Core::readRegister(uint8_t* outputPointer, uint8_t offset) {
	//Return value
	uint8_t result;
	uint8_t numBytes = 1;
	status_t returnError = IMU_SUCCESS;
 8083436:	1c05      	adds	r5, r0, #0
 8083438:	bf18      	it	ne
 808343a:	2501      	movne	r5, #1
		Wire.write(offset);
		if( Wire.endTransmission() != 0 )
		{
			returnError = IMU_HW_ERROR;
		}
		Wire.requestFrom(I2CAddress, numBytes);
 808343c:	f003 f862 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083440:	2201      	movs	r2, #1
 8083442:	7861      	ldrb	r1, [r4, #1]
 8083444:	f002 ff35 	bl	80862b2 <_ZN7TwoWire11requestFromEhh>
		while ( Wire.available() ) // slave may send less than requested
 8083448:	f003 f85c 	bl	8086504 <_Z19__fetch_global_Wirev>
 808344c:	6803      	ldr	r3, [r0, #0]
 808344e:	691b      	ldr	r3, [r3, #16]
 8083450:	4798      	blx	r3
 8083452:	b138      	cbz	r0, 8083464 <_ZN11LSM6DS3Core12readRegisterEPhh+0x8c>
		{
			result = Wire.read(); // receive a byte as a proper uint8_t
 8083454:	f003 f856 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083458:	6803      	ldr	r3, [r0, #0]
 808345a:	695b      	ldr	r3, [r3, #20]
 808345c:	4798      	blx	r3
 808345e:	b2c6      	uxtb	r6, r0
		if( Wire.endTransmission() != 0 )
		{
			returnError = IMU_HW_ERROR;
		}
		Wire.requestFrom(I2CAddress, numBytes);
		while ( Wire.available() ) // slave may send less than requested
 8083460:	e7f2      	b.n	8083448 <_ZN11LSM6DS3Core12readRegisterEPhh+0x70>
//****************************************************************************//
status_t LSM6DS3Core::readRegister(uint8_t* outputPointer, uint8_t offset) {
	//Return value
	uint8_t result;
	uint8_t numBytes = 1;
	status_t returnError = IMU_SUCCESS;
 8083462:	2500      	movs	r5, #0

	default:
		break;
	}

	*outputPointer = result;
 8083464:	f888 6000 	strb.w	r6, [r8]
	return returnError;
}
 8083468:	4628      	mov	r0, r5
 808346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808346e:	bf00      	nop
 8083470:	20001250 	.word	0x20001250

08083474 <_ZN11LSM6DS3Core9beginCoreEv>:
	}

}

status_t LSM6DS3Core::beginCore(void)
{
 8083474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {
 8083476:	7804      	ldrb	r4, [r0, #0]
	}

}

status_t LSM6DS3Core::beginCore(void)
{
 8083478:	4605      	mov	r5, r0
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {
 808347a:	b1ac      	cbz	r4, 80834a8 <_ZN11LSM6DS3Core9beginCoreEv+0x34>
 808347c:	2c01      	cmp	r4, #1
 808347e:	d117      	bne.n	80834b0 <_ZN11LSM6DS3Core9beginCoreEv+0x3c>
		Wire.begin();
		break;

	case SPI_MODE:
		// start the SPI2 library:
		SPI2.begin();
 8083480:	4819      	ldr	r0, [pc, #100]	; (80834e8 <_ZN11LSM6DS3Core9beginCoreEv+0x74>)
 8083482:	f001 fac1 	bl	8084a08 <_ZN8SPIClass5beginEv>
		// Maximum SPI frequency is 10MHz, could divide by 2 here:
		SPI2.setClockDivider(SPI_CLOCK_DIV4);
 8083486:	2108      	movs	r1, #8
 8083488:	4817      	ldr	r0, [pc, #92]	; (80834e8 <_ZN11LSM6DS3Core9beginCoreEv+0x74>)
 808348a:	f001 fb0f 	bl	8084aac <_ZN8SPIClass15setClockDividerEh>
		// Data is read and written MSb first.
		SPI2.setBitOrder(MSBFIRST);
 808348e:	4621      	mov	r1, r4
 8083490:	4815      	ldr	r0, [pc, #84]	; (80834e8 <_ZN11LSM6DS3Core9beginCoreEv+0x74>)
 8083492:	f001 fabe 	bl	8084a12 <_ZN8SPIClass11setBitOrderEh>
		SPI.setDataMode(SPI_MODE0);
#else
#endif

		// initalize the  data ready and chip select pins:
		pinMode(chipSelectPin, OUTPUT);
 8083496:	4621      	mov	r1, r4
 8083498:	78a8      	ldrb	r0, [r5, #2]
 808349a:	f002 ff5b 	bl	8086354 <pinMode>
		digitalWrite(chipSelectPin, HIGH);
 808349e:	4621      	mov	r1, r4
 80834a0:	78a8      	ldrb	r0, [r5, #2]
 80834a2:	f002 ff68 	bl	8086376 <digitalWrite>
		break;
 80834a6:	e003      	b.n	80834b0 <_ZN11LSM6DS3Core9beginCoreEv+0x3c>
	status_t returnError = IMU_SUCCESS;

	switch (commInterface) {

	case I2C_MODE:
		Wire.begin();
 80834a8:	f003 f82c 	bl	8086504 <_Z19__fetch_global_Wirev>
 80834ac:	f002 fef2 	bl	8086294 <_ZN7TwoWire5beginEv>
	default:
		break;
	}

	//Spin for a few ms
	volatile uint8_t temp = 0;
 80834b0:	2300      	movs	r3, #0
 80834b2:	f88d 3006 	strb.w	r3, [sp, #6]
 80834b6:	f242 7310 	movw	r3, #10000	; 0x2710
	for( uint16_t i = 0; i < 10000; i++ )
	{
		temp++;
 80834ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80834be:	3b01      	subs	r3, #1
 80834c0:	3201      	adds	r2, #1
 80834c2:	b2d2      	uxtb	r2, r2
 80834c4:	b29b      	uxth	r3, r3
 80834c6:	f88d 2006 	strb.w	r2, [sp, #6]
		break;
	}

	//Spin for a few ms
	volatile uint8_t temp = 0;
	for( uint16_t i = 0; i < 10000; i++ )
 80834ca:	2b00      	cmp	r3, #0
 80834cc:	d1f5      	bne.n	80834ba <_ZN11LSM6DS3Core9beginCoreEv+0x46>
		temp++;
	}

	//Check the ID register to determine if the operation was a success.
	uint8_t readCheck;
	readRegister(&readCheck, LSM6DS3_ACC_GYRO_WHO_AM_I_REG);
 80834ce:	220f      	movs	r2, #15
 80834d0:	f10d 0107 	add.w	r1, sp, #7
 80834d4:	4628      	mov	r0, r5
 80834d6:	f7ff ff7f 	bl	80833d8 <_ZN11LSM6DS3Core12readRegisterEPhh>

}

status_t LSM6DS3Core::beginCore(void)
{
	status_t returnError = IMU_SUCCESS;
 80834da:	f89d 0007 	ldrb.w	r0, [sp, #7]
		returnError = IMU_HW_ERROR;
	}

	return returnError;

}
 80834de:	3869      	subs	r0, #105	; 0x69
 80834e0:	bf18      	it	ne
 80834e2:	2001      	movne	r0, #1
 80834e4:	b003      	add	sp, #12
 80834e6:	bd30      	pop	{r4, r5, pc}
 80834e8:	20001250 	.word	0x20001250

080834ec <_ZN11LSM6DS3Core17readRegisterInt16EPsh>:
//    *outputPointer -- Pass &variable (base address of) to save read data to
//    offset -- register to read
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterInt16( int16_t* outputPointer, uint8_t offset )
{
 80834ec:	b513      	push	{r0, r1, r4, lr}
	uint8_t myBuffer[2];
	status_t returnError = readRegisterRegion(myBuffer, offset, 2);  //Does memory transfer
 80834ee:	2302      	movs	r3, #2
//    *outputPointer -- Pass &variable (base address of) to save read data to
//    offset -- register to read
//
//****************************************************************************//
status_t LSM6DS3Core::readRegisterInt16( int16_t* outputPointer, uint8_t offset )
{
 80834f0:	460c      	mov	r4, r1
	uint8_t myBuffer[2];
	status_t returnError = readRegisterRegion(myBuffer, offset, 2);  //Does memory transfer
 80834f2:	a901      	add	r1, sp, #4
 80834f4:	f7ff ff10 	bl	8083318 <_ZN11LSM6DS3Core18readRegisterRegionEPhhh>
	int16_t output = (int16_t)myBuffer[0] | int16_t(myBuffer[1] << 8);

	*outputPointer = output;
 80834f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80834fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8083500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083504:	8023      	strh	r3, [r4, #0]
	return returnError;
}
 8083506:	b002      	add	sp, #8
 8083508:	bd10      	pop	{r4, pc}
	...

0808350c <_ZN11LSM6DS3Core13writeRegisterEhh>:
//  Parameters:
//    offset -- register to write
//    dataToWrite -- 8 bit data to write to register
//
//****************************************************************************//
status_t LSM6DS3Core::writeRegister(uint8_t offset, uint8_t dataToWrite) {
 808350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	status_t returnError = IMU_SUCCESS;
	switch (commInterface) {
 808350e:	7805      	ldrb	r5, [r0, #0]
//  Parameters:
//    offset -- register to write
//    dataToWrite -- 8 bit data to write to register
//
//****************************************************************************//
status_t LSM6DS3Core::writeRegister(uint8_t offset, uint8_t dataToWrite) {
 8083510:	4604      	mov	r4, r0
 8083512:	460f      	mov	r7, r1
 8083514:	4616      	mov	r6, r2
	status_t returnError = IMU_SUCCESS;
	switch (commInterface) {
 8083516:	b195      	cbz	r5, 808353e <_ZN11LSM6DS3Core13writeRegisterEhh+0x32>
 8083518:	2d01      	cmp	r5, #1
 808351a:	d129      	bne.n	8083570 <_ZN11LSM6DS3Core13writeRegisterEhh+0x64>
		}
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(chipSelectPin, LOW);
 808351c:	2100      	movs	r1, #0
 808351e:	7880      	ldrb	r0, [r0, #2]
 8083520:	f002 ff29 	bl	8086376 <digitalWrite>
		// send the device the register you want to read:
		SPI2.transfer(offset);
 8083524:	4639      	mov	r1, r7
 8083526:	4813      	ldr	r0, [pc, #76]	; (8083574 <_ZN11LSM6DS3Core13writeRegisterEhh+0x68>)
 8083528:	f001 fad4 	bl	8084ad4 <_ZN8SPIClass8transferEh>
		// send a value of 0 to read the first byte returned:
		SPI2.transfer(dataToWrite);
 808352c:	4631      	mov	r1, r6
 808352e:	4811      	ldr	r0, [pc, #68]	; (8083574 <_ZN11LSM6DS3Core13writeRegisterEhh+0x68>)
 8083530:	f001 fad0 	bl	8084ad4 <_ZN8SPIClass8transferEh>
		// decrement the number of bytes left to read:
		// take the chip select high to de-select:
		digitalWrite(chipSelectPin, HIGH);
 8083534:	4629      	mov	r1, r5
 8083536:	78a0      	ldrb	r0, [r4, #2]
 8083538:	f002 ff1d 	bl	8086376 <digitalWrite>
 808353c:	e018      	b.n	8083570 <_ZN11LSM6DS3Core13writeRegisterEhh+0x64>
status_t LSM6DS3Core::writeRegister(uint8_t offset, uint8_t dataToWrite) {
	status_t returnError = IMU_SUCCESS;
	switch (commInterface) {
	case I2C_MODE:
		//Write the byte
		Wire.beginTransmission(I2CAddress);
 808353e:	f002 ffe1 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083542:	7861      	ldrb	r1, [r4, #1]
 8083544:	f002 febd 	bl	80862c2 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(offset);
 8083548:	f002 ffdc 	bl	8086504 <_Z19__fetch_global_Wirev>
 808354c:	6803      	ldr	r3, [r0, #0]
 808354e:	4639      	mov	r1, r7
 8083550:	689b      	ldr	r3, [r3, #8]
 8083552:	4798      	blx	r3
		Wire.write(dataToWrite);
 8083554:	f002 ffd6 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083558:	6803      	ldr	r3, [r0, #0]
 808355a:	4631      	mov	r1, r6
 808355c:	689b      	ldr	r3, [r3, #8]
 808355e:	4798      	blx	r3
		if( Wire.endTransmission() != 0 )
 8083560:	f002 ffd0 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083564:	f002 feb8 	bl	80862d8 <_ZN7TwoWire15endTransmissionEv>
		{
			returnError = IMU_HW_ERROR;
 8083568:	3000      	adds	r0, #0
 808356a:	bf18      	it	ne
 808356c:	2001      	movne	r0, #1
 808356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
//    offset -- register to write
//    dataToWrite -- 8 bit data to write to register
//
//****************************************************************************//
status_t LSM6DS3Core::writeRegister(uint8_t offset, uint8_t dataToWrite) {
	status_t returnError = IMU_SUCCESS;
 8083570:	2000      	movs	r0, #0
	default:
		break;
	}

	return returnError;
}
 8083572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083574:	20001250 	.word	0x20001250

08083578 <_ZN7LSM6DS3C1Ehh>:
//  Main user class -- wrapper for the core class + maths
//
//  Construct with same rules as the core ( uint8_t busType, uint8_t inputArg )
//
//****************************************************************************//
LSM6DS3::LSM6DS3( uint8_t busType, uint8_t inputArg ) : LSM6DS3Core( busType, inputArg )
 8083578:	b510      	push	{r4, lr}
 808357a:	4604      	mov	r4, r0
 808357c:	f7ff fec0 	bl	8083300 <_ZN11LSM6DS3CoreC1Ehh>
{
	//Construct with these default settings

	settings.gyroEnabled = 1;  //Can be 0 or 1
 8083580:	2301      	movs	r3, #1
 8083582:	7123      	strb	r3, [r4, #4]
	settings.gyroRange = 2000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	settings.gyroSampleRate = 416;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	settings.gyroBandWidth = 400;  //Hz.  Can be: 50, 100, 200, 400;
	settings.gyroFifoEnabled = 1;  //Set to include gyro in FIFO
 8083584:	7323      	strb	r3, [r4, #12]
	settings.gyroFifoDecimation = 1;  //set 1 for on /1
 8083586:	7363      	strb	r3, [r4, #13]

	settings.accelEnabled = 1;
 8083588:	73a3      	strb	r3, [r4, #14]
	settings.accelODROff = 1;
 808358a:	73e3      	strb	r3, [r4, #15]
	settings.accelRange = 16;      //Max G force readable.  Can be: 2, 4, 8, 16
	settings.accelSampleRate = 416;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
	settings.accelBandWidth = 100;  //Hz.  Can be: 50, 100, 200, 400;
	settings.accelFifoEnabled = 1;  //Set to include accelerometer in the FIFO
 808358c:	75a3      	strb	r3, [r4, #22]
	settings.accelFifoDecimation = 1;  //set 1 for on /1
 808358e:	75e3      	strb	r3, [r4, #23]

	settings.tempEnabled = 1;
 8083590:	7623      	strb	r3, [r4, #24]

	//Select interface mode
	settings.commMode = 1;  //Can be modes 1, 2 or 3
 8083592:	7663      	strb	r3, [r4, #25]

	//FIFO control data
	settings.fifoThreshold = 3000;  //Can be 0 to 4096 (16 bit bytes)
 8083594:	f640 33b8 	movw	r3, #3000	; 0xbb8
LSM6DS3::LSM6DS3( uint8_t busType, uint8_t inputArg ) : LSM6DS3Core( busType, inputArg )
{
	//Construct with these default settings

	settings.gyroEnabled = 1;  //Can be 0 or 1
	settings.gyroRange = 2000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
 8083598:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 808359c:	80e2      	strh	r2, [r4, #6]
	settings.gyroSampleRate = 416;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
	settings.gyroBandWidth = 400;  //Hz.  Can be: 50, 100, 200, 400;
 808359e:	f44f 71c8 	mov.w	r1, #400	; 0x190
{
	//Construct with these default settings

	settings.gyroEnabled = 1;  //Can be 0 or 1
	settings.gyroRange = 2000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	settings.gyroSampleRate = 416;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
 80835a2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0

	//Select interface mode
	settings.commMode = 1;  //Can be modes 1, 2 or 3

	//FIFO control data
	settings.fifoThreshold = 3000;  //Can be 0 to 4096 (16 bit bytes)
 80835a6:	8363      	strh	r3, [r4, #26]
	settings.fifoSampleRate = 10;  //default 10Hz
 80835a8:	230a      	movs	r3, #10
{
	//Construct with these default settings

	settings.gyroEnabled = 1;  //Can be 0 or 1
	settings.gyroRange = 2000;   //Max deg/s.  Can be: 125, 245, 500, 1000, 2000
	settings.gyroSampleRate = 416;   //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666
 80835aa:	8122      	strh	r2, [r4, #8]
	settings.gyroBandWidth = 400;  //Hz.  Can be: 50, 100, 200, 400;
 80835ac:	8161      	strh	r1, [r4, #10]
	settings.gyroFifoDecimation = 1;  //set 1 for on /1

	settings.accelEnabled = 1;
	settings.accelODROff = 1;
	settings.accelRange = 16;      //Max G force readable.  Can be: 2, 4, 8, 16
	settings.accelSampleRate = 416;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
 80835ae:	8262      	strh	r2, [r4, #18]
	settings.gyroFifoEnabled = 1;  //Set to include gyro in FIFO
	settings.gyroFifoDecimation = 1;  //set 1 for on /1

	settings.accelEnabled = 1;
	settings.accelODROff = 1;
	settings.accelRange = 16;      //Max G force readable.  Can be: 2, 4, 8, 16
 80835b0:	2110      	movs	r1, #16
	settings.accelSampleRate = 416;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
	settings.accelBandWidth = 100;  //Hz.  Can be: 50, 100, 200, 400;
 80835b2:	2264      	movs	r2, #100	; 0x64
	//Select interface mode
	settings.commMode = 1;  //Can be modes 1, 2 or 3

	//FIFO control data
	settings.fifoThreshold = 3000;  //Can be 0 to 4096 (16 bit bytes)
	settings.fifoSampleRate = 10;  //default 10Hz
 80835b4:	83a3      	strh	r3, [r4, #28]
	settings.fifoModeWord = 0;  //Default off
 80835b6:	2300      	movs	r3, #0
	settings.gyroFifoEnabled = 1;  //Set to include gyro in FIFO
	settings.gyroFifoDecimation = 1;  //set 1 for on /1

	settings.accelEnabled = 1;
	settings.accelODROff = 1;
	settings.accelRange = 16;      //Max G force readable.  Can be: 2, 4, 8, 16
 80835b8:	8221      	strh	r1, [r4, #16]
	settings.accelSampleRate = 416;  //Hz.  Can be: 13, 26, 52, 104, 208, 416, 833, 1666, 3332, 6664, 13330
	settings.accelBandWidth = 100;  //Hz.  Can be: 50, 100, 200, 400;
 80835ba:	82a2      	strh	r2, [r4, #20]
	settings.commMode = 1;  //Can be modes 1, 2 or 3

	//FIFO control data
	settings.fifoThreshold = 3000;  //Can be 0 to 4096 (16 bit bytes)
	settings.fifoSampleRate = 10;  //default 10Hz
	settings.fifoModeWord = 0;  //Default off
 80835bc:	77a3      	strb	r3, [r4, #30]

	allOnesCounter = 0;
 80835be:	8423      	strh	r3, [r4, #32]
	nonSuccessCounter = 0;
 80835c0:	8463      	strh	r3, [r4, #34]	; 0x22

}
 80835c2:	4620      	mov	r0, r4
 80835c4:	bd10      	pop	{r4, pc}

080835c6 <_ZN7LSM6DS35beginEv>:
//  Use statements such as "myIMU.settings.commInterface = SPI_MODE;" or
//  "myIMU.settings.accelEnabled = 1;" to configure before calling .begin();
//
//****************************************************************************//
status_t LSM6DS3::begin()
{
 80835c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80835c8:	4605      	mov	r5, r0
	//Check the settings structure values to determine how to setup the device
	uint8_t dataToWrite = 0;  //Temporary variable
 80835ca:	2600      	movs	r6, #0
 80835cc:	f88d 6006 	strb.w	r6, [sp, #6]

	//Begin the inherited core.  This gets the physical wires connected
	status_t returnError = beginCore();
 80835d0:	f7ff ff50 	bl	8083474 <_ZN11LSM6DS3Core9beginCoreEv>

	//Setup the accelerometer******************************
	dataToWrite = 0; //Start Fresh!
	if ( settings.accelEnabled == 1) {
 80835d4:	7baa      	ldrb	r2, [r5, #14]
{
	//Check the settings structure values to determine how to setup the device
	uint8_t dataToWrite = 0;  //Temporary variable

	//Begin the inherited core.  This gets the physical wires connected
	status_t returnError = beginCore();
 80835d6:	4604      	mov	r4, r0

	//Setup the accelerometer******************************
	dataToWrite = 0; //Start Fresh!
	if ( settings.accelEnabled == 1) {
 80835d8:	2a01      	cmp	r2, #1

	//Begin the inherited core.  This gets the physical wires connected
	status_t returnError = beginCore();

	//Setup the accelerometer******************************
	dataToWrite = 0; //Start Fresh!
 80835da:	f88d 6006 	strb.w	r6, [sp, #6]
	if ( settings.accelEnabled == 1) {
 80835de:	d16b      	bne.n	80836b8 <_ZN7LSM6DS35beginEv+0xf2>
		//Build config reg
		//First patch in filter bandwidth
		switch (settings.accelBandWidth) {
 80835e0:	8aab      	ldrh	r3, [r5, #20]
 80835e2:	2b64      	cmp	r3, #100	; 0x64
 80835e4:	d005      	beq.n	80835f2 <_ZN7LSM6DS35beginEv+0x2c>
 80835e6:	2bc8      	cmp	r3, #200	; 0xc8
 80835e8:	d007      	beq.n	80835fa <_ZN7LSM6DS35beginEv+0x34>
 80835ea:	2b32      	cmp	r3, #50	; 0x32
 80835ec:	d107      	bne.n	80835fe <_ZN7LSM6DS35beginEv+0x38>
		case 50:
			dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_50Hz;
 80835ee:	2303      	movs	r3, #3
 80835f0:	e000      	b.n	80835f4 <_ZN7LSM6DS35beginEv+0x2e>
			break;
		case 100:
			dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_100Hz;
 80835f2:	2302      	movs	r3, #2
 80835f4:	f88d 3006 	strb.w	r3, [sp, #6]
			break;
 80835f8:	e001      	b.n	80835fe <_ZN7LSM6DS35beginEv+0x38>
		case 200:
			dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_200Hz;
 80835fa:	f88d 2006 	strb.w	r2, [sp, #6]
		case 400:
			dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_400Hz;
			break;
		}
		//Next, patch in full scale
		switch (settings.accelRange) {
 80835fe:	8a2a      	ldrh	r2, [r5, #16]
 8083600:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8083604:	2a04      	cmp	r2, #4
 8083606:	d006      	beq.n	8083616 <_ZN7LSM6DS35beginEv+0x50>
 8083608:	2a08      	cmp	r2, #8
 808360a:	d007      	beq.n	808361c <_ZN7LSM6DS35beginEv+0x56>
 808360c:	2a02      	cmp	r2, #2
 808360e:	d009      	beq.n	8083624 <_ZN7LSM6DS35beginEv+0x5e>
		case 8:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_8g;
			break;
		default:  //set default case to 16(max)
		case 16:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_16g;
 8083610:	f043 0304 	orr.w	r3, r3, #4
 8083614:	e004      	b.n	8083620 <_ZN7LSM6DS35beginEv+0x5a>
		switch (settings.accelRange) {
		case 2:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_2g;
			break;
		case 4:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_4g;
 8083616:	f043 0308 	orr.w	r3, r3, #8
 808361a:	e001      	b.n	8083620 <_ZN7LSM6DS35beginEv+0x5a>
			break;
		case 8:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_8g;
 808361c:	f043 030c 	orr.w	r3, r3, #12
			break;
		default:  //set default case to 16(max)
		case 16:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_16g;
 8083620:	f88d 3006 	strb.w	r3, [sp, #6]
			break;
		}
		//Lastly, patch in accelerometer ODR
		switch (settings.accelSampleRate) {
 8083624:	8a6a      	ldrh	r2, [r5, #18]
 8083626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 808362a:	f5b2 7fd0 	cmp.w	r2, #416	; 0x1a0
 808362e:	d030      	beq.n	8083692 <_ZN7LSM6DS35beginEv+0xcc>
 8083630:	d80c      	bhi.n	808364c <_ZN7LSM6DS35beginEv+0x86>
 8083632:	2a1a      	cmp	r2, #26
 8083634:	d021      	beq.n	808367a <_ZN7LSM6DS35beginEv+0xb4>
 8083636:	d804      	bhi.n	8083642 <_ZN7LSM6DS35beginEv+0x7c>
 8083638:	2a0d      	cmp	r2, #13
 808363a:	d124      	bne.n	8083686 <_ZN7LSM6DS35beginEv+0xc0>
		case 13:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_13Hz;
 808363c:	f043 0310 	orr.w	r3, r3, #16
 8083640:	e038      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
		case 16:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_16g;
			break;
		}
		//Lastly, patch in accelerometer ODR
		switch (settings.accelSampleRate) {
 8083642:	2a34      	cmp	r2, #52	; 0x34
 8083644:	d01c      	beq.n	8083680 <_ZN7LSM6DS35beginEv+0xba>
 8083646:	2ad0      	cmp	r2, #208	; 0xd0
 8083648:	d020      	beq.n	808368c <_ZN7LSM6DS35beginEv+0xc6>
 808364a:	e01c      	b.n	8083686 <_ZN7LSM6DS35beginEv+0xc0>
 808364c:	f640 5102 	movw	r1, #3330	; 0xd02
 8083650:	428a      	cmp	r2, r1
 8083652:	d027      	beq.n	80836a4 <_ZN7LSM6DS35beginEv+0xde>
 8083654:	d808      	bhi.n	8083668 <_ZN7LSM6DS35beginEv+0xa2>
 8083656:	f240 3141 	movw	r1, #833	; 0x341
 808365a:	428a      	cmp	r2, r1
 808365c:	d01c      	beq.n	8083698 <_ZN7LSM6DS35beginEv+0xd2>
 808365e:	f240 617c 	movw	r1, #1660	; 0x67c
 8083662:	428a      	cmp	r2, r1
 8083664:	d01b      	beq.n	808369e <_ZN7LSM6DS35beginEv+0xd8>
 8083666:	e00e      	b.n	8083686 <_ZN7LSM6DS35beginEv+0xc0>
 8083668:	f641 2104 	movw	r1, #6660	; 0x1a04
 808366c:	428a      	cmp	r2, r1
 808366e:	d01c      	beq.n	80836aa <_ZN7LSM6DS35beginEv+0xe4>
 8083670:	f243 4112 	movw	r1, #13330	; 0x3412
 8083674:	428a      	cmp	r2, r1
 8083676:	d01b      	beq.n	80836b0 <_ZN7LSM6DS35beginEv+0xea>
 8083678:	e005      	b.n	8083686 <_ZN7LSM6DS35beginEv+0xc0>
		case 13:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_13Hz;
			break;
		case 26:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_26Hz;
 808367a:	f043 0320 	orr.w	r3, r3, #32
 808367e:	e019      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 52:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_52Hz;
 8083680:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8083684:	e016      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		default:  //Set default to 104
		case 104:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
 8083686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808368a:	e013      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 208:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_208Hz;
 808368c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8083690:	e010      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 416:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_416Hz;
 8083692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8083696:	e00d      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 833:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_833Hz;
 8083698:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 808369c:	e00a      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 1660:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_1660Hz;
 808369e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80836a2:	e007      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 3330:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_3330Hz;
 80836a4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80836a8:	e004      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 6660:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_6660Hz;
 80836aa:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80836ae:	e001      	b.n	80836b4 <_ZN7LSM6DS35beginEv+0xee>
			break;
		case 13330:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_13330Hz;
 80836b0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80836b4:	f88d 3006 	strb.w	r3, [sp, #6]
	{
		//dataToWrite already = 0 (powerdown);
	}

	//Now, write the patched together data
	writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);
 80836b8:	ae02      	add	r6, sp, #8
 80836ba:	f816 2d02 	ldrb.w	r2, [r6, #-2]!
 80836be:	2110      	movs	r1, #16
 80836c0:	4628      	mov	r0, r5
 80836c2:	f7ff ff23 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>

	//Set the ODR bit
	readRegister(&dataToWrite, LSM6DS3_ACC_GYRO_CTRL4_C);
 80836c6:	2213      	movs	r2, #19
 80836c8:	4631      	mov	r1, r6
 80836ca:	4628      	mov	r0, r5
 80836cc:	f7ff fe84 	bl	80833d8 <_ZN11LSM6DS3Core12readRegisterEPhh>
	dataToWrite &= ~((uint8_t)LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED);
 80836d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
	if ( settings.accelODROff == 1) {
 80836d4:	7bea      	ldrb	r2, [r5, #15]
	//Now, write the patched together data
	writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);

	//Set the ODR bit
	readRegister(&dataToWrite, LSM6DS3_ACC_GYRO_CTRL4_C);
	dataToWrite &= ~((uint8_t)LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED);
 80836d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if ( settings.accelODROff == 1) {
 80836da:	2a01      	cmp	r2, #1
	//Now, write the patched together data
	writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);

	//Set the ODR bit
	readRegister(&dataToWrite, LSM6DS3_ACC_GYRO_CTRL4_C);
	dataToWrite &= ~((uint8_t)LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED);
 80836dc:	f88d 3006 	strb.w	r3, [sp, #6]
	if ( settings.accelODROff == 1) {
		dataToWrite |= LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED;
 80836e0:	bf04      	itt	eq
 80836e2:	f063 037f 	orneq	r3, r3, #127	; 0x7f
 80836e6:	f88d 3006 	strbeq.w	r3, [sp, #6]
	}
	writeRegister(LSM6DS3_ACC_GYRO_CTRL4_C, dataToWrite);
 80836ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80836ee:	2113      	movs	r1, #19
 80836f0:	4628      	mov	r0, r5
 80836f2:	f7ff ff0b 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>

	//Setup the gyroscope**********************************************
	dataToWrite = 0; //Start Fresh!
 80836f6:	2300      	movs	r3, #0
 80836f8:	f88d 3006 	strb.w	r3, [sp, #6]
	if ( settings.gyroEnabled == 1) {
 80836fc:	792b      	ldrb	r3, [r5, #4]
 80836fe:	2b01      	cmp	r3, #1
 8083700:	d145      	bne.n	808378e <_ZN7LSM6DS35beginEv+0x1c8>
		//Build config reg
		//First, patch in full scale
		switch (settings.gyroRange) {
 8083702:	88eb      	ldrh	r3, [r5, #6]
 8083704:	2bf5      	cmp	r3, #245	; 0xf5
 8083706:	d011      	beq.n	808372c <_ZN7LSM6DS35beginEv+0x166>
 8083708:	d803      	bhi.n	8083712 <_ZN7LSM6DS35beginEv+0x14c>
 808370a:	2b7d      	cmp	r3, #125	; 0x7d
 808370c:	d10b      	bne.n	8083726 <_ZN7LSM6DS35beginEv+0x160>
		case 125:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_125_ENABLED;
 808370e:	2302      	movs	r3, #2
 8083710:	e00a      	b.n	8083728 <_ZN7LSM6DS35beginEv+0x162>
	//Setup the gyroscope**********************************************
	dataToWrite = 0; //Start Fresh!
	if ( settings.gyroEnabled == 1) {
		//Build config reg
		//First, patch in full scale
		switch (settings.gyroRange) {
 8083712:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8083716:	d004      	beq.n	8083722 <_ZN7LSM6DS35beginEv+0x15c>
 8083718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808371c:	d103      	bne.n	8083726 <_ZN7LSM6DS35beginEv+0x160>
			break;
		case 500:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_500dps;
			break;
		case 1000:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_1000dps;
 808371e:	2308      	movs	r3, #8
 8083720:	e002      	b.n	8083728 <_ZN7LSM6DS35beginEv+0x162>
			break;
		case 245:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_245dps;
			break;
		case 500:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_500dps;
 8083722:	2304      	movs	r3, #4
 8083724:	e000      	b.n	8083728 <_ZN7LSM6DS35beginEv+0x162>
		case 1000:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_1000dps;
			break;
		default:  //Default to full 2000DPS range
		case 2000:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_2000dps;
 8083726:	230c      	movs	r3, #12
 8083728:	f88d 3006 	strb.w	r3, [sp, #6]
			break;
		}
		//Lastly, patch in gyro ODR
		switch (settings.gyroSampleRate) {
 808372c:	892a      	ldrh	r2, [r5, #8]
 808372e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8083732:	2ad0      	cmp	r2, #208	; 0xd0
 8083734:	d01e      	beq.n	8083774 <_ZN7LSM6DS35beginEv+0x1ae>
 8083736:	d808      	bhi.n	808374a <_ZN7LSM6DS35beginEv+0x184>
 8083738:	2a1a      	cmp	r2, #26
 808373a:	d012      	beq.n	8083762 <_ZN7LSM6DS35beginEv+0x19c>
 808373c:	2a34      	cmp	r2, #52	; 0x34
 808373e:	d013      	beq.n	8083768 <_ZN7LSM6DS35beginEv+0x1a2>
 8083740:	2a0d      	cmp	r2, #13
 8083742:	d114      	bne.n	808376e <_ZN7LSM6DS35beginEv+0x1a8>
		case 13:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_13Hz;
 8083744:	f043 0310 	orr.w	r3, r3, #16
 8083748:	e01f      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
		case 2000:
			dataToWrite |= LSM6DS3_ACC_GYRO_FS_G_2000dps;
			break;
		}
		//Lastly, patch in gyro ODR
		switch (settings.gyroSampleRate) {
 808374a:	f240 3141 	movw	r1, #833	; 0x341
 808374e:	428a      	cmp	r2, r1
 8083750:	d016      	beq.n	8083780 <_ZN7LSM6DS35beginEv+0x1ba>
 8083752:	f240 617c 	movw	r1, #1660	; 0x67c
 8083756:	428a      	cmp	r2, r1
 8083758:	d015      	beq.n	8083786 <_ZN7LSM6DS35beginEv+0x1c0>
 808375a:	f5b2 7fd0 	cmp.w	r2, #416	; 0x1a0
 808375e:	d106      	bne.n	808376e <_ZN7LSM6DS35beginEv+0x1a8>
 8083760:	e00b      	b.n	808377a <_ZN7LSM6DS35beginEv+0x1b4>
		case 13:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_13Hz;
			break;
		case 26:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_26Hz;
 8083762:	f043 0320 	orr.w	r3, r3, #32
 8083766:	e010      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		case 52:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_52Hz;
 8083768:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 808376c:	e00d      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		default:  //Set default to 104
		case 104:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_104Hz;
 808376e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8083772:	e00a      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		case 208:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_208Hz;
 8083774:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8083778:	e007      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		case 416:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_416Hz;
 808377a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 808377e:	e004      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		case 833:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_833Hz;
 8083780:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8083784:	e001      	b.n	808378a <_ZN7LSM6DS35beginEv+0x1c4>
			break;
		case 1660:
			dataToWrite |= LSM6DS3_ACC_GYRO_ODR_G_1660Hz;
 8083786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808378a:	f88d 3006 	strb.w	r3, [sp, #6]
	else
	{
		//dataToWrite already = 0 (powerdown);
	}
	//Write the byte
	writeRegister(LSM6DS3_ACC_GYRO_CTRL2_G, dataToWrite);
 808378e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8083792:	2111      	movs	r1, #17
 8083794:	4628      	mov	r0, r5
 8083796:	f7ff feb9 	bl	808350c <_ZN11LSM6DS3Core13writeRegisterEhh>
	if ( settings.tempEnabled == 1) {
	}

	//Return WHO AM I reg  //Not no mo!
	uint8_t result;
	readRegister(&result, LSM6DS3_ACC_GYRO_WHO_AM_I_REG);
 808379a:	220f      	movs	r2, #15
 808379c:	f10d 0107 	add.w	r1, sp, #7
 80837a0:	4628      	mov	r0, r5
 80837a2:	f7ff fe19 	bl	80833d8 <_ZN11LSM6DS3Core12readRegisterEPhh>

	return returnError;
}
 80837a6:	4620      	mov	r0, r4
 80837a8:	b002      	add	sp, #8
 80837aa:	bd70      	pop	{r4, r5, r6, pc}

080837ac <_ZN7LSM6DS313readRawAccelXEv>:
//
//  Accelerometer section
//
//****************************************************************************//
int16_t LSM6DS3::readRawAccelX( void )
{
 80837ac:	b513      	push	{r0, r1, r4, lr}
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTX_L_XL );
 80837ae:	2228      	movs	r2, #40	; 0x28
 80837b0:	f10d 0106 	add.w	r1, sp, #6
//
//  Accelerometer section
//
//****************************************************************************//
int16_t LSM6DS3::readRawAccelX( void )
{
 80837b4:	4604      	mov	r4, r0
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTX_L_XL );
 80837b6:	f7ff fe99 	bl	80834ec <_ZN11LSM6DS3Core17readRegisterInt16EPsh>
	if( errorLevel != IMU_SUCCESS )
 80837ba:	b140      	cbz	r0, 80837ce <_ZN7LSM6DS313readRawAccelXEv+0x22>
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
 80837bc:	2805      	cmp	r0, #5
		{
			allOnesCounter++;
 80837be:	bf0b      	itete	eq
 80837c0:	8c23      	ldrheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 80837c2:	8c63      	ldrhne	r3, [r4, #34]	; 0x22
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTX_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 80837c4:	3301      	addeq	r3, #1
		}
		else
		{
			nonSuccessCounter++;
 80837c6:	3301      	addne	r3, #1
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTX_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 80837c8:	bf0c      	ite	eq
 80837ca:	8423      	strheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 80837cc:	8463      	strhne	r3, [r4, #34]	; 0x22
		}
	}
	return output;
}
 80837ce:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80837d2:	b002      	add	sp, #8
 80837d4:	bd10      	pop	{r4, pc}

080837d6 <_ZN7LSM6DS313readRawAccelYEv>:
	float output = calcAccel(readRawAccelX());
	return output;
}

int16_t LSM6DS3::readRawAccelY( void )
{
 80837d6:	b513      	push	{r0, r1, r4, lr}
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTY_L_XL );
 80837d8:	222a      	movs	r2, #42	; 0x2a
 80837da:	f10d 0106 	add.w	r1, sp, #6
	float output = calcAccel(readRawAccelX());
	return output;
}

int16_t LSM6DS3::readRawAccelY( void )
{
 80837de:	4604      	mov	r4, r0
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTY_L_XL );
 80837e0:	f7ff fe84 	bl	80834ec <_ZN11LSM6DS3Core17readRegisterInt16EPsh>
	if( errorLevel != IMU_SUCCESS )
 80837e4:	b140      	cbz	r0, 80837f8 <_ZN7LSM6DS313readRawAccelYEv+0x22>
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
 80837e6:	2805      	cmp	r0, #5
		{
			allOnesCounter++;
 80837e8:	bf0b      	itete	eq
 80837ea:	8c23      	ldrheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 80837ec:	8c63      	ldrhne	r3, [r4, #34]	; 0x22
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTY_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 80837ee:	3301      	addeq	r3, #1
		}
		else
		{
			nonSuccessCounter++;
 80837f0:	3301      	addne	r3, #1
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTY_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 80837f2:	bf0c      	ite	eq
 80837f4:	8423      	strheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 80837f6:	8463      	strhne	r3, [r4, #34]	; 0x22
		}
	}
	return output;
}
 80837f8:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80837fc:	b002      	add	sp, #8
 80837fe:	bd10      	pop	{r4, pc}

08083800 <_ZN7LSM6DS313readRawAccelZEv>:
	float output = calcAccel(readRawAccelY());
	return output;
}

int16_t LSM6DS3::readRawAccelZ( void )
{
 8083800:	b513      	push	{r0, r1, r4, lr}
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTZ_L_XL );
 8083802:	222c      	movs	r2, #44	; 0x2c
 8083804:	f10d 0106 	add.w	r1, sp, #6
	float output = calcAccel(readRawAccelY());
	return output;
}

int16_t LSM6DS3::readRawAccelZ( void )
{
 8083808:	4604      	mov	r4, r0
	int16_t output;
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTZ_L_XL );
 808380a:	f7ff fe6f 	bl	80834ec <_ZN11LSM6DS3Core17readRegisterInt16EPsh>
	if( errorLevel != IMU_SUCCESS )
 808380e:	b140      	cbz	r0, 8083822 <_ZN7LSM6DS313readRawAccelZEv+0x22>
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
 8083810:	2805      	cmp	r0, #5
		{
			allOnesCounter++;
 8083812:	bf0b      	itete	eq
 8083814:	8c23      	ldrheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 8083816:	8c63      	ldrhne	r3, [r4, #34]	; 0x22
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTZ_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 8083818:	3301      	addeq	r3, #1
		}
		else
		{
			nonSuccessCounter++;
 808381a:	3301      	addne	r3, #1
	status_t errorLevel = readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUTZ_L_XL );
	if( errorLevel != IMU_SUCCESS )
	{
		if( errorLevel == IMU_ALL_ONES_WARNING )
		{
			allOnesCounter++;
 808381c:	bf0c      	ite	eq
 808381e:	8423      	strheq	r3, [r4, #32]
		}
		else
		{
			nonSuccessCounter++;
 8083820:	8463      	strhne	r3, [r4, #34]	; 0x22
		}
	}
	return output;
}
 8083822:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8083826:	b002      	add	sp, #8
 8083828:	bd10      	pop	{r4, pc}
 808382a:	0000      	movs	r0, r0
 808382c:	0000      	movs	r0, r0
	...

08083830 <_ZN7LSM6DS39calcAccelEs>:
	float output = calcAccel(readRawAccelZ());
	return output;
}

float LSM6DS3::calcAccel( int16_t input )
{
 8083830:	b570      	push	{r4, r5, r6, lr}
	float output = (float)input * 0.061 * (settings.accelRange >> 1) / 1000;
	return output;
 8083832:	8a00      	ldrh	r0, [r0, #16]
	float output = calcAccel(readRawAccelZ());
	return output;
}

float LSM6DS3::calcAccel( int16_t input )
{
 8083834:	460e      	mov	r6, r1
	float output = (float)input * 0.061 * (settings.accelRange >> 1) / 1000;
	return output;
 8083836:	0840      	lsrs	r0, r0, #1
 8083838:	f004 fe16 	bl	8088468 <__aeabi_i2d>
 808383c:	4604      	mov	r4, r0
 808383e:	4630      	mov	r0, r6
 8083840:	460d      	mov	r5, r1
 8083842:	f005 fa59 	bl	8088cf8 <__aeabi_i2f>
 8083846:	f004 fe21 	bl	808848c <__aeabi_f2d>
 808384a:	a309      	add	r3, pc, #36	; (adr r3, 8083870 <_ZN7LSM6DS39calcAccelEs+0x40>)
 808384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083850:	f004 fe70 	bl	8088534 <__aeabi_dmul>
 8083854:	4602      	mov	r2, r0
 8083856:	460b      	mov	r3, r1
 8083858:	4620      	mov	r0, r4
 808385a:	4629      	mov	r1, r5
 808385c:	f004 fe6a 	bl	8088534 <__aeabi_dmul>
 8083860:	2200      	movs	r2, #0
 8083862:	4b05      	ldr	r3, [pc, #20]	; (8083878 <_ZN7LSM6DS39calcAccelEs+0x48>)
 8083864:	f004 ff90 	bl	8088788 <__aeabi_ddiv>
 8083868:	f005 f93c 	bl	8088ae4 <__aeabi_d2f>
}
 808386c:	bd70      	pop	{r4, r5, r6, pc}
 808386e:	bf00      	nop
 8083870:	5a1cac08 	.word	0x5a1cac08
 8083874:	3faf3b64 	.word	0x3faf3b64
 8083878:	408f4000 	.word	0x408f4000

0808387c <_ZN7LSM6DS315readFloatAccelXEv>:
		}
	}
	return output;
}
float LSM6DS3::readFloatAccelX( void )
{
 808387c:	b510      	push	{r4, lr}
 808387e:	4604      	mov	r4, r0
	float output = calcAccel(readRawAccelX());
 8083880:	f7ff ff94 	bl	80837ac <_ZN7LSM6DS313readRawAccelXEv>
 8083884:	4601      	mov	r1, r0
 8083886:	4620      	mov	r0, r4
	return output;
}
 8083888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	return output;
}
float LSM6DS3::readFloatAccelX( void )
{
	float output = calcAccel(readRawAccelX());
 808388c:	f7ff bfd0 	b.w	8083830 <_ZN7LSM6DS39calcAccelEs>

08083890 <_ZN7LSM6DS315readFloatAccelYEv>:
		}
	}
	return output;
}
float LSM6DS3::readFloatAccelY( void )
{
 8083890:	b510      	push	{r4, lr}
 8083892:	4604      	mov	r4, r0
	float output = calcAccel(readRawAccelY());
 8083894:	f7ff ff9f 	bl	80837d6 <_ZN7LSM6DS313readRawAccelYEv>
 8083898:	4601      	mov	r1, r0
 808389a:	4620      	mov	r0, r4
	return output;
}
 808389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	return output;
}
float LSM6DS3::readFloatAccelY( void )
{
	float output = calcAccel(readRawAccelY());
 80838a0:	f7ff bfc6 	b.w	8083830 <_ZN7LSM6DS39calcAccelEs>

080838a4 <_ZN7LSM6DS315readFloatAccelZEv>:
		}
	}
	return output;
}
float LSM6DS3::readFloatAccelZ( void )
{
 80838a4:	b510      	push	{r4, lr}
 80838a6:	4604      	mov	r4, r0
	float output = calcAccel(readRawAccelZ());
 80838a8:	f7ff ffaa 	bl	8083800 <_ZN7LSM6DS313readRawAccelZEv>
 80838ac:	4601      	mov	r1, r0
 80838ae:	4620      	mov	r0, r4
	return output;
}
 80838b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	return output;
}
float LSM6DS3::readFloatAccelZ( void )
{
	float output = calcAccel(readRawAccelZ());
 80838b4:	f7ff bfbc 	b.w	8083830 <_ZN7LSM6DS39calcAccelEs>

080838b8 <_ZN7LSM6DS311readRawTempEv>:
//
//  Temperature section
//
//****************************************************************************//
int16_t LSM6DS3::readRawTemp( void )
{
 80838b8:	b507      	push	{r0, r1, r2, lr}
	int16_t output;
	readRegisterInt16( &output, LSM6DS3_ACC_GYRO_OUT_TEMP_L );
 80838ba:	2220      	movs	r2, #32
 80838bc:	f10d 0106 	add.w	r1, sp, #6
 80838c0:	f7ff fe14 	bl	80834ec <_ZN11LSM6DS3Core17readRegisterInt16EPsh>
	return output;
}
 80838c4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80838c8:	b003      	add	sp, #12
 80838ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080838d0 <_ZN7LSM6DS39readTempFEv>:
	return output;

}

float LSM6DS3::readTempF( void )
{
 80838d0:	b508      	push	{r3, lr}
	float output = (float)readRawTemp() / 16; //divide by 16 to scale
 80838d2:	f7ff fff1 	bl	80838b8 <_ZN7LSM6DS311readRawTempEv>
 80838d6:	f005 fa0f 	bl	8088cf8 <__aeabi_i2f>
 80838da:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80838de:	f005 fa5f 	bl	8088da0 <__aeabi_fmul>
	output += 25; //Add 25 degrees to remove offset
	output = (output * 9) / 5 + 32;
 80838e2:	4907      	ldr	r1, [pc, #28]	; (8083900 <_ZN7LSM6DS39readTempFEv+0x30>)
 80838e4:	f005 f954 	bl	8088b90 <__addsf3>
 80838e8:	4906      	ldr	r1, [pc, #24]	; (8083904 <_ZN7LSM6DS39readTempFEv+0x34>)
 80838ea:	f005 fa59 	bl	8088da0 <__aeabi_fmul>
 80838ee:	4906      	ldr	r1, [pc, #24]	; (8083908 <_ZN7LSM6DS39readTempFEv+0x38>)
 80838f0:	f005 fb0a 	bl	8088f08 <__aeabi_fdiv>

	return output;
 80838f4:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80838f8:	f005 f94a 	bl	8088b90 <__addsf3>

}
 80838fc:	bd08      	pop	{r3, pc}
 80838fe:	bf00      	nop
 8083900:	41c80000 	.word	0x41c80000
 8083904:	41100000 	.word	0x41100000
 8083908:	40a00000 	.word	0x40a00000

0808390c <_GLOBAL__sub_I__ZN11LSM6DS3CoreC2Ehh>:
 808390c:	f000 bc42 	b.w	8084194 <HAL_Pin_Map>

08083910 <_ZN15Adafruit_SH110613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SH1106::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8083910:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) {
 8083912:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SH1106::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8083914:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  boolean bSwap = false;
  switch(rotation) {
 8083918:	2c02      	cmp	r4, #2
 808391a:	d009      	beq.n	8083930 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x20>
 808391c:	2c03      	cmp	r4, #3
 808391e:	d010      	beq.n	8083942 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x32>
 8083920:	2c01      	cmp	r4, #1
 8083922:	f040 80a9 	bne.w	8083a78 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x168>
    break;
    case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
 8083926:	8904      	ldrh	r4, [r0, #8]
 8083928:	3c01      	subs	r4, #1
 808392a:	1aa2      	subs	r2, r4, r2
 808392c:	b212      	sxth	r2, r2
    break;
 808392e:	e00c      	b.n	808394a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x3a>
    case 2:
    // 180 degree rotation, invert x and y - then shift y around for height.
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
 8083930:	8944      	ldrh	r4, [r0, #10]
 8083932:	3c01      	subs	r4, #1
 8083934:	1aa2      	subs	r2, r4, r2
    x -= (w-1);
 8083936:	8904      	ldrh	r4, [r0, #8]
    x = WIDTH - x - 1;
    break;
    case 2:
    // 180 degree rotation, invert x and y - then shift y around for height.
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
 8083938:	b212      	sxth	r2, r2
    x -= (w-1);
 808393a:	1ae4      	subs	r4, r4, r3
 808393c:	1a61      	subs	r1, r4, r1
 808393e:	b209      	sxth	r1, r1
    break;
 8083940:	e09a      	b.n	8083a78 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x168>
    case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
    bSwap = true;
    sh1106_swap(x, y);
    y = HEIGHT - y - 1;
    y -= (w-1);
 8083942:	8945      	ldrh	r5, [r0, #10]
 8083944:	1aed      	subs	r5, r5, r3
 8083946:	1a6c      	subs	r4, r5, r1
 8083948:	b221      	sxth	r1, r4


void Adafruit_SH1106::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 808394a:	2a00      	cmp	r2, #0
 808394c:	f2c0 8093 	blt.w	8083a76 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x166>
 8083950:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8083954:	4294      	cmp	r4, r2
 8083956:	f340 80d8 	ble.w	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>

  // make sure we don't try to draw below 0
  if(__y < 0) {
 808395a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 808395c:	bfbc      	itt	lt
 808395e:	18c9      	addlt	r1, r1, r3
 8083960:	b20b      	sxthlt	r3, r1
    __y = 0;

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
 8083962:	f9b0 400a 	ldrsh.w	r4, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) {
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 8083966:	bfb8      	it	lt
 8083968:	2100      	movlt	r1, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
 808396a:	18c8      	adds	r0, r1, r3
 808396c:	42a0      	cmp	r0, r4
    __h = (HEIGHT - __y);
 808396e:	bfc4      	itt	gt
 8083970:	1a63      	subgt	r3, r4, r1
 8083972:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
 8083974:	2b00      	cmp	r3, #0
 8083976:	f340 80c8 	ble.w	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 808397a:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 808397c:	08c8      	lsrs	r0, r1, #3
 808397e:	4c63      	ldr	r4, [pc, #396]	; (8083b0c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fc>)
 8083980:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 8083984:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 8083988:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 808398a:	eb04 0502 	add.w	r5, r4, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 808398e:	d028      	beq.n	80839e2 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xd2>
    // mask off the high n bits we want to set
    mod = 8-mod;
 8083990:	f1c1 0008 	rsb	r0, r1, #8
 8083994:	b2c0      	uxtb	r0, r0

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 8083996:	495e      	ldr	r1, [pc, #376]	; (8083b10 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x200>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 8083998:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 808399a:	5c09      	ldrb	r1, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 808399c:	d20c      	bcs.n	80839b8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xa8>
      mask &= (0XFF >> (mod-h));
 808399e:	ebc3 0e00 	rsb	lr, r3, r0
 80839a2:	27ff      	movs	r7, #255	; 0xff
 80839a4:	fa47 f70e 	asr.w	r7, r7, lr
    }

    switch (color)
 80839a8:	2e01      	cmp	r6, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
 80839aa:	ea01 0107 	and.w	r1, r1, r7
    }

    switch (color)
 80839ae:	d005      	beq.n	80839bc <_ZN15Adafruit_SH110613drawFastHLineEssst+0xac>
 80839b0:	d308      	bcc.n	80839c4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xb4>
 80839b2:	2e02      	cmp	r6, #2
 80839b4:	d00c      	beq.n	80839d0 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xc0>
 80839b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80839b8:	2e01      	cmp	r6, #1
 80839ba:	d102      	bne.n	80839c2 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xb2>
    {
      case WHITE:   *pBuf |=  mask;  break;
 80839bc:	5ca7      	ldrb	r7, [r4, r2]
 80839be:	4339      	orrs	r1, r7
 80839c0:	e008      	b.n	80839d4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xc4>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

    switch (color)
 80839c2:	d203      	bcs.n	80839cc <_ZN15Adafruit_SH110613drawFastHLineEssst+0xbc>
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
 80839c4:	5ca7      	ldrb	r7, [r4, r2]
 80839c6:	ea27 0101 	bic.w	r1, r7, r1
 80839ca:	e003      	b.n	80839d4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xc4>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

    switch (color)
 80839cc:	2e02      	cmp	r6, #2
 80839ce:	d105      	bne.n	80839dc <_ZN15Adafruit_SH110613drawFastHLineEssst+0xcc>
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
 80839d0:	5ca7      	ldrb	r7, [r4, r2]
 80839d2:	4079      	eors	r1, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80839d4:	4283      	cmp	r3, r0

    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
 80839d6:	54a1      	strb	r1, [r4, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80839d8:	f0c0 8097 	bcc.w	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>

    h -= mod;
 80839dc:	1a1b      	subs	r3, r3, r0
 80839de:	b2db      	uxtb	r3, r3

    pBuf += SH1106_LCDWIDTH;
 80839e0:	3580      	adds	r5, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
 80839e2:	2b07      	cmp	r3, #7
 80839e4:	d926      	bls.n	8083a34 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x124>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 80839e6:	2e02      	cmp	r6, #2
 80839e8:	f105 0280 	add.w	r2, r5, #128	; 0x80
 80839ec:	d10c      	bne.n	8083a08 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xf8>
 80839ee:	4619      	mov	r1, r3
    do  {
      *pBuf=~(*pBuf);
 80839f0:	f812 0c80 	ldrb.w	r0, [r2, #-128]

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80839f4:	3908      	subs	r1, #8

  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    do  {
      *pBuf=~(*pBuf);
 80839f6:	43c0      	mvns	r0, r0

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80839f8:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80839fa:	2907      	cmp	r1, #7

  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    do  {
      *pBuf=~(*pBuf);
 80839fc:	f802 0c80 	strb.w	r0, [r2, #-128]
 8083a00:	f102 0280 	add.w	r2, r2, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 8083a04:	d8f4      	bhi.n	80839f0 <_ZN15Adafruit_SH110613drawFastHLineEssst+0xe0>
 8083a06:	e027      	b.n	8083a58 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x148>
  }
  else {
    // store a local value to work with
    register uint8_t val = (color == WHITE) ? 255 : 0;
 8083a08:	2e01      	cmp	r6, #1
 8083a0a:	bf0c      	ite	eq
 8083a0c:	20ff      	moveq	r0, #255	; 0xff
 8083a0e:	2000      	movne	r0, #0
 8083a10:	4619      	mov	r1, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 8083a12:	3908      	subs	r1, #8
 8083a14:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 8083a16:	2907      	cmp	r1, #7
    // store a local value to work with
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 8083a18:	f802 0c80 	strb.w	r0, [r2, #-128]
 8083a1c:	f102 0280 	add.w	r2, r2, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 8083a20:	d8f7      	bhi.n	8083a12 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x102>
 8083a22:	f1a3 0208 	sub.w	r2, r3, #8
 8083a26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8083a2a:	3201      	adds	r2, #1
 8083a2c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8083a30:	f003 0307 	and.w	r3, r3, #7
  }
}

// now do the final partial byte, if necessary
if(h) {
 8083a34:	2b00      	cmp	r3, #0
 8083a36:	d068      	beq.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083a38:	4a36      	ldr	r2, [pc, #216]	; (8083b14 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x204>)
  switch (color)
 8083a3a:	2e01      	cmp	r6, #1
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083a3c:	5cd3      	ldrb	r3, [r2, r3]
  switch (color)
 8083a3e:	d003      	beq.n	8083a48 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x138>
 8083a40:	d305      	bcc.n	8083a4e <_ZN15Adafruit_SH110613drawFastHLineEssst+0x13e>
 8083a42:	2e02      	cmp	r6, #2
 8083a44:	d161      	bne.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
 8083a46:	e013      	b.n	8083a70 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x160>
  {
    case WHITE:   *pBuf |=  mask;  break;
 8083a48:	782a      	ldrb	r2, [r5, #0]
 8083a4a:	4313      	orrs	r3, r2
 8083a4c:	e002      	b.n	8083a54 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x144>
    case BLACK:   *pBuf &= ~mask;  break;
 8083a4e:	782a      	ldrb	r2, [r5, #0]
 8083a50:	ea22 0303 	bic.w	r3, r2, r3
 8083a54:	702b      	strb	r3, [r5, #0]
 8083a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083a58:	f1a3 0208 	sub.w	r2, r3, #8
 8083a5c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8083a60:	3201      	adds	r2, #1
    } while(h >= 8);
  }
}

// now do the final partial byte, if necessary
if(h) {
 8083a62:	f013 0307 	ands.w	r3, r3, #7
 8083a66:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8083a6a:	d04e      	beq.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083a6c:	4a29      	ldr	r2, [pc, #164]	; (8083b14 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x204>)
 8083a6e:	5cd3      	ldrb	r3, [r2, r3]
  switch (color)
  {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
 8083a70:	782a      	ldrb	r2, [r5, #0]
 8083a72:	4053      	eors	r3, r2
 8083a74:	e7ee      	b.n	8083a54 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x144>
 8083a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SH1106::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 8083a78:	2a00      	cmp	r2, #0
 8083a7a:	db45      	blt.n	8083b08 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1f8>
 8083a7c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8083a80:	4294      	cmp	r4, r2
 8083a82:	dd42      	ble.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>

  // make sure we don't try to draw below 0
  if(x < 0) {
 8083a84:	2900      	cmp	r1, #0
    w += x;
 8083a86:	bfbc      	itt	lt
 8083a88:	18c9      	addlt	r1, r1, r3
 8083a8a:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
 8083a8c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
 8083a90:	bfb8      	it	lt
 8083a92:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
 8083a94:	18c8      	adds	r0, r1, r3
 8083a96:	42a0      	cmp	r0, r4
    w = (WIDTH - x);
 8083a98:	bfc4      	itt	gt
 8083a9a:	1a63      	subgt	r3, r4, r1
 8083a9c:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 8083a9e:	2b00      	cmp	r3, #0
 8083aa0:	dd33      	ble.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083aa2:	2008      	movs	r0, #8
 8083aa4:	fb92 f0f0 	sdiv	r0, r2, r0
 8083aa8:	4d18      	ldr	r5, [pc, #96]	; (8083b0c <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fc>)
 8083aaa:	eb01 11c0 	add.w	r1, r1, r0, lsl #7

  register uint8_t mask = 1 << (y&7);
 8083aae:	f002 0207 	and.w	r2, r2, #7
 8083ab2:	2001      	movs	r0, #1
 8083ab4:	fa00 f202 	lsl.w	r2, r0, r2

  switch (color)
 8083ab8:	4286      	cmp	r6, r0
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083aba:	440d      	add	r5, r1

  register uint8_t mask = 1 << (y&7);
 8083abc:	b2d2      	uxtb	r2, r2

  switch (color)
 8083abe:	d003      	beq.n	8083ac8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1b8>
 8083ac0:	d30c      	bcc.n	8083adc <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1cc>
 8083ac2:	2e02      	cmp	r6, #2
 8083ac4:	d016      	beq.n	8083af4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e4>
 8083ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083ac8:	1e59      	subs	r1, r3, #1
 8083aca:	b20b      	sxth	r3, r1
  {
    case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8083acc:	1c5c      	adds	r4, r3, #1
 8083ace:	d01c      	beq.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
 8083ad0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083ad4:	4311      	orrs	r1, r2
 8083ad6:	f805 1c01 	strb.w	r1, [r5, #-1]
 8083ada:	e7f5      	b.n	8083ac8 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1b8>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8083adc:	43d2      	mvns	r2, r2
 8083ade:	b2d2      	uxtb	r2, r2
 8083ae0:	1e59      	subs	r1, r3, #1
 8083ae2:	b20b      	sxth	r3, r1
 8083ae4:	1c58      	adds	r0, r3, #1
 8083ae6:	d010      	beq.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
 8083ae8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083aec:	4011      	ands	r1, r2
 8083aee:	f805 1c01 	strb.w	r1, [r5, #-1]
 8083af2:	e7f5      	b.n	8083ae0 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1d0>
 8083af4:	1e59      	subs	r1, r3, #1
 8083af6:	b20b      	sxth	r3, r1
    case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 8083af8:	1c59      	adds	r1, r3, #1
 8083afa:	d006      	beq.n	8083b0a <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1fa>
 8083afc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083b00:	4051      	eors	r1, r2
 8083b02:	f805 1c01 	strb.w	r1, [r5, #-1]
 8083b06:	e7f5      	b.n	8083af4 <_ZN15Adafruit_SH110613drawFastHLineEssst+0x1e4>
 8083b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083b0c:	20000420 	.word	0x20000420
 8083b10:	20000418 	.word	0x20000418
 8083b14:	20000410 	.word	0x20000410

08083b18 <_ZN15Adafruit_SH110613drawFastVLineEssst>:
  }
}

void Adafruit_SH1106::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8083b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) {
 8083b1a:	7e44      	ldrb	r4, [r0, #25]
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
    case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
  }
}

void Adafruit_SH1106::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8083b1c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) {
 8083b20:	2c02      	cmp	r4, #2
 8083b22:	d008      	beq.n	8083b36 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1e>
 8083b24:	2c03      	cmp	r4, #3
 8083b26:	d00f      	beq.n	8083b48 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x30>
 8083b28:	2c01      	cmp	r4, #1
 8083b2a:	d15f      	bne.n	8083bec <_ZN15Adafruit_SH110613drawFastVLineEssst+0xd4>
    case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
    bSwap = true;
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
    x -= (h-1);
 8083b2c:	8904      	ldrh	r4, [r0, #8]
 8083b2e:	1ae4      	subs	r4, r4, r3
 8083b30:	1aa2      	subs	r2, r4, r2
 8083b32:	b212      	sxth	r2, r2
    break;
 8083b34:	e00c      	b.n	8083b50 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x38>
    case 2:
    // 180 degree rotation, invert x and y - then shift y around for height.
    x = WIDTH - x - 1;
 8083b36:	8904      	ldrh	r4, [r0, #8]
 8083b38:	3c01      	subs	r4, #1
 8083b3a:	1a61      	subs	r1, r4, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 8083b3c:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
    x -= (h-1);
    break;
    case 2:
    // 180 degree rotation, invert x and y - then shift y around for height.
    x = WIDTH - x - 1;
 8083b3e:	b209      	sxth	r1, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 8083b40:	1ae4      	subs	r4, r4, r3
 8083b42:	1aa2      	subs	r2, r4, r2
 8083b44:	b212      	sxth	r2, r2
    break;
 8083b46:	e051      	b.n	8083bec <_ZN15Adafruit_SH110613drawFastVLineEssst+0xd4>
    case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    sh1106_swap(x, y);
    y = HEIGHT - y - 1;
 8083b48:	8944      	ldrh	r4, [r0, #10]
 8083b4a:	3c01      	subs	r4, #1
 8083b4c:	1a61      	subs	r1, r4, r1
 8083b4e:	b209      	sxth	r1, r1
  }
}

void Adafruit_SH1106::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 8083b50:	2900      	cmp	r1, #0
 8083b52:	db4a      	blt.n	8083bea <_ZN15Adafruit_SH110613drawFastVLineEssst+0xd2>
 8083b54:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8083b58:	428c      	cmp	r4, r1
 8083b5a:	f340 80da 	ble.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>

  // make sure we don't try to draw below 0
  if(x < 0) {
 8083b5e:	2a00      	cmp	r2, #0
    w += x;
 8083b60:	bfbc      	itt	lt
 8083b62:	18d2      	addlt	r2, r2, r3
 8083b64:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
 8083b66:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
 8083b6a:	bfb8      	it	lt
 8083b6c:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
 8083b6e:	18d4      	adds	r4, r2, r3
 8083b70:	4284      	cmp	r4, r0
    w = (WIDTH - x);
 8083b72:	bfc4      	itt	gt
 8083b74:	1a83      	subgt	r3, r0, r2
 8083b76:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 8083b78:	2b00      	cmp	r3, #0
 8083b7a:	f340 80ca 	ble.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083b7e:	2008      	movs	r0, #8
 8083b80:	fb91 f0f0 	sdiv	r0, r1, r0
 8083b84:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 8083b88:	4862      	ldr	r0, [pc, #392]	; (8083d14 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fc>)

  register uint8_t mask = 1 << (y&7);
 8083b8a:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083b8e:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 8083b90:	2201      	movs	r2, #1
 8083b92:	fa02 f101 	lsl.w	r1, r2, r1

  switch (color)
 8083b96:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 8083b98:	b2c9      	uxtb	r1, r1

  switch (color)
 8083b9a:	d003      	beq.n	8083ba4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x8c>
 8083b9c:	d30d      	bcc.n	8083bba <_ZN15Adafruit_SH110613drawFastVLineEssst+0xa2>
 8083b9e:	2d02      	cmp	r5, #2
 8083ba0:	d018      	beq.n	8083bd4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0xbc>
 8083ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083ba4:	3b01      	subs	r3, #1
 8083ba6:	b21b      	sxth	r3, r3
  {
    case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8083ba8:	1c5d      	adds	r5, r3, #1
 8083baa:	f000 80b2 	beq.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
 8083bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083bb2:	430a      	orrs	r2, r1
 8083bb4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8083bb8:	e7f4      	b.n	8083ba4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x8c>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8083bba:	43c9      	mvns	r1, r1
 8083bbc:	b2c9      	uxtb	r1, r1
 8083bbe:	3b01      	subs	r3, #1
 8083bc0:	b21b      	sxth	r3, r3
 8083bc2:	1c5c      	adds	r4, r3, #1
 8083bc4:	f000 80a5 	beq.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
 8083bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083bcc:	400a      	ands	r2, r1
 8083bce:	f800 2c01 	strb.w	r2, [r0, #-1]
 8083bd2:	e7f4      	b.n	8083bbe <_ZN15Adafruit_SH110613drawFastVLineEssst+0xa6>
 8083bd4:	3b01      	subs	r3, #1
 8083bd6:	b21b      	sxth	r3, r3
    case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 8083bd8:	1c5a      	adds	r2, r3, #1
 8083bda:	f000 809a 	beq.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
 8083bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083be2:	404a      	eors	r2, r1
 8083be4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8083be8:	e7f4      	b.n	8083bd4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0xbc>
 8083bea:	bdf0      	pop	{r4, r5, r6, r7, pc}


void Adafruit_SH1106::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 8083bec:	2900      	cmp	r1, #0
 8083bee:	f2c0 808f 	blt.w	8083d10 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1f8>
 8083bf2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8083bf6:	428c      	cmp	r4, r1
 8083bf8:	f340 808b 	ble.w	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>

  // make sure we don't try to draw below 0
  if(__y < 0) {
 8083bfc:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 8083bfe:	bfbe      	ittt	lt
 8083c00:	189b      	addlt	r3, r3, r2
 8083c02:	b21b      	sxthlt	r3, r3
    __y = 0;
 8083c04:	2200      	movlt	r2, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
 8083c06:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8083c0a:	18d4      	adds	r4, r2, r3
 8083c0c:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 8083c0e:	bfc4      	itt	gt
 8083c10:	1a83      	subgt	r3, r0, r2
 8083c12:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
 8083c14:	2b00      	cmp	r3, #0
 8083c16:	dd7c      	ble.n	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 8083c18:	b2d2      	uxtb	r2, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083c1a:	08d0      	lsrs	r0, r2, #3
 8083c1c:	4e3d      	ldr	r6, [pc, #244]	; (8083d14 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fc>)
 8083c1e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 8083c22:	f012 0207 	ands.w	r2, r2, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 8083c26:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SH1106_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 8083c28:	eb06 0401 	add.w	r4, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 8083c2c:	d027      	beq.n	8083c7e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x166>
    // mask off the high n bits we want to set
    mod = 8-mod;
 8083c2e:	f1c2 0008 	rsb	r0, r2, #8
 8083c32:	b2c0      	uxtb	r0, r0

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 8083c34:	4a38      	ldr	r2, [pc, #224]	; (8083d18 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x200>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 8083c36:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 8083c38:	5c12      	ldrb	r2, [r2, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 8083c3a:	d20c      	bcs.n	8083c56 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x13e>
      mask &= (0XFF >> (mod-h));
 8083c3c:	ebc3 0e00 	rsb	lr, r3, r0
 8083c40:	27ff      	movs	r7, #255	; 0xff
 8083c42:	fa47 f70e 	asr.w	r7, r7, lr
    }

    switch (color)
 8083c46:	2d01      	cmp	r5, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
 8083c48:	ea02 0207 	and.w	r2, r2, r7
    }

    switch (color)
 8083c4c:	d005      	beq.n	8083c5a <_ZN15Adafruit_SH110613drawFastVLineEssst+0x142>
 8083c4e:	d308      	bcc.n	8083c62 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x14a>
 8083c50:	2d02      	cmp	r5, #2
 8083c52:	d00c      	beq.n	8083c6e <_ZN15Adafruit_SH110613drawFastVLineEssst+0x156>
 8083c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083c56:	2d01      	cmp	r5, #1
 8083c58:	d102      	bne.n	8083c60 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x148>
    {
      case WHITE:   *pBuf |=  mask;  break;
 8083c5a:	5c77      	ldrb	r7, [r6, r1]
 8083c5c:	433a      	orrs	r2, r7
 8083c5e:	e008      	b.n	8083c72 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x15a>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

    switch (color)
 8083c60:	d203      	bcs.n	8083c6a <_ZN15Adafruit_SH110613drawFastVLineEssst+0x152>
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
 8083c62:	5c77      	ldrb	r7, [r6, r1]
 8083c64:	ea27 0202 	bic.w	r2, r7, r2
 8083c68:	e003      	b.n	8083c72 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x15a>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

    switch (color)
 8083c6a:	2d02      	cmp	r5, #2
 8083c6c:	d104      	bne.n	8083c78 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x160>
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
 8083c6e:	5c77      	ldrb	r7, [r6, r1]
 8083c70:	407a      	eors	r2, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 8083c72:	4283      	cmp	r3, r0

    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
 8083c74:	5472      	strb	r2, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 8083c76:	d34c      	bcc.n	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>

    h -= mod;
 8083c78:	1a1b      	subs	r3, r3, r0
 8083c7a:	b2db      	uxtb	r3, r3

    pBuf += SH1106_LCDWIDTH;
 8083c7c:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
 8083c7e:	2b07      	cmp	r3, #7
 8083c80:	d926      	bls.n	8083cd0 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1b8>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 8083c82:	2d02      	cmp	r5, #2
 8083c84:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8083c88:	d10c      	bne.n	8083ca4 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x18c>
 8083c8a:	461a      	mov	r2, r3
    do  {
      *pBuf=~(*pBuf);
 8083c8c:	f811 0c80 	ldrb.w	r0, [r1, #-128]

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 8083c90:	3a08      	subs	r2, #8

  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    do  {
      *pBuf=~(*pBuf);
 8083c92:	43c0      	mvns	r0, r0

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 8083c94:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 8083c96:	2a07      	cmp	r2, #7

  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    do  {
      *pBuf=~(*pBuf);
 8083c98:	f801 0c80 	strb.w	r0, [r1, #-128]
 8083c9c:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 8083ca0:	d8f4      	bhi.n	8083c8c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x174>
 8083ca2:	e025      	b.n	8083cf0 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d8>
  }
  else {
    // store a local value to work with
    register uint8_t val = (color == WHITE) ? 255 : 0;
 8083ca4:	2d01      	cmp	r5, #1
 8083ca6:	bf0c      	ite	eq
 8083ca8:	20ff      	moveq	r0, #255	; 0xff
 8083caa:	2000      	movne	r0, #0
 8083cac:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 8083cae:	3a08      	subs	r2, #8
 8083cb0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 8083cb2:	2a07      	cmp	r2, #7
    // store a local value to work with
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 8083cb4:	f801 0c80 	strb.w	r0, [r1, #-128]
 8083cb8:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SH1106_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 8083cbc:	d8f7      	bhi.n	8083cae <_ZN15Adafruit_SH110613drawFastVLineEssst+0x196>
 8083cbe:	f1a3 0208 	sub.w	r2, r3, #8
 8083cc2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8083cc6:	3201      	adds	r2, #1
 8083cc8:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8083ccc:	f003 0307 	and.w	r3, r3, #7
  }
}

// now do the final partial byte, if necessary
if(h) {
 8083cd0:	b1fb      	cbz	r3, 8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083cd2:	4a12      	ldr	r2, [pc, #72]	; (8083d1c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x204>)
  switch (color)
 8083cd4:	2d01      	cmp	r5, #1
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083cd6:	5cd3      	ldrb	r3, [r2, r3]
  switch (color)
 8083cd8:	d003      	beq.n	8083ce2 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1ca>
 8083cda:	d305      	bcc.n	8083ce8 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1d0>
 8083cdc:	2d02      	cmp	r5, #2
 8083cde:	d118      	bne.n	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
 8083ce0:	e012      	b.n	8083d08 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1f0>
  {
    case WHITE:   *pBuf |=  mask;  break;
 8083ce2:	7822      	ldrb	r2, [r4, #0]
 8083ce4:	4313      	orrs	r3, r2
 8083ce6:	e011      	b.n	8083d0c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1f4>
    case BLACK:   *pBuf &= ~mask;  break;
 8083ce8:	7822      	ldrb	r2, [r4, #0]
 8083cea:	ea22 0303 	bic.w	r3, r2, r3
 8083cee:	e00d      	b.n	8083d0c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1f4>
 8083cf0:	f1a3 0208 	sub.w	r2, r3, #8
 8083cf4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8083cf8:	3201      	adds	r2, #1
    } while(h >= 8);
  }
}

// now do the final partial byte, if necessary
if(h) {
 8083cfa:	f013 0307 	ands.w	r3, r3, #7
 8083cfe:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8083d02:	d006      	beq.n	8083d12 <_ZN15Adafruit_SH110613drawFastVLineEssst+0x1fa>
  mod = h & 7;
  // this time we want to mask the low bits of the byte, vs the high bits we did above
  // register uint8_t mask = (1 << mod) - 1;
  // note - lookup table results in a nearly 10% performance improvement in fill* functions
  static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
  register uint8_t mask = postmask[mod];
 8083d04:	4a05      	ldr	r2, [pc, #20]	; (8083d1c <_ZN15Adafruit_SH110613drawFastVLineEssst+0x204>)
 8083d06:	5cd3      	ldrb	r3, [r2, r3]
  switch (color)
  {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
 8083d08:	7822      	ldrb	r2, [r4, #0]
 8083d0a:	4053      	eors	r3, r2
 8083d0c:	7023      	strb	r3, [r4, #0]
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 8083d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d14:	20000420 	.word	0x20000420
 8083d18:	20000418 	.word	0x20000418
 8083d1c:	20000410 	.word	0x20000410

08083d20 <_ZN15Adafruit_SH110612fastSPIwriteEh.isra.1>:
void Adafruit_SH1106::clearDisplay(void) {
  memset(buffer, 0, (SH1106_LCDWIDTH*SH1106_LCDHEIGHT/8));
}


inline void Adafruit_SH1106::fastSPIwrite(uint8_t d) {
 8083d20:	b410      	push	{r4}

  if(hwSPI) {
 8083d22:	b122      	cbz	r2, 8083d2e <_ZN15Adafruit_SH110612fastSPIwriteEh.isra.1+0xe>
    (void)SPI.transfer(d);
 8083d24:	4619      	mov	r1, r3
 8083d26:	4805      	ldr	r0, [pc, #20]	; (8083d3c <_ZN15Adafruit_SH110612fastSPIwriteEh.isra.1+0x1c>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
 8083d28:	bc10      	pop	{r4}


inline void Adafruit_SH1106::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
 8083d2a:	f000 bed3 	b.w	8084ad4 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 8083d2e:	2201      	movs	r2, #1
 8083d30:	b2c9      	uxtb	r1, r1
 8083d32:	b2c0      	uxtb	r0, r0
  }
}
 8083d34:	bc10      	pop	{r4}
inline void Adafruit_SH1106::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 8083d36:	f002 bb37 	b.w	80863a8 <shiftOut>
 8083d3a:	bf00      	nop
 8083d3c:	20001230 	.word	0x20001230

08083d40 <_ZN15Adafruit_SH11069drawPixelEsst>:
};

#define sh1106_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8083d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 8083d42:	1e0d      	subs	r5, r1, #0
};

#define sh1106_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8083d44:	4606      	mov	r6, r0
 8083d46:	4614      	mov	r4, r2
 8083d48:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 8083d4a:	db5b      	blt.n	8083e04 <_ZN15Adafruit_SH11069drawPixelEsst+0xc4>
 8083d4c:	f7ff fad0 	bl	80832f0 <_ZN12Adafruit_GFX5widthEv>
 8083d50:	4285      	cmp	r5, r0
 8083d52:	da57      	bge.n	8083e04 <_ZN15Adafruit_SH11069drawPixelEsst+0xc4>
 8083d54:	2c00      	cmp	r4, #0
 8083d56:	db55      	blt.n	8083e04 <_ZN15Adafruit_SH11069drawPixelEsst+0xc4>
 8083d58:	4630      	mov	r0, r6
 8083d5a:	f7ff facc 	bl	80832f6 <_ZN12Adafruit_GFX6heightEv>
 8083d5e:	4284      	cmp	r4, r0
 8083d60:	da50      	bge.n	8083e04 <_ZN15Adafruit_SH11069drawPixelEsst+0xc4>
  return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 8083d62:	4630      	mov	r0, r6
 8083d64:	f7ff fac2 	bl	80832ec <_ZN12Adafruit_GFX11getRotationEv>
 8083d68:	2802      	cmp	r0, #2
 8083d6a:	d143      	bne.n	8083df4 <_ZN15Adafruit_SH11069drawPixelEsst+0xb4>
    case 1:
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
    break;
    case 2:
    x = WIDTH - x - 1;
 8083d6c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 8083d6e:	8972      	ldrh	r2, [r6, #10]
    case 1:
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
    break;
    case 2:
    x = WIDTH - x - 1;
 8083d70:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 8083d72:	3a01      	subs	r2, #1
    case 1:
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
    break;
    case 2:
    x = WIDTH - x - 1;
 8083d74:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
 8083d76:	1b14      	subs	r4, r2, r4
    case 1:
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
    break;
    case 2:
    x = WIDTH - x - 1;
 8083d78:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 8083d7a:	b224      	sxth	r4, r4
 8083d7c:	e006      	b.n	8083d8c <_ZN15Adafruit_SH11069drawPixelEsst+0x4c>
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
  return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 8083d7e:	2801      	cmp	r0, #1
 8083d80:	d104      	bne.n	8083d8c <_ZN15Adafruit_SH11069drawPixelEsst+0x4c>
    case 1:
    sh1106_swap(x, y);
    x = WIDTH - x - 1;
 8083d82:	8933      	ldrh	r3, [r6, #8]
 8083d84:	3b01      	subs	r3, #1
 8083d86:	1b1b      	subs	r3, r3, r4
 8083d88:	462c      	mov	r4, r5
 8083d8a:	b21d      	sxth	r5, r3
    y = HEIGHT - y - 1;
    break;
  }

  // x is which column
  switch (color)
 8083d8c:	2f01      	cmp	r7, #1
 8083d8e:	d003      	beq.n	8083d98 <_ZN15Adafruit_SH11069drawPixelEsst+0x58>
 8083d90:	d310      	bcc.n	8083db4 <_ZN15Adafruit_SH11069drawPixelEsst+0x74>
 8083d92:	2f02      	cmp	r7, #2
 8083d94:	d01e      	beq.n	8083dd4 <_ZN15Adafruit_SH11069drawPixelEsst+0x94>
 8083d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    case WHITE:   buffer[x+ (y/8)*SH1106_LCDWIDTH] |=  (1 << (y&7)); break;
 8083d98:	2108      	movs	r1, #8
 8083d9a:	fb94 f1f1 	sdiv	r1, r4, r1
 8083d9e:	4a1a      	ldr	r2, [pc, #104]	; (8083e08 <_ZN15Adafruit_SH11069drawPixelEsst+0xc8>)
 8083da0:	b209      	sxth	r1, r1
 8083da2:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 8083da6:	5d53      	ldrb	r3, [r2, r5]
 8083da8:	f004 0407 	and.w	r4, r4, #7
 8083dac:	40a7      	lsls	r7, r4
 8083dae:	431f      	orrs	r7, r3
 8083db0:	5557      	strb	r7, [r2, r5]
 8083db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    case BLACK:   buffer[x+ (y/8)*SH1106_LCDWIDTH] &= ~(1 << (y&7)); break;
 8083db4:	2108      	movs	r1, #8
 8083db6:	fb94 f1f1 	sdiv	r1, r4, r1
 8083dba:	b209      	sxth	r1, r1
 8083dbc:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 8083dc0:	4911      	ldr	r1, [pc, #68]	; (8083e08 <_ZN15Adafruit_SH11069drawPixelEsst+0xc8>)
 8083dc2:	2301      	movs	r3, #1
 8083dc4:	f004 0407 	and.w	r4, r4, #7
 8083dc8:	fa03 f404 	lsl.w	r4, r3, r4
 8083dcc:	5d4b      	ldrb	r3, [r1, r5]
 8083dce:	ea23 0404 	bic.w	r4, r3, r4
 8083dd2:	e00d      	b.n	8083df0 <_ZN15Adafruit_SH11069drawPixelEsst+0xb0>
    case INVERSE: buffer[x+ (y/8)*SH1106_LCDWIDTH] ^=  (1 << (y&7)); break;
 8083dd4:	2108      	movs	r1, #8
 8083dd6:	fb94 f1f1 	sdiv	r1, r4, r1
 8083dda:	b209      	sxth	r1, r1
 8083ddc:	eb05 15c1 	add.w	r5, r5, r1, lsl #7
 8083de0:	4909      	ldr	r1, [pc, #36]	; (8083e08 <_ZN15Adafruit_SH11069drawPixelEsst+0xc8>)
 8083de2:	2301      	movs	r3, #1
 8083de4:	f004 0407 	and.w	r4, r4, #7
 8083de8:	fa03 f404 	lsl.w	r4, r3, r4
 8083dec:	5d4b      	ldrb	r3, [r1, r5]
 8083dee:	405c      	eors	r4, r3
 8083df0:	554c      	strb	r4, [r1, r5]
 8083df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SH1106::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
  return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 8083df4:	2803      	cmp	r0, #3
 8083df6:	d1c2      	bne.n	8083d7e <_ZN15Adafruit_SH11069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
    case 3:
    sh1106_swap(x, y);
    y = HEIGHT - y - 1;
 8083df8:	8973      	ldrh	r3, [r6, #10]
 8083dfa:	3b01      	subs	r3, #1
 8083dfc:	1b5b      	subs	r3, r3, r5
 8083dfe:	4625      	mov	r5, r4
 8083e00:	b21c      	sxth	r4, r3
 8083e02:	e7c3      	b.n	8083d8c <_ZN15Adafruit_SH11069drawPixelEsst+0x4c>
 8083e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083e06:	bf00      	nop
 8083e08:	20000420 	.word	0x20000420

08083e0c <_ZN15Adafruit_SH1106C1Eaaa>:
  sid = SID;
  hwSPI = false;
}

// constructor for hardware SPI - we indicate DataCommand, ChipSelect, Reset
Adafruit_SH1106::Adafruit_SH1106(int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SH1106_LCDWIDTH, SH1106_LCDHEIGHT) {
 8083e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083e0e:	4604      	mov	r4, r0
 8083e10:	461d      	mov	r5, r3
 8083e12:	460f      	mov	r7, r1
 8083e14:	4616      	mov	r6, r2
 8083e16:	2180      	movs	r1, #128	; 0x80
 8083e18:	2240      	movs	r2, #64	; 0x40
 8083e1a:	f7fe ff9d 	bl	8082d58 <_ZN12Adafruit_GFXC1Ess>
 8083e1e:	4b06      	ldr	r3, [pc, #24]	; (8083e38 <_ZN15Adafruit_SH1106C1Eaaa+0x2c>)
  dc = DC;
 8083e20:	77e7      	strb	r7, [r4, #31]
  sid = SID;
  hwSPI = false;
}

// constructor for hardware SPI - we indicate DataCommand, ChipSelect, Reset
Adafruit_SH1106::Adafruit_SH1106(int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SH1106_LCDWIDTH, SH1106_LCDHEIGHT) {
 8083e22:	6023      	str	r3, [r4, #0]
  dc = DC;
  rst = RST;
  cs = CS;
  hwSPI = true;
 8083e24:	2301      	movs	r3, #1
}

// constructor for hardware SPI - we indicate DataCommand, ChipSelect, Reset
Adafruit_SH1106::Adafruit_SH1106(int8_t DC, int8_t RST, int8_t CS) : Adafruit_GFX(SH1106_LCDWIDTH, SH1106_LCDHEIGHT) {
  dc = DC;
  rst = RST;
 8083e26:	f884 6020 	strb.w	r6, [r4, #32]
  cs = CS;
 8083e2a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  hwSPI = true;
 8083e2e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 8083e32:	4620      	mov	r0, r4
 8083e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8083e36:	bf00      	nop
 8083e38:	0808b954 	.word	0x0808b954

08083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>:
  } else {
    SH1106_command(SH1106_NORMALDISPLAY);
  }
}

void Adafruit_SH1106::SH1106_command(uint8_t c) {
 8083e3c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 8083e3e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  } else {
    SH1106_command(SH1106_NORMALDISPLAY);
  }
}

void Adafruit_SH1106::SH1106_command(uint8_t c) {
 8083e42:	4604      	mov	r4, r0
  if (sid != -1)
 8083e44:	3301      	adds	r3, #1
  } else {
    SH1106_command(SH1106_NORMALDISPLAY);
  }
}

void Adafruit_SH1106::SH1106_command(uint8_t c) {
 8083e46:	460d      	mov	r5, r1
  if (sid != -1)
 8083e48:	d022      	beq.n	8083e90 <_ZN15Adafruit_SH110614SH1106_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
 8083e4a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 8083e4e:	2101      	movs	r1, #1
 8083e50:	b280      	uxth	r0, r0
 8083e52:	f002 fa90 	bl	8086376 <digitalWrite>
    digitalWrite(dc, LOW);
 8083e56:	f994 001f 	ldrsb.w	r0, [r4, #31]
 8083e5a:	2100      	movs	r1, #0
 8083e5c:	b280      	uxth	r0, r0
 8083e5e:	f002 fa8a 	bl	8086376 <digitalWrite>
    digitalWrite(cs, LOW);
 8083e62:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 8083e66:	2100      	movs	r1, #0
 8083e68:	b280      	uxth	r0, r0
 8083e6a:	f002 fa84 	bl	8086376 <digitalWrite>
    fastSPIwrite(c);
 8083e6e:	f994 101e 	ldrsb.w	r1, [r4, #30]
 8083e72:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083e76:	462b      	mov	r3, r5
 8083e78:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8083e7c:	f7ff ff50 	bl	8083d20 <_ZN15Adafruit_SH110612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
 8083e80:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 8083e84:	2101      	movs	r1, #1
 8083e86:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
 8083e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
 8083e8c:	f002 ba73 	b.w	8086376 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
 8083e90:	f002 fb38 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083e94:	f994 101b 	ldrsb.w	r1, [r4, #27]
 8083e98:	f002 fa17 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 8083e9c:	f002 fb32 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083ea0:	6803      	ldr	r3, [r0, #0]
 8083ea2:	2100      	movs	r1, #0
 8083ea4:	689b      	ldr	r3, [r3, #8]
 8083ea6:	4798      	blx	r3
    Wire.write(c);
 8083ea8:	f002 fb2c 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083eac:	6803      	ldr	r3, [r0, #0]
 8083eae:	4629      	mov	r1, r5
 8083eb0:	689b      	ldr	r3, [r3, #8]
 8083eb2:	4798      	blx	r3
    Wire.endTransmission();
 8083eb4:	f002 fb26 	bl	8086504 <_Z19__fetch_global_Wirev>
  }
}
 8083eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
 8083ebc:	f002 ba0c 	b.w	80862d8 <_ZN7TwoWire15endTransmissionEv>

08083ec0 <_ZN15Adafruit_SH11065beginEhhb>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}


  void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
 8083ec0:	b538      	push	{r3, r4, r5, lr}
 8083ec2:	4604      	mov	r4, r0
  _vccstate = vccstate;
 8083ec4:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 8083ec6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  sclk = dc = cs = sid = -1;
  rst = reset;
}


  void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
 8083eca:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 8083ecc:	3301      	adds	r3, #1
}


  void Adafruit_SH1106::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
 8083ece:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
 8083ed0:	d033      	beq.n	8083f3a <_ZN15Adafruit_SH11065beginEhhb+0x7a>
    pinMode(dc, OUTPUT);
 8083ed2:	f990 001f 	ldrsb.w	r0, [r0, #31]
 8083ed6:	2101      	movs	r1, #1
 8083ed8:	b280      	uxth	r0, r0
 8083eda:	f002 fa3b 	bl	8086354 <pinMode>
    pinMode(cs, OUTPUT);
 8083ede:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 8083ee2:	2101      	movs	r1, #1
 8083ee4:	b280      	uxth	r0, r0
 8083ee6:	f002 fa35 	bl	8086354 <pinMode>
    if (!hwSPI){
 8083eea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8083eee:	b95b      	cbnz	r3, 8083f08 <_ZN15Adafruit_SH11065beginEhhb+0x48>
      // set pins for software-SPI
      pinMode(sid, OUTPUT);
 8083ef0:	f994 001d 	ldrsb.w	r0, [r4, #29]
 8083ef4:	2101      	movs	r1, #1
 8083ef6:	b280      	uxth	r0, r0
 8083ef8:	f002 fa2c 	bl	8086354 <pinMode>
      pinMode(sclk, OUTPUT);
 8083efc:	f994 001e 	ldrsb.w	r0, [r4, #30]
 8083f00:	2101      	movs	r1, #1
 8083f02:	b280      	uxth	r0, r0
 8083f04:	f002 fa26 	bl	8086354 <pinMode>
    }
    if (hwSPI){
 8083f08:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8083f0c:	b1cb      	cbz	r3, 8083f42 <_ZN15Adafruit_SH11065beginEhhb+0x82>
      digitalWrite(cs, HIGH);
 8083f0e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 8083f12:	2101      	movs	r1, #1
 8083f14:	b280      	uxth	r0, r0
 8083f16:	f002 fa2e 	bl	8086376 <digitalWrite>
      SPI.setBitOrder(MSBFIRST);
 8083f1a:	2101      	movs	r1, #1
 8083f1c:	484f      	ldr	r0, [pc, #316]	; (808405c <_ZN15Adafruit_SH11065beginEhhb+0x19c>)
 8083f1e:	f000 fd78 	bl	8084a12 <_ZN8SPIClass11setBitOrderEh>
      SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
 8083f22:	2110      	movs	r1, #16
 8083f24:	484d      	ldr	r0, [pc, #308]	; (808405c <_ZN15Adafruit_SH11065beginEhhb+0x19c>)
 8083f26:	f000 fdc1 	bl	8084aac <_ZN8SPIClass15setClockDividerEh>
      SPI.setDataMode(0);
 8083f2a:	2100      	movs	r1, #0
 8083f2c:	484b      	ldr	r0, [pc, #300]	; (808405c <_ZN15Adafruit_SH11065beginEhhb+0x19c>)
 8083f2e:	f000 fd73 	bl	8084a18 <_ZN8SPIClass11setDataModeEh>
      SPI.begin();
 8083f32:	484a      	ldr	r0, [pc, #296]	; (808405c <_ZN15Adafruit_SH11065beginEhhb+0x19c>)
 8083f34:	f000 fd68 	bl	8084a08 <_ZN8SPIClass5beginEv>
 8083f38:	e003      	b.n	8083f42 <_ZN15Adafruit_SH11065beginEhhb+0x82>
    }
  }
  else
  {
    // I2C Init
    Wire.begin();
 8083f3a:	f002 fae3 	bl	8086504 <_Z19__fetch_global_Wirev>
 8083f3e:	f002 f9a9 	bl	8086294 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)
  pinMode(rst, OUTPUT);
 8083f42:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083f46:	2101      	movs	r1, #1
 8083f48:	b280      	uxth	r0, r0
 8083f4a:	f002 fa03 	bl	8086354 <pinMode>
  digitalWrite(rst, HIGH);
 8083f4e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083f52:	2101      	movs	r1, #1
 8083f54:	b280      	uxth	r0, r0
 8083f56:	f002 fa0e 	bl	8086376 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
 8083f5a:	2001      	movs	r0, #1
 8083f5c:	f001 fb6e 	bl	808563c <delay>
  // bring reset low
  digitalWrite(rst, LOW);
 8083f60:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083f64:	2100      	movs	r1, #0
 8083f66:	b280      	uxth	r0, r0
 8083f68:	f002 fa05 	bl	8086376 <digitalWrite>
  // wait 10ms
  delay(10);
 8083f6c:	200a      	movs	r0, #10
 8083f6e:	f001 fb65 	bl	808563c <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
 8083f72:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8083f76:	2101      	movs	r1, #1
 8083f78:	b280      	uxth	r0, r0
 8083f7a:	f002 f9fc 	bl	8086376 <digitalWrite>
  SH1106_command(SH1106_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SH1106_128_64
  // Init sequence for 128x64 OLED module
  SH1106_command(SH1106_DISPLAYOFF);                    // 0xAE
 8083f7e:	4620      	mov	r0, r4
 8083f80:	21ae      	movs	r1, #174	; 0xae
 8083f82:	f7ff ff5b 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETDISPLAYCLOCKDIV);            // 0xD5
 8083f86:	4620      	mov	r0, r4
 8083f88:	21d5      	movs	r1, #213	; 0xd5
 8083f8a:	f7ff ff57 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x80);                                  // the suggested ratio 0x80
 8083f8e:	4620      	mov	r0, r4
 8083f90:	2180      	movs	r1, #128	; 0x80
 8083f92:	f7ff ff53 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETMULTIPLEX);                  // 0xA8
 8083f96:	4620      	mov	r0, r4
 8083f98:	21a8      	movs	r1, #168	; 0xa8
 8083f9a:	f7ff ff4f 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x3F);
 8083f9e:	4620      	mov	r0, r4
 8083fa0:	213f      	movs	r1, #63	; 0x3f
 8083fa2:	f7ff ff4b 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETDISPLAYOFFSET);              // 0xD3
 8083fa6:	4620      	mov	r0, r4
 8083fa8:	21d3      	movs	r1, #211	; 0xd3
 8083faa:	f7ff ff47 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x00);                                   // no offset
 8083fae:	4620      	mov	r0, r4
 8083fb0:	2100      	movs	r1, #0
 8083fb2:	f7ff ff43 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>

  SH1106_command(SH1106_SETSTARTLINE | 0x0);            // line #0 0x40
 8083fb6:	4620      	mov	r0, r4
 8083fb8:	2140      	movs	r1, #64	; 0x40
 8083fba:	f7ff ff3f 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_CHARGEPUMP);                    // 0x8D
 8083fbe:	218d      	movs	r1, #141	; 0x8d
 8083fc0:	4620      	mov	r0, r4
 8083fc2:	f7ff ff3b 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  if (vccstate == SH1106_EXTERNALVCC)
 8083fc6:	2d01      	cmp	r5, #1
  { SH1106_command(0x10); }
 8083fc8:	bf0c      	ite	eq
 8083fca:	2110      	moveq	r1, #16
  else
  { SH1106_command(0x14); }
 8083fcc:	2114      	movne	r1, #20
 8083fce:	4620      	mov	r0, r4
 8083fd0:	f7ff ff34 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_MEMORYMODE);                    // 0x20
 8083fd4:	4620      	mov	r0, r4
 8083fd6:	2120      	movs	r1, #32
 8083fd8:	f7ff ff30 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x00);                                  // 0x0 act like ks0108
 8083fdc:	4620      	mov	r0, r4
 8083fde:	2100      	movs	r1, #0
 8083fe0:	f7ff ff2c 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SEGREMAP | 0x1);
 8083fe4:	4620      	mov	r0, r4
 8083fe6:	21a1      	movs	r1, #161	; 0xa1
 8083fe8:	f7ff ff28 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_COMSCANDEC);
 8083fec:	4620      	mov	r0, r4
 8083fee:	21c8      	movs	r1, #200	; 0xc8
 8083ff0:	f7ff ff24 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETCOMPINS);                    // 0xDA
 8083ff4:	4620      	mov	r0, r4
 8083ff6:	21da      	movs	r1, #218	; 0xda
 8083ff8:	f7ff ff20 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x12);
 8083ffc:	4620      	mov	r0, r4
 8083ffe:	2112      	movs	r1, #18
 8084000:	f7ff ff1c 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETCONTRAST);                   // 0x81
 8084004:	2181      	movs	r1, #129	; 0x81
 8084006:	4620      	mov	r0, r4
 8084008:	f7ff ff18 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  if (vccstate == SH1106_EXTERNALVCC)
 808400c:	2d01      	cmp	r5, #1
  { SH1106_command(0x9F); }
 808400e:	bf0c      	ite	eq
 8084010:	219f      	moveq	r1, #159	; 0x9f
  else
  { SH1106_command(0xCF); }
 8084012:	21cf      	movne	r1, #207	; 0xcf
 8084014:	4620      	mov	r0, r4
 8084016:	f7ff ff11 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETPRECHARGE);                  // 0xd9
 808401a:	21d9      	movs	r1, #217	; 0xd9
 808401c:	4620      	mov	r0, r4
 808401e:	f7ff ff0d 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  if (vccstate == SH1106_EXTERNALVCC)
 8084022:	2d01      	cmp	r5, #1
  { SH1106_command(0x22); }
 8084024:	bf0c      	ite	eq
 8084026:	2122      	moveq	r1, #34	; 0x22
  else
  { SH1106_command(0xF1); }
 8084028:	21f1      	movne	r1, #241	; 0xf1
 808402a:	4620      	mov	r0, r4
 808402c:	f7ff ff06 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETVCOMDETECT);                 // 0xDB
 8084030:	4620      	mov	r0, r4
 8084032:	21db      	movs	r1, #219	; 0xdb
 8084034:	f7ff ff02 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x40);
 8084038:	4620      	mov	r0, r4
 808403a:	2140      	movs	r1, #64	; 0x40
 808403c:	f7ff fefe 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_DISPLAYALLON_RESUME);           // 0xA4
 8084040:	4620      	mov	r0, r4
 8084042:	21a4      	movs	r1, #164	; 0xa4
 8084044:	f7ff fefa 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_NORMALDISPLAY);                 // 0xA6
 8084048:	4620      	mov	r0, r4
 808404a:	21a6      	movs	r1, #166	; 0xa6
 808404c:	f7ff fef6 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(0x40);
  SH1106_command(SH1106_DISPLAYALLON_RESUME);           // 0xA4
  SH1106_command(SH1106_NORMALDISPLAY);                 // 0xA6
  #endif

  SH1106_command(SH1106_DISPLAYON);//--turn on oled panel
 8084050:	4620      	mov	r0, r4
}
 8084052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SH1106_command(0x40);
  SH1106_command(SH1106_DISPLAYALLON_RESUME);           // 0xA4
  SH1106_command(SH1106_NORMALDISPLAY);                 // 0xA6
  #endif

  SH1106_command(SH1106_DISPLAYON);//--turn on oled panel
 8084056:	21af      	movs	r1, #175	; 0xaf
 8084058:	f7ff bef0 	b.w	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
 808405c:	20001230 	.word	0x20001230

08084060 <_ZN15Adafruit_SH11067displayEv>:
/*#define SH1106_SETLOWCOLUMN 0x00
#define SH1106_SETHIGHCOLUMN 0x10

#define SH1106_SETSTARTLINE 0x40*/

void Adafruit_SH1106::display(void) {
 8084060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084064:	4604      	mov	r4, r0

  SH1106_command(SH1106_SETLOWCOLUMN | 0x0);  // low col = 0
 8084066:	2100      	movs	r1, #0
 8084068:	f7ff fee8 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETHIGHCOLUMN | 0x0);  // hi col = 0
 808406c:	2110      	movs	r1, #16
 808406e:	4620      	mov	r0, r4
 8084070:	f7ff fee4 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
  SH1106_command(SH1106_SETSTARTLINE | 0x0); // line #0
 8084074:	2140      	movs	r1, #64	; 0x40
 8084076:	4620      	mov	r0, r4
 8084078:	f7ff fee0 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>

  int p = 0;

  byte i, j, k =0;

  if(sid != -1)
 808407c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8084080:	2500      	movs	r5, #0
 8084082:	3301      	adds	r3, #1
 8084084:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 808417c <_ZN15Adafruit_SH11067displayEv+0x11c>
 8084088:	d041      	beq.n	808410e <_ZN15Adafruit_SH11067displayEv+0xae>
  {

    for ( i = 0; i < height; i++) {

      // send a bunch of data in one xmission
      SH1106_command(0xB0 + i + m_row);//set page address
 808408a:	f1a5 0150 	sub.w	r1, r5, #80	; 0x50
 808408e:	b2c9      	uxtb	r1, r1
 8084090:	4620      	mov	r0, r4
 8084092:	f7ff fed3 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
      SH1106_command(m_col & 0xf);//set lower column address
 8084096:	2102      	movs	r1, #2
 8084098:	4620      	mov	r0, r4
 808409a:	f7ff fecf 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
      SH1106_command(0x10 | (m_col >> 4));//set higher column address
 808409e:	2110      	movs	r1, #16
 80840a0:	4620      	mov	r0, r4
 80840a2:	f7ff fecb 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
 80840a6:	ea4f 1ac5 	mov.w	sl, r5, lsl #7
 80840aa:	2600      	movs	r6, #0

      for( j = 0; j < 8; j++){
        // SPI
        digitalWrite(cs, HIGH);
 80840ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80840b0:	2101      	movs	r1, #1
 80840b2:	b280      	uxth	r0, r0
 80840b4:	f002 f95f 	bl	8086376 <digitalWrite>
        digitalWrite(dc, HIGH);
 80840b8:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80840bc:	2101      	movs	r1, #1
 80840be:	b280      	uxth	r0, r0
 80840c0:	f002 f959 	bl	8086376 <digitalWrite>
        digitalWrite(cs, LOW);
 80840c4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80840c8:	2100      	movs	r1, #0
 80840ca:	b280      	uxth	r0, r0
 80840cc:	f002 f953 	bl	8086376 <digitalWrite>
 80840d0:	eb0a 0906 	add.w	r9, sl, r6
 80840d4:	44c1      	add	r9, r8
 80840d6:	2700      	movs	r7, #0

        for ( k = 0; k < width; k++, p++) {
          fastSPIwrite(buffer[p]);
 80840d8:	f819 3007 	ldrb.w	r3, [r9, r7]
 80840dc:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80840e0:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80840e4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80840e8:	3701      	adds	r7, #1
 80840ea:	f7ff fe19 	bl	8083d20 <_ZN15Adafruit_SH110612fastSPIwriteEh.isra.1>
        // SPI
        digitalWrite(cs, HIGH);
        digitalWrite(dc, HIGH);
        digitalWrite(cs, LOW);

        for ( k = 0; k < width; k++, p++) {
 80840ee:	2f10      	cmp	r7, #16
 80840f0:	d1f2      	bne.n	80840d8 <_ZN15Adafruit_SH11067displayEv+0x78>
          fastSPIwrite(buffer[p]);
        }
        digitalWrite(cs, HIGH);
 80840f2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80840f6:	2101      	movs	r1, #1
 80840f8:	b280      	uxth	r0, r0
 80840fa:	3610      	adds	r6, #16
 80840fc:	f002 f93b 	bl	8086376 <digitalWrite>
      // send a bunch of data in one xmission
      SH1106_command(0xB0 + i + m_row);//set page address
      SH1106_command(m_col & 0xf);//set lower column address
      SH1106_command(0x10 | (m_col >> 4));//set higher column address

      for( j = 0; j < 8; j++){
 8084100:	2e80      	cmp	r6, #128	; 0x80
 8084102:	d1d3      	bne.n	80840ac <_ZN15Adafruit_SH11067displayEv+0x4c>
 8084104:	3501      	adds	r5, #1
  byte i, j, k =0;

  if(sid != -1)
  {

    for ( i = 0; i < height; i++) {
 8084106:	2d08      	cmp	r5, #8
 8084108:	d1bf      	bne.n	808408a <_ZN15Adafruit_SH11067displayEv+0x2a>
 808410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else {
    for ( i = 0; i < height; i++) {

      // send a bunch of data in one xmission
      SH1106_command(0xB0 + i + m_row);//set page address
 808410e:	f1a5 0150 	sub.w	r1, r5, #80	; 0x50
 8084112:	b2c9      	uxtb	r1, r1
 8084114:	4620      	mov	r0, r4
 8084116:	f7ff fe91 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
      SH1106_command(m_col & 0xf);//set lower column address
 808411a:	2102      	movs	r1, #2
 808411c:	4620      	mov	r0, r4
 808411e:	f7ff fe8d 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
      SH1106_command(0x10 | (m_col >> 4));//set higher column address
 8084122:	2110      	movs	r1, #16
 8084124:	4620      	mov	r0, r4
 8084126:	f7ff fe89 	bl	8083e3c <_ZN15Adafruit_SH110614SH1106_commandEh>
 808412a:	ea4f 1ac5 	mov.w	sl, r5, lsl #7
 808412e:	2600      	movs	r6, #0

      for( j = 0; j < 8; j++){
        Wire.beginTransmission(_i2caddr);
 8084130:	f002 f9e8 	bl	8086504 <_Z19__fetch_global_Wirev>
 8084134:	f994 101b 	ldrsb.w	r1, [r4, #27]
 8084138:	f002 f8c7 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(0x40);
 808413c:	f002 f9e2 	bl	8086504 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8084140:	6803      	ldr	r3, [r0, #0]
 8084142:	2140      	movs	r1, #64	; 0x40
 8084144:	689b      	ldr	r3, [r3, #8]
 8084146:	4798      	blx	r3
 8084148:	eb0a 0906 	add.w	r9, sl, r6
 808414c:	44c1      	add	r9, r8
 808414e:	2700      	movs	r7, #0
        for ( k = 0; k < width; k++, p++) {
          Wire.write(buffer[p]);
 8084150:	f002 f9d8 	bl	8086504 <_Z19__fetch_global_Wirev>
 8084154:	6803      	ldr	r3, [r0, #0]
 8084156:	f819 1007 	ldrb.w	r1, [r9, r7]
 808415a:	689b      	ldr	r3, [r3, #8]
 808415c:	3701      	adds	r7, #1
 808415e:	4798      	blx	r3
      SH1106_command(0x10 | (m_col >> 4));//set higher column address

      for( j = 0; j < 8; j++){
        Wire.beginTransmission(_i2caddr);
        Wire.write(0x40);
        for ( k = 0; k < width; k++, p++) {
 8084160:	2f10      	cmp	r7, #16
 8084162:	d1f5      	bne.n	8084150 <_ZN15Adafruit_SH11067displayEv+0xf0>
          Wire.write(buffer[p]);
        }
        Wire.endTransmission();
 8084164:	f002 f9ce 	bl	8086504 <_Z19__fetch_global_Wirev>
 8084168:	3610      	adds	r6, #16
 808416a:	f002 f8b5 	bl	80862d8 <_ZN7TwoWire15endTransmissionEv>
      // send a bunch of data in one xmission
      SH1106_command(0xB0 + i + m_row);//set page address
      SH1106_command(m_col & 0xf);//set lower column address
      SH1106_command(0x10 | (m_col >> 4));//set higher column address

      for( j = 0; j < 8; j++){
 808416e:	2e80      	cmp	r6, #128	; 0x80
 8084170:	d1de      	bne.n	8084130 <_ZN15Adafruit_SH11067displayEv+0xd0>
 8084172:	3501      	adds	r5, #1
        digitalWrite(cs, HIGH);
      }
    }
  }
  else {
    for ( i = 0; i < height; i++) {
 8084174:	2d08      	cmp	r5, #8
 8084176:	d1ca      	bne.n	808410e <_ZN15Adafruit_SH11067displayEv+0xae>
 8084178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808417c:	20000420 	.word	0x20000420

08084180 <_ZN15Adafruit_SH110612clearDisplayEv>:

  }
}

void Adafruit_SH1106::clearDisplay(void) {
  memset(buffer, 0, (SH1106_LCDWIDTH*SH1106_LCDHEIGHT/8));
 8084180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8084184:	2100      	movs	r1, #0
 8084186:	4801      	ldr	r0, [pc, #4]	; (808418c <_ZN15Adafruit_SH110612clearDisplayEv+0xc>)
 8084188:	f005 b968 	b.w	808945c <memset>
 808418c:	20000420 	.word	0x20000420

08084190 <_GLOBAL__sub_I__ZN15Adafruit_SH11069drawPixelEsst>:
 8084190:	f000 b800 	b.w	8084194 <HAL_Pin_Map>

08084194 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8084194:	b508      	push	{r3, lr}
 8084196:	4b02      	ldr	r3, [pc, #8]	; (80841a0 <HAL_Pin_Map+0xc>)
 8084198:	681b      	ldr	r3, [r3, #0]
 808419a:	681b      	ldr	r3, [r3, #0]
 808419c:	9301      	str	r3, [sp, #4]
 808419e:	bd08      	pop	{r3, pc}
 80841a0:	080401b0 	.word	0x080401b0

080841a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80841a4:	b508      	push	{r3, lr}
 80841a6:	4b02      	ldr	r3, [pc, #8]	; (80841b0 <HAL_Pin_Mode+0xc>)
 80841a8:	681b      	ldr	r3, [r3, #0]
 80841aa:	689b      	ldr	r3, [r3, #8]
 80841ac:	9301      	str	r3, [sp, #4]
 80841ae:	bd08      	pop	{r3, pc}
 80841b0:	080401b0 	.word	0x080401b0

080841b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80841b4:	b508      	push	{r3, lr}
 80841b6:	4b02      	ldr	r3, [pc, #8]	; (80841c0 <HAL_Get_Pin_Mode+0xc>)
 80841b8:	681b      	ldr	r3, [r3, #0]
 80841ba:	68db      	ldr	r3, [r3, #12]
 80841bc:	9301      	str	r3, [sp, #4]
 80841be:	bd08      	pop	{r3, pc}
 80841c0:	080401b0 	.word	0x080401b0

080841c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80841c4:	b508      	push	{r3, lr}
 80841c6:	4b02      	ldr	r3, [pc, #8]	; (80841d0 <HAL_GPIO_Write+0xc>)
 80841c8:	681b      	ldr	r3, [r3, #0]
 80841ca:	691b      	ldr	r3, [r3, #16]
 80841cc:	9301      	str	r3, [sp, #4]
 80841ce:	bd08      	pop	{r3, pc}
 80841d0:	080401b0 	.word	0x080401b0

080841d4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80841d4:	b508      	push	{r3, lr}
 80841d6:	4b02      	ldr	r3, [pc, #8]	; (80841e0 <HAL_SPI_Begin+0xc>)
 80841d8:	681b      	ldr	r3, [r3, #0]
 80841da:	681b      	ldr	r3, [r3, #0]
 80841dc:	9301      	str	r3, [sp, #4]
 80841de:	bd08      	pop	{r3, pc}
 80841e0:	080401b4 	.word	0x080401b4

080841e4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80841e4:	b508      	push	{r3, lr}
 80841e6:	4b02      	ldr	r3, [pc, #8]	; (80841f0 <HAL_SPI_Set_Bit_Order+0xc>)
 80841e8:	681b      	ldr	r3, [r3, #0]
 80841ea:	689b      	ldr	r3, [r3, #8]
 80841ec:	9301      	str	r3, [sp, #4]
 80841ee:	bd08      	pop	{r3, pc}
 80841f0:	080401b4 	.word	0x080401b4

080841f4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80841f4:	b508      	push	{r3, lr}
 80841f6:	4b02      	ldr	r3, [pc, #8]	; (8084200 <HAL_SPI_Set_Data_Mode+0xc>)
 80841f8:	681b      	ldr	r3, [r3, #0]
 80841fa:	68db      	ldr	r3, [r3, #12]
 80841fc:	9301      	str	r3, [sp, #4]
 80841fe:	bd08      	pop	{r3, pc}
 8084200:	080401b4 	.word	0x080401b4

08084204 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8084204:	b508      	push	{r3, lr}
 8084206:	4b02      	ldr	r3, [pc, #8]	; (8084210 <HAL_SPI_Set_Clock_Divider+0xc>)
 8084208:	681b      	ldr	r3, [r3, #0]
 808420a:	691b      	ldr	r3, [r3, #16]
 808420c:	9301      	str	r3, [sp, #4]
 808420e:	bd08      	pop	{r3, pc}
 8084210:	080401b4 	.word	0x080401b4

08084214 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8084214:	b508      	push	{r3, lr}
 8084216:	4b02      	ldr	r3, [pc, #8]	; (8084220 <HAL_SPI_Send_Receive_Data+0xc>)
 8084218:	681b      	ldr	r3, [r3, #0]
 808421a:	695b      	ldr	r3, [r3, #20]
 808421c:	9301      	str	r3, [sp, #4]
 808421e:	bd08      	pop	{r3, pc}
 8084220:	080401b4 	.word	0x080401b4

08084224 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8084224:	b508      	push	{r3, lr}
 8084226:	4b02      	ldr	r3, [pc, #8]	; (8084230 <HAL_SPI_Init+0xc>)
 8084228:	681b      	ldr	r3, [r3, #0]
 808422a:	69db      	ldr	r3, [r3, #28]
 808422c:	9301      	str	r3, [sp, #4]
 808422e:	bd08      	pop	{r3, pc}
 8084230:	080401b4 	.word	0x080401b4

08084234 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8084234:	b508      	push	{r3, lr}
 8084236:	4b02      	ldr	r3, [pc, #8]	; (8084240 <HAL_SPI_Is_Enabled+0xc>)
 8084238:	681b      	ldr	r3, [r3, #0]
 808423a:	6a1b      	ldr	r3, [r3, #32]
 808423c:	9301      	str	r3, [sp, #4]
 808423e:	bd08      	pop	{r3, pc}
 8084240:	080401b4 	.word	0x080401b4

08084244 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8084244:	b508      	push	{r3, lr}
 8084246:	4b02      	ldr	r3, [pc, #8]	; (8084250 <HAL_SPI_Info+0xc>)
 8084248:	681b      	ldr	r3, [r3, #0]
 808424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808424c:	9301      	str	r3, [sp, #4]
 808424e:	bd08      	pop	{r3, pc}
 8084250:	080401b4 	.word	0x080401b4

08084254 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8084254:	b508      	push	{r3, lr}
 8084256:	4b02      	ldr	r3, [pc, #8]	; (8084260 <HAL_RNG_GetRandomNumber+0xc>)
 8084258:	681b      	ldr	r3, [r3, #0]
 808425a:	685b      	ldr	r3, [r3, #4]
 808425c:	9301      	str	r3, [sp, #4]
 808425e:	bd08      	pop	{r3, pc}
 8084260:	0804019c 	.word	0x0804019c

08084264 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8084264:	b508      	push	{r3, lr}
 8084266:	4b02      	ldr	r3, [pc, #8]	; (8084270 <HAL_Delay_Milliseconds+0xc>)
 8084268:	681b      	ldr	r3, [r3, #0]
 808426a:	689b      	ldr	r3, [r3, #8]
 808426c:	9301      	str	r3, [sp, #4]
 808426e:	bd08      	pop	{r3, pc}
 8084270:	0804019c 	.word	0x0804019c

08084274 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8084274:	b508      	push	{r3, lr}
 8084276:	4b02      	ldr	r3, [pc, #8]	; (8084280 <HAL_Delay_Microseconds+0xc>)
 8084278:	681b      	ldr	r3, [r3, #0]
 808427a:	68db      	ldr	r3, [r3, #12]
 808427c:	9301      	str	r3, [sp, #4]
 808427e:	bd08      	pop	{r3, pc}
 8084280:	0804019c 	.word	0x0804019c

08084284 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8084284:	b508      	push	{r3, lr}
 8084286:	4b02      	ldr	r3, [pc, #8]	; (8084290 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8084288:	681b      	ldr	r3, [r3, #0]
 808428a:	695b      	ldr	r3, [r3, #20]
 808428c:	9301      	str	r3, [sp, #4]
 808428e:	bd08      	pop	{r3, pc}
 8084290:	0804019c 	.word	0x0804019c

08084294 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8084294:	b508      	push	{r3, lr}
 8084296:	4b02      	ldr	r3, [pc, #8]	; (80842a0 <HAL_RTC_Get_UnixTime+0xc>)
 8084298:	681b      	ldr	r3, [r3, #0]
 808429a:	69db      	ldr	r3, [r3, #28]
 808429c:	9301      	str	r3, [sp, #4]
 808429e:	bd08      	pop	{r3, pc}
 80842a0:	0804019c 	.word	0x0804019c

080842a4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80842a4:	b508      	push	{r3, lr}
 80842a6:	4b02      	ldr	r3, [pc, #8]	; (80842b0 <HAL_RTC_Time_Is_Valid+0xc>)
 80842a8:	681b      	ldr	r3, [r3, #0]
 80842aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80842ac:	9301      	str	r3, [sp, #4]
 80842ae:	bd08      	pop	{r3, pc}
 80842b0:	0804019c 	.word	0x0804019c

080842b4 <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
 80842b4:	b508      	push	{r3, lr}
 80842b6:	4b02      	ldr	r3, [pc, #8]	; (80842c0 <HAL_Core_Enter_Bootloader+0xc>)
 80842b8:	681b      	ldr	r3, [r3, #0]
 80842ba:	69db      	ldr	r3, [r3, #28]
 80842bc:	9301      	str	r3, [sp, #4]
 80842be:	bd08      	pop	{r3, pc}
 80842c0:	080401b8 	.word	0x080401b8

080842c4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80842c4:	b508      	push	{r3, lr}
 80842c6:	4b02      	ldr	r3, [pc, #8]	; (80842d0 <HAL_Feature_Set+0xc>)
 80842c8:	681b      	ldr	r3, [r3, #0]
 80842ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80842cc:	9301      	str	r3, [sp, #4]
 80842ce:	bd08      	pop	{r3, pc}
 80842d0:	080401b8 	.word	0x080401b8

080842d4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80842d4:	b508      	push	{r3, lr}
 80842d6:	4b02      	ldr	r3, [pc, #8]	; (80842e0 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80842d8:	681b      	ldr	r3, [r3, #0]
 80842da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80842dc:	9301      	str	r3, [sp, #4]
 80842de:	bd08      	pop	{r3, pc}
 80842e0:	080401b8 	.word	0x080401b8

080842e4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80842e4:	b508      	push	{r3, lr}
 80842e6:	4b02      	ldr	r3, [pc, #8]	; (80842f0 <os_thread_create+0xc>)
 80842e8:	681b      	ldr	r3, [r3, #0]
 80842ea:	685b      	ldr	r3, [r3, #4]
 80842ec:	9301      	str	r3, [sp, #4]
 80842ee:	bd08      	pop	{r3, pc}
 80842f0:	080401d0 	.word	0x080401d0

080842f4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80842f4:	b508      	push	{r3, lr}
 80842f6:	4b02      	ldr	r3, [pc, #8]	; (8084300 <os_thread_is_current+0xc>)
 80842f8:	681b      	ldr	r3, [r3, #0]
 80842fa:	689b      	ldr	r3, [r3, #8]
 80842fc:	9301      	str	r3, [sp, #4]
 80842fe:	bd08      	pop	{r3, pc}
 8084300:	080401d0 	.word	0x080401d0

08084304 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8084304:	b508      	push	{r3, lr}
 8084306:	4b02      	ldr	r3, [pc, #8]	; (8084310 <os_thread_yield+0xc>)
 8084308:	681b      	ldr	r3, [r3, #0]
 808430a:	68db      	ldr	r3, [r3, #12]
 808430c:	9301      	str	r3, [sp, #4]
 808430e:	bd08      	pop	{r3, pc}
 8084310:	080401d0 	.word	0x080401d0

08084314 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8084314:	b508      	push	{r3, lr}
 8084316:	4b02      	ldr	r3, [pc, #8]	; (8084320 <os_thread_join+0xc>)
 8084318:	681b      	ldr	r3, [r3, #0]
 808431a:	691b      	ldr	r3, [r3, #16]
 808431c:	9301      	str	r3, [sp, #4]
 808431e:	bd08      	pop	{r3, pc}
 8084320:	080401d0 	.word	0x080401d0

08084324 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8084324:	b508      	push	{r3, lr}
 8084326:	4b02      	ldr	r3, [pc, #8]	; (8084330 <os_thread_cleanup+0xc>)
 8084328:	681b      	ldr	r3, [r3, #0]
 808432a:	695b      	ldr	r3, [r3, #20]
 808432c:	9301      	str	r3, [sp, #4]
 808432e:	bd08      	pop	{r3, pc}
 8084330:	080401d0 	.word	0x080401d0

08084334 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8084334:	b508      	push	{r3, lr}
 8084336:	4b02      	ldr	r3, [pc, #8]	; (8084340 <os_thread_scheduling+0xc>)
 8084338:	681b      	ldr	r3, [r3, #0]
 808433a:	69db      	ldr	r3, [r3, #28]
 808433c:	9301      	str	r3, [sp, #4]
 808433e:	bd08      	pop	{r3, pc}
 8084340:	080401d0 	.word	0x080401d0

08084344 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8084344:	b508      	push	{r3, lr}
 8084346:	4b02      	ldr	r3, [pc, #8]	; (8084350 <os_timer_create+0xc>)
 8084348:	681b      	ldr	r3, [r3, #0]
 808434a:	6a1b      	ldr	r3, [r3, #32]
 808434c:	9301      	str	r3, [sp, #4]
 808434e:	bd08      	pop	{r3, pc}
 8084350:	080401d0 	.word	0x080401d0

08084354 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8084354:	b508      	push	{r3, lr}
 8084356:	4b02      	ldr	r3, [pc, #8]	; (8084360 <os_timer_destroy+0xc>)
 8084358:	681b      	ldr	r3, [r3, #0]
 808435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808435c:	9301      	str	r3, [sp, #4]
 808435e:	bd08      	pop	{r3, pc}
 8084360:	080401d0 	.word	0x080401d0

08084364 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8084364:	b508      	push	{r3, lr}
 8084366:	4b02      	ldr	r3, [pc, #8]	; (8084370 <os_timer_get_id+0xc>)
 8084368:	681b      	ldr	r3, [r3, #0]
 808436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808436c:	9301      	str	r3, [sp, #4]
 808436e:	bd08      	pop	{r3, pc}
 8084370:	080401d0 	.word	0x080401d0

08084374 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8084374:	b508      	push	{r3, lr}
 8084376:	4b02      	ldr	r3, [pc, #8]	; (8084380 <os_timer_change+0xc>)
 8084378:	681b      	ldr	r3, [r3, #0]
 808437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808437c:	9301      	str	r3, [sp, #4]
 808437e:	bd08      	pop	{r3, pc}
 8084380:	080401d0 	.word	0x080401d0

08084384 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8084384:	b508      	push	{r3, lr}
 8084386:	4b02      	ldr	r3, [pc, #8]	; (8084390 <os_mutex_create+0xc>)
 8084388:	681b      	ldr	r3, [r3, #0]
 808438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808438c:	9301      	str	r3, [sp, #4]
 808438e:	bd08      	pop	{r3, pc}
 8084390:	080401d0 	.word	0x080401d0

08084394 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084394:	b508      	push	{r3, lr}
 8084396:	4b02      	ldr	r3, [pc, #8]	; (80843a0 <os_thread_exit+0xc>)
 8084398:	681b      	ldr	r3, [r3, #0]
 808439a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808439c:	9301      	str	r3, [sp, #4]
 808439e:	bd08      	pop	{r3, pc}
 80843a0:	080401d0 	.word	0x080401d0

080843a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80843a4:	b508      	push	{r3, lr}
 80843a6:	4b02      	ldr	r3, [pc, #8]	; (80843b0 <HAL_USART_Init+0xc>)
 80843a8:	681b      	ldr	r3, [r3, #0]
 80843aa:	699b      	ldr	r3, [r3, #24]
 80843ac:	9301      	str	r3, [sp, #4]
 80843ae:	bd08      	pop	{r3, pc}
 80843b0:	080401c4 	.word	0x080401c4

080843b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80843b4:	b508      	push	{r3, lr}
 80843b6:	4b02      	ldr	r3, [pc, #8]	; (80843c0 <HAL_USART_Write_Data+0xc>)
 80843b8:	681b      	ldr	r3, [r3, #0]
 80843ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80843bc:	9301      	str	r3, [sp, #4]
 80843be:	bd08      	pop	{r3, pc}
 80843c0:	080401c4 	.word	0x080401c4

080843c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80843c4:	b508      	push	{r3, lr}
 80843c6:	4b02      	ldr	r3, [pc, #8]	; (80843d0 <HAL_USART_Available_Data+0xc>)
 80843c8:	681b      	ldr	r3, [r3, #0]
 80843ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80843cc:	9301      	str	r3, [sp, #4]
 80843ce:	bd08      	pop	{r3, pc}
 80843d0:	080401c4 	.word	0x080401c4

080843d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80843d4:	b508      	push	{r3, lr}
 80843d6:	4b02      	ldr	r3, [pc, #8]	; (80843e0 <HAL_USART_Read_Data+0xc>)
 80843d8:	681b      	ldr	r3, [r3, #0]
 80843da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80843dc:	9301      	str	r3, [sp, #4]
 80843de:	bd08      	pop	{r3, pc}
 80843e0:	080401c4 	.word	0x080401c4

080843e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80843e4:	b508      	push	{r3, lr}
 80843e6:	4b02      	ldr	r3, [pc, #8]	; (80843f0 <HAL_USART_Peek_Data+0xc>)
 80843e8:	681b      	ldr	r3, [r3, #0]
 80843ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80843ec:	9301      	str	r3, [sp, #4]
 80843ee:	bd08      	pop	{r3, pc}
 80843f0:	080401c4 	.word	0x080401c4

080843f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80843f4:	b508      	push	{r3, lr}
 80843f6:	4b02      	ldr	r3, [pc, #8]	; (8084400 <HAL_USART_Flush_Data+0xc>)
 80843f8:	681b      	ldr	r3, [r3, #0]
 80843fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80843fc:	9301      	str	r3, [sp, #4]
 80843fe:	bd08      	pop	{r3, pc}
 8084400:	080401c4 	.word	0x080401c4

08084404 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8084404:	b508      	push	{r3, lr}
 8084406:	4b02      	ldr	r3, [pc, #8]	; (8084410 <HAL_USART_Is_Enabled+0xc>)
 8084408:	681b      	ldr	r3, [r3, #0]
 808440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808440c:	9301      	str	r3, [sp, #4]
 808440e:	bd08      	pop	{r3, pc}
 8084410:	080401c4 	.word	0x080401c4

08084414 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8084414:	b508      	push	{r3, lr}
 8084416:	4b02      	ldr	r3, [pc, #8]	; (8084420 <HAL_USART_Available_Data_For_Write+0xc>)
 8084418:	681b      	ldr	r3, [r3, #0]
 808441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808441c:	9301      	str	r3, [sp, #4]
 808441e:	bd08      	pop	{r3, pc}
 8084420:	080401c4 	.word	0x080401c4

08084424 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8084424:	b508      	push	{r3, lr}
 8084426:	4b02      	ldr	r3, [pc, #8]	; (8084430 <HAL_USART_BeginConfig+0xc>)
 8084428:	681b      	ldr	r3, [r3, #0]
 808442a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808442c:	9301      	str	r3, [sp, #4]
 808442e:	bd08      	pop	{r3, pc}
 8084430:	080401c4 	.word	0x080401c4

08084434 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
 8084434:	b508      	push	{r3, lr}
 8084436:	4b02      	ldr	r3, [pc, #8]	; (8084440 <HAL_USART_Write_NineBitData+0xc>)
 8084438:	681b      	ldr	r3, [r3, #0]
 808443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808443c:	9301      	str	r3, [sp, #4]
 808443e:	bd08      	pop	{r3, pc}
 8084440:	080401c4 	.word	0x080401c4

08084444 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8084444:	b508      	push	{r3, lr}
 8084446:	4b02      	ldr	r3, [pc, #8]	; (8084450 <HAL_I2C_Begin+0xc>)
 8084448:	681b      	ldr	r3, [r3, #0]
 808444a:	68db      	ldr	r3, [r3, #12]
 808444c:	9301      	str	r3, [sp, #4]
 808444e:	bd08      	pop	{r3, pc}
 8084450:	080401ac 	.word	0x080401ac

08084454 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8084454:	b508      	push	{r3, lr}
 8084456:	4b02      	ldr	r3, [pc, #8]	; (8084460 <HAL_I2C_Request_Data+0xc>)
 8084458:	681b      	ldr	r3, [r3, #0]
 808445a:	695b      	ldr	r3, [r3, #20]
 808445c:	9301      	str	r3, [sp, #4]
 808445e:	bd08      	pop	{r3, pc}
 8084460:	080401ac 	.word	0x080401ac

08084464 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8084464:	b508      	push	{r3, lr}
 8084466:	4b02      	ldr	r3, [pc, #8]	; (8084470 <HAL_I2C_Begin_Transmission+0xc>)
 8084468:	681b      	ldr	r3, [r3, #0]
 808446a:	699b      	ldr	r3, [r3, #24]
 808446c:	9301      	str	r3, [sp, #4]
 808446e:	bd08      	pop	{r3, pc}
 8084470:	080401ac 	.word	0x080401ac

08084474 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8084474:	b508      	push	{r3, lr}
 8084476:	4b02      	ldr	r3, [pc, #8]	; (8084480 <HAL_I2C_End_Transmission+0xc>)
 8084478:	681b      	ldr	r3, [r3, #0]
 808447a:	69db      	ldr	r3, [r3, #28]
 808447c:	9301      	str	r3, [sp, #4]
 808447e:	bd08      	pop	{r3, pc}
 8084480:	080401ac 	.word	0x080401ac

08084484 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8084484:	b508      	push	{r3, lr}
 8084486:	4b02      	ldr	r3, [pc, #8]	; (8084490 <HAL_I2C_Write_Data+0xc>)
 8084488:	681b      	ldr	r3, [r3, #0]
 808448a:	6a1b      	ldr	r3, [r3, #32]
 808448c:	9301      	str	r3, [sp, #4]
 808448e:	bd08      	pop	{r3, pc}
 8084490:	080401ac 	.word	0x080401ac

08084494 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8084494:	b508      	push	{r3, lr}
 8084496:	4b02      	ldr	r3, [pc, #8]	; (80844a0 <HAL_I2C_Available_Data+0xc>)
 8084498:	681b      	ldr	r3, [r3, #0]
 808449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808449c:	9301      	str	r3, [sp, #4]
 808449e:	bd08      	pop	{r3, pc}
 80844a0:	080401ac 	.word	0x080401ac

080844a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80844a4:	b508      	push	{r3, lr}
 80844a6:	4b02      	ldr	r3, [pc, #8]	; (80844b0 <HAL_I2C_Read_Data+0xc>)
 80844a8:	681b      	ldr	r3, [r3, #0]
 80844aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80844ac:	9301      	str	r3, [sp, #4]
 80844ae:	bd08      	pop	{r3, pc}
 80844b0:	080401ac 	.word	0x080401ac

080844b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80844b4:	b508      	push	{r3, lr}
 80844b6:	4b02      	ldr	r3, [pc, #8]	; (80844c0 <HAL_I2C_Peek_Data+0xc>)
 80844b8:	681b      	ldr	r3, [r3, #0]
 80844ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80844bc:	9301      	str	r3, [sp, #4]
 80844be:	bd08      	pop	{r3, pc}
 80844c0:	080401ac 	.word	0x080401ac

080844c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80844c4:	b508      	push	{r3, lr}
 80844c6:	4b02      	ldr	r3, [pc, #8]	; (80844d0 <HAL_I2C_Flush_Data+0xc>)
 80844c8:	681b      	ldr	r3, [r3, #0]
 80844ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80844cc:	9301      	str	r3, [sp, #4]
 80844ce:	bd08      	pop	{r3, pc}
 80844d0:	080401ac 	.word	0x080401ac

080844d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80844d4:	b508      	push	{r3, lr}
 80844d6:	4b02      	ldr	r3, [pc, #8]	; (80844e0 <HAL_I2C_Is_Enabled+0xc>)
 80844d8:	681b      	ldr	r3, [r3, #0]
 80844da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80844dc:	9301      	str	r3, [sp, #4]
 80844de:	bd08      	pop	{r3, pc}
 80844e0:	080401ac 	.word	0x080401ac

080844e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80844e4:	b508      	push	{r3, lr}
 80844e6:	4b02      	ldr	r3, [pc, #8]	; (80844f0 <HAL_I2C_Init+0xc>)
 80844e8:	681b      	ldr	r3, [r3, #0]
 80844ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80844ec:	9301      	str	r3, [sp, #4]
 80844ee:	bd08      	pop	{r3, pc}
 80844f0:	080401ac 	.word	0x080401ac

080844f4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80844f4:	b508      	push	{r3, lr}
 80844f6:	4b02      	ldr	r3, [pc, #8]	; (8084500 <HAL_I2C_Acquire+0xc>)
 80844f8:	681b      	ldr	r3, [r3, #0]
 80844fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80844fc:	9301      	str	r3, [sp, #4]
 80844fe:	bd08      	pop	{r3, pc}
 8084500:	080401ac 	.word	0x080401ac

08084504 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8084504:	b508      	push	{r3, lr}
 8084506:	4b02      	ldr	r3, [pc, #8]	; (8084510 <HAL_I2C_Release+0xc>)
 8084508:	681b      	ldr	r3, [r3, #0]
 808450a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808450c:	9301      	str	r3, [sp, #4]
 808450e:	bd08      	pop	{r3, pc}
 8084510:	080401ac 	.word	0x080401ac

08084514 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8084514:	b508      	push	{r3, lr}
 8084516:	4b02      	ldr	r3, [pc, #8]	; (8084520 <socket_active_status+0xc>)
 8084518:	681b      	ldr	r3, [r3, #0]
 808451a:	681b      	ldr	r3, [r3, #0]
 808451c:	9301      	str	r3, [sp, #4]
 808451e:	bd08      	pop	{r3, pc}
 8084520:	08060024 	.word	0x08060024

08084524 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8084524:	b508      	push	{r3, lr}
 8084526:	4b02      	ldr	r3, [pc, #8]	; (8084530 <socket_handle_valid+0xc>)
 8084528:	681b      	ldr	r3, [r3, #0]
 808452a:	685b      	ldr	r3, [r3, #4]
 808452c:	9301      	str	r3, [sp, #4]
 808452e:	bd08      	pop	{r3, pc}
 8084530:	08060024 	.word	0x08060024

08084534 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8084534:	b508      	push	{r3, lr}
 8084536:	4b02      	ldr	r3, [pc, #8]	; (8084540 <socket_create+0xc>)
 8084538:	681b      	ldr	r3, [r3, #0]
 808453a:	689b      	ldr	r3, [r3, #8]
 808453c:	9301      	str	r3, [sp, #4]
 808453e:	bd08      	pop	{r3, pc}
 8084540:	08060024 	.word	0x08060024

08084544 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8084544:	b508      	push	{r3, lr}
 8084546:	4b02      	ldr	r3, [pc, #8]	; (8084550 <socket_connect+0xc>)
 8084548:	681b      	ldr	r3, [r3, #0]
 808454a:	68db      	ldr	r3, [r3, #12]
 808454c:	9301      	str	r3, [sp, #4]
 808454e:	bd08      	pop	{r3, pc}
 8084550:	08060024 	.word	0x08060024

08084554 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8084554:	b508      	push	{r3, lr}
 8084556:	4b02      	ldr	r3, [pc, #8]	; (8084560 <socket_receive+0xc>)
 8084558:	681b      	ldr	r3, [r3, #0]
 808455a:	691b      	ldr	r3, [r3, #16]
 808455c:	9301      	str	r3, [sp, #4]
 808455e:	bd08      	pop	{r3, pc}
 8084560:	08060024 	.word	0x08060024

08084564 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8084564:	b508      	push	{r3, lr}
 8084566:	4b02      	ldr	r3, [pc, #8]	; (8084570 <socket_close+0xc>)
 8084568:	681b      	ldr	r3, [r3, #0]
 808456a:	6a1b      	ldr	r3, [r3, #32]
 808456c:	9301      	str	r3, [sp, #4]
 808456e:	bd08      	pop	{r3, pc}
 8084570:	08060024 	.word	0x08060024

08084574 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8084574:	b508      	push	{r3, lr}
 8084576:	4b02      	ldr	r3, [pc, #8]	; (8084580 <socket_handle_invalid+0xc>)
 8084578:	681b      	ldr	r3, [r3, #0]
 808457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808457c:	9301      	str	r3, [sp, #4]
 808457e:	bd08      	pop	{r3, pc}
 8084580:	08060024 	.word	0x08060024

08084584 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 8084584:	b508      	push	{r3, lr}
 8084586:	4b02      	ldr	r3, [pc, #8]	; (8084590 <socket_send_ex+0xc>)
 8084588:	681b      	ldr	r3, [r3, #0]
 808458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808458c:	9301      	str	r3, [sp, #4]
 808458e:	bd08      	pop	{r3, pc}
 8084590:	08060024 	.word	0x08060024

08084594 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 8084594:	b508      	push	{r3, lr}
 8084596:	4b02      	ldr	r3, [pc, #8]	; (80845a0 <cellular_credentials_set+0xc>)
 8084598:	681b      	ldr	r3, [r3, #0]
 808459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808459c:	9301      	str	r3, [sp, #4]
 808459e:	bd08      	pop	{r3, pc}
 80845a0:	08060020 	.word	0x08060020

080845a4 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80845a4:	b508      	push	{r3, lr}
 80845a6:	4b02      	ldr	r3, [pc, #8]	; (80845b0 <HAL_NET_SetNetWatchDog+0xc>)
 80845a8:	681b      	ldr	r3, [r3, #0]
 80845aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80845ac:	9301      	str	r3, [sp, #4]
 80845ae:	bd08      	pop	{r3, pc}
 80845b0:	08060020 	.word	0x08060020

080845b4 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80845b4:	b508      	push	{r3, lr}
 80845b6:	4b02      	ldr	r3, [pc, #8]	; (80845c0 <inet_gethostbyname+0xc>)
 80845b8:	681b      	ldr	r3, [r3, #0]
 80845ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80845bc:	9301      	str	r3, [sp, #4]
 80845be:	bd08      	pop	{r3, pc}
 80845c0:	08060020 	.word	0x08060020

080845c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80845c4:	b508      	push	{r3, lr}
 80845c6:	4b02      	ldr	r3, [pc, #8]	; (80845d0 <HAL_USB_USART_Init+0xc>)
 80845c8:	681b      	ldr	r3, [r3, #0]
 80845ca:	681b      	ldr	r3, [r3, #0]
 80845cc:	9301      	str	r3, [sp, #4]
 80845ce:	bd08      	pop	{r3, pc}
 80845d0:	0806001c 	.word	0x0806001c

080845d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80845d4:	b508      	push	{r3, lr}
 80845d6:	4b02      	ldr	r3, [pc, #8]	; (80845e0 <HAL_USB_USART_Available_Data+0xc>)
 80845d8:	681b      	ldr	r3, [r3, #0]
 80845da:	691b      	ldr	r3, [r3, #16]
 80845dc:	9301      	str	r3, [sp, #4]
 80845de:	bd08      	pop	{r3, pc}
 80845e0:	0806001c 	.word	0x0806001c

080845e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80845e4:	b508      	push	{r3, lr}
 80845e6:	4b02      	ldr	r3, [pc, #8]	; (80845f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80845e8:	681b      	ldr	r3, [r3, #0]
 80845ea:	695b      	ldr	r3, [r3, #20]
 80845ec:	9301      	str	r3, [sp, #4]
 80845ee:	bd08      	pop	{r3, pc}
 80845f0:	0806001c 	.word	0x0806001c

080845f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80845f4:	b508      	push	{r3, lr}
 80845f6:	4b02      	ldr	r3, [pc, #8]	; (8084600 <HAL_USB_USART_Receive_Data+0xc>)
 80845f8:	681b      	ldr	r3, [r3, #0]
 80845fa:	699b      	ldr	r3, [r3, #24]
 80845fc:	9301      	str	r3, [sp, #4]
 80845fe:	bd08      	pop	{r3, pc}
 8084600:	0806001c 	.word	0x0806001c

08084604 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084604:	b508      	push	{r3, lr}
 8084606:	4b02      	ldr	r3, [pc, #8]	; (8084610 <HAL_USB_USART_Send_Data+0xc>)
 8084608:	681b      	ldr	r3, [r3, #0]
 808460a:	69db      	ldr	r3, [r3, #28]
 808460c:	9301      	str	r3, [sp, #4]
 808460e:	bd08      	pop	{r3, pc}
 8084610:	0806001c 	.word	0x0806001c

08084614 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8084614:	b508      	push	{r3, lr}
 8084616:	4b02      	ldr	r3, [pc, #8]	; (8084620 <HAL_USB_USART_Flush_Data+0xc>)
 8084618:	681b      	ldr	r3, [r3, #0]
 808461a:	6a1b      	ldr	r3, [r3, #32]
 808461c:	9301      	str	r3, [sp, #4]
 808461e:	bd08      	pop	{r3, pc}
 8084620:	0806001c 	.word	0x0806001c

08084624 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8084624:	b508      	push	{r3, lr}
 8084626:	4b02      	ldr	r3, [pc, #8]	; (8084630 <panic_+0xc>)
 8084628:	681b      	ldr	r3, [r3, #0]
 808462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808462c:	9301      	str	r3, [sp, #4]
 808462e:	bd08      	pop	{r3, pc}
 8084630:	080201a0 	.word	0x080201a0

08084634 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8084634:	b508      	push	{r3, lr}
 8084636:	4b02      	ldr	r3, [pc, #8]	; (8084640 <log_message+0xc>)
 8084638:	681b      	ldr	r3, [r3, #0]
 808463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808463c:	9301      	str	r3, [sp, #4]
 808463e:	bd08      	pop	{r3, pc}
 8084640:	080201a0 	.word	0x080201a0

08084644 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8084644:	b508      	push	{r3, lr}
 8084646:	4b02      	ldr	r3, [pc, #8]	; (8084650 <log_message_v+0xc>)
 8084648:	681b      	ldr	r3, [r3, #0]
 808464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808464c:	9301      	str	r3, [sp, #4]
 808464e:	bd08      	pop	{r3, pc}
 8084650:	080201a0 	.word	0x080201a0

08084654 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084654:	b508      	push	{r3, lr}
 8084656:	4b02      	ldr	r3, [pc, #8]	; (8084660 <system_mode+0xc>)
 8084658:	681b      	ldr	r3, [r3, #0]
 808465a:	681b      	ldr	r3, [r3, #0]
 808465c:	9301      	str	r3, [sp, #4]
 808465e:	bd08      	pop	{r3, pc}
 8084660:	080401a4 	.word	0x080401a4

08084664 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084664:	b508      	push	{r3, lr}
 8084666:	4b02      	ldr	r3, [pc, #8]	; (8084670 <set_system_mode+0xc>)
 8084668:	681b      	ldr	r3, [r3, #0]
 808466a:	685b      	ldr	r3, [r3, #4]
 808466c:	9301      	str	r3, [sp, #4]
 808466e:	bd08      	pop	{r3, pc}
 8084670:	080401a4 	.word	0x080401a4

08084674 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084674:	b508      	push	{r3, lr}
 8084676:	4b02      	ldr	r3, [pc, #8]	; (8084680 <system_delay_ms+0xc>)
 8084678:	681b      	ldr	r3, [r3, #0]
 808467a:	695b      	ldr	r3, [r3, #20]
 808467c:	9301      	str	r3, [sp, #4]
 808467e:	bd08      	pop	{r3, pc}
 8084680:	080401a4 	.word	0x080401a4

08084684 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084684:	b508      	push	{r3, lr}
 8084686:	4b02      	ldr	r3, [pc, #8]	; (8084690 <system_sleep+0xc>)
 8084688:	681b      	ldr	r3, [r3, #0]
 808468a:	699b      	ldr	r3, [r3, #24]
 808468c:	9301      	str	r3, [sp, #4]
 808468e:	bd08      	pop	{r3, pc}
 8084690:	080401a4 	.word	0x080401a4

08084694 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
 8084694:	b508      	push	{r3, lr}
 8084696:	4b02      	ldr	r3, [pc, #8]	; (80846a0 <system_subscribe_event+0xc>)
 8084698:	681b      	ldr	r3, [r3, #0]
 808469a:	6a1b      	ldr	r3, [r3, #32]
 808469c:	9301      	str	r3, [sp, #4]
 808469e:	bd08      	pop	{r3, pc}
 80846a0:	080401a4 	.word	0x080401a4

080846a4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80846a4:	b508      	push	{r3, lr}
 80846a6:	4b02      	ldr	r3, [pc, #8]	; (80846b0 <system_thread_set_state+0xc>)
 80846a8:	681b      	ldr	r3, [r3, #0]
 80846aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80846ac:	9301      	str	r3, [sp, #4]
 80846ae:	bd08      	pop	{r3, pc}
 80846b0:	080401a4 	.word	0x080401a4

080846b4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80846b4:	b508      	push	{r3, lr}
 80846b6:	4b02      	ldr	r3, [pc, #8]	; (80846c0 <application_thread_current+0xc>)
 80846b8:	681b      	ldr	r3, [r3, #0]
 80846ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80846bc:	9301      	str	r3, [sp, #4]
 80846be:	bd08      	pop	{r3, pc}
 80846c0:	080401a4 	.word	0x080401a4

080846c4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80846c4:	b508      	push	{r3, lr}
 80846c6:	4b02      	ldr	r3, [pc, #8]	; (80846d0 <application_thread_invoke+0xc>)
 80846c8:	681b      	ldr	r3, [r3, #0]
 80846ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80846cc:	9301      	str	r3, [sp, #4]
 80846ce:	bd08      	pop	{r3, pc}
 80846d0:	080401a4 	.word	0x080401a4

080846d4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80846d4:	b508      	push	{r3, lr}
 80846d6:	4b02      	ldr	r3, [pc, #8]	; (80846e0 <system_thread_get_state+0xc>)
 80846d8:	681b      	ldr	r3, [r3, #0]
 80846da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80846dc:	9301      	str	r3, [sp, #4]
 80846de:	bd08      	pop	{r3, pc}
 80846e0:	080401a4 	.word	0x080401a4

080846e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80846e4:	b508      	push	{r3, lr}
 80846e6:	4b03      	ldr	r3, [pc, #12]	; (80846f4 <system_ctrl_set_app_request_handler+0x10>)
 80846e8:	681b      	ldr	r3, [r3, #0]
 80846ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80846ee:	9301      	str	r3, [sp, #4]
 80846f0:	bd08      	pop	{r3, pc}
 80846f2:	0000      	.short	0x0000
 80846f4:	080401a4 	.word	0x080401a4

080846f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80846f8:	b508      	push	{r3, lr}
 80846fa:	4b03      	ldr	r3, [pc, #12]	; (8084708 <system_ctrl_set_result+0x10>)
 80846fc:	681b      	ldr	r3, [r3, #0]
 80846fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8084702:	9301      	str	r3, [sp, #4]
 8084704:	bd08      	pop	{r3, pc}
 8084706:	0000      	.short	0x0000
 8084708:	080401a4 	.word	0x080401a4

0808470c <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int32_t(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808470c:	b508      	push	{r3, lr}
 808470e:	4b03      	ldr	r3, [pc, #12]	; (808471c <system_sleep_pins+0x10>)
 8084710:	681b      	ldr	r3, [r3, #0]
 8084712:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8084716:	9301      	str	r3, [sp, #4]
 8084718:	bd08      	pop	{r3, pc}
 808471a:	0000      	.short	0x0000
 808471c:	080401a4 	.word	0x080401a4

08084720 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8084720:	b508      	push	{r3, lr}
 8084722:	4b02      	ldr	r3, [pc, #8]	; (808472c <network_connect+0xc>)
 8084724:	681b      	ldr	r3, [r3, #0]
 8084726:	685b      	ldr	r3, [r3, #4]
 8084728:	9301      	str	r3, [sp, #4]
 808472a:	bd08      	pop	{r3, pc}
 808472c:	080401c8 	.word	0x080401c8

08084730 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8084730:	b508      	push	{r3, lr}
 8084732:	4b02      	ldr	r3, [pc, #8]	; (808473c <network_connecting+0xc>)
 8084734:	681b      	ldr	r3, [r3, #0]
 8084736:	689b      	ldr	r3, [r3, #8]
 8084738:	9301      	str	r3, [sp, #4]
 808473a:	bd08      	pop	{r3, pc}
 808473c:	080401c8 	.word	0x080401c8

08084740 <network_ready>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084740:	b508      	push	{r3, lr}
 8084742:	4b02      	ldr	r3, [pc, #8]	; (808474c <network_ready+0xc>)
 8084744:	681b      	ldr	r3, [r3, #0]
 8084746:	691b      	ldr	r3, [r3, #16]
 8084748:	9301      	str	r3, [sp, #4]
 808474a:	bd08      	pop	{r3, pc}
 808474c:	080401c8 	.word	0x080401c8

08084750 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8084750:	b508      	push	{r3, lr}
 8084752:	4b02      	ldr	r3, [pc, #8]	; (808475c <network_on+0xc>)
 8084754:	681b      	ldr	r3, [r3, #0]
 8084756:	695b      	ldr	r3, [r3, #20]
 8084758:	9301      	str	r3, [sp, #4]
 808475a:	bd08      	pop	{r3, pc}
 808475c:	080401c8 	.word	0x080401c8

08084760 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8084760:	b508      	push	{r3, lr}
 8084762:	4b02      	ldr	r3, [pc, #8]	; (808476c <network_off+0xc>)
 8084764:	681b      	ldr	r3, [r3, #0]
 8084766:	699b      	ldr	r3, [r3, #24]
 8084768:	9301      	str	r3, [sp, #4]
 808476a:	bd08      	pop	{r3, pc}
 808476c:	080401c8 	.word	0x080401c8

08084770 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8084770:	b508      	push	{r3, lr}
 8084772:	4b02      	ldr	r3, [pc, #8]	; (808477c <spark_function+0xc>)
 8084774:	681b      	ldr	r3, [r3, #0]
 8084776:	685b      	ldr	r3, [r3, #4]
 8084778:	9301      	str	r3, [sp, #4]
 808477a:	bd08      	pop	{r3, pc}
 808477c:	080401cc 	.word	0x080401cc

08084780 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8084780:	b508      	push	{r3, lr}
 8084782:	4b02      	ldr	r3, [pc, #8]	; (808478c <spark_process+0xc>)
 8084784:	681b      	ldr	r3, [r3, #0]
 8084786:	689b      	ldr	r3, [r3, #8]
 8084788:	9301      	str	r3, [sp, #4]
 808478a:	bd08      	pop	{r3, pc}
 808478c:	080401cc 	.word	0x080401cc

08084790 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8084790:	b508      	push	{r3, lr}
 8084792:	4b02      	ldr	r3, [pc, #8]	; (808479c <spark_cloud_flag_connect+0xc>)
 8084794:	681b      	ldr	r3, [r3, #0]
 8084796:	68db      	ldr	r3, [r3, #12]
 8084798:	9301      	str	r3, [sp, #4]
 808479a:	bd08      	pop	{r3, pc}
 808479c:	080401cc 	.word	0x080401cc

080847a0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80847a0:	b508      	push	{r3, lr}
 80847a2:	4b02      	ldr	r3, [pc, #8]	; (80847ac <spark_cloud_flag_connected+0xc>)
 80847a4:	681b      	ldr	r3, [r3, #0]
 80847a6:	695b      	ldr	r3, [r3, #20]
 80847a8:	9301      	str	r3, [sp, #4]
 80847aa:	bd08      	pop	{r3, pc}
 80847ac:	080401cc 	.word	0x080401cc

080847b0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80847b0:	b508      	push	{r3, lr}
 80847b2:	4b02      	ldr	r3, [pc, #8]	; (80847bc <spark_send_event+0xc>)
 80847b4:	681b      	ldr	r3, [r3, #0]
 80847b6:	6a1b      	ldr	r3, [r3, #32]
 80847b8:	9301      	str	r3, [sp, #4]
 80847ba:	bd08      	pop	{r3, pc}
 80847bc:	080401cc 	.word	0x080401cc

080847c0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80847c0:	b508      	push	{r3, lr}
 80847c2:	4b02      	ldr	r3, [pc, #8]	; (80847cc <spark_sync_time_pending+0xc>)
 80847c4:	681b      	ldr	r3, [r3, #0]
 80847c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80847c8:	9301      	str	r3, [sp, #4]
 80847ca:	bd08      	pop	{r3, pc}
 80847cc:	080401cc 	.word	0x080401cc

080847d0 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
 80847d0:	b508      	push	{r3, lr}
 80847d2:	4b02      	ldr	r3, [pc, #8]	; (80847dc <spark_set_connection_property+0xc>)
 80847d4:	681b      	ldr	r3, [r3, #0]
 80847d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80847d8:	9301      	str	r3, [sp, #4]
 80847da:	bd08      	pop	{r3, pc}
 80847dc:	080401cc 	.word	0x080401cc

080847e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80847e0:	b508      	push	{r3, lr}
 80847e2:	4b02      	ldr	r3, [pc, #8]	; (80847ec <spark_set_random_seed_from_cloud_handler+0xc>)
 80847e4:	681b      	ldr	r3, [r3, #0]
 80847e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80847e8:	9301      	str	r3, [sp, #4]
 80847ea:	bd08      	pop	{r3, pc}
 80847ec:	080401cc 	.word	0x080401cc

080847f0 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80847f0:	b508      	push	{r3, lr}
 80847f2:	4b02      	ldr	r3, [pc, #8]	; (80847fc <malloc+0xc>)
 80847f4:	681b      	ldr	r3, [r3, #0]
 80847f6:	681b      	ldr	r3, [r3, #0]
 80847f8:	9301      	str	r3, [sp, #4]
 80847fa:	bd08      	pop	{r3, pc}
 80847fc:	080401a0 	.word	0x080401a0

08084800 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8084800:	b508      	push	{r3, lr}
 8084802:	4b02      	ldr	r3, [pc, #8]	; (808480c <free+0xc>)
 8084804:	681b      	ldr	r3, [r3, #0]
 8084806:	685b      	ldr	r3, [r3, #4]
 8084808:	9301      	str	r3, [sp, #4]
 808480a:	bd08      	pop	{r3, pc}
 808480c:	080401a0 	.word	0x080401a0

08084810 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8084810:	b508      	push	{r3, lr}
 8084812:	4b02      	ldr	r3, [pc, #8]	; (808481c <realloc+0xc>)
 8084814:	681b      	ldr	r3, [r3, #0]
 8084816:	689b      	ldr	r3, [r3, #8]
 8084818:	9301      	str	r3, [sp, #4]
 808481a:	bd08      	pop	{r3, pc}
 808481c:	080401a0 	.word	0x080401a0

08084820 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8084820:	b508      	push	{r3, lr}
 8084822:	4b02      	ldr	r3, [pc, #8]	; (808482c <sprintf+0xc>)
 8084824:	681b      	ldr	r3, [r3, #0]
 8084826:	68db      	ldr	r3, [r3, #12]
 8084828:	9301      	str	r3, [sp, #4]
 808482a:	bd08      	pop	{r3, pc}
 808482c:	080401a0 	.word	0x080401a0

08084830 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8084830:	b508      	push	{r3, lr}
 8084832:	4b02      	ldr	r3, [pc, #8]	; (808483c <siprintf+0xc>)
 8084834:	681b      	ldr	r3, [r3, #0]
 8084836:	691b      	ldr	r3, [r3, #16]
 8084838:	9301      	str	r3, [sp, #4]
 808483a:	bd08      	pop	{r3, pc}
 808483c:	080401a0 	.word	0x080401a0

08084840 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8084840:	b508      	push	{r3, lr}
 8084842:	4b02      	ldr	r3, [pc, #8]	; (808484c <siscanf+0xc>)
 8084844:	681b      	ldr	r3, [r3, #0]
 8084846:	699b      	ldr	r3, [r3, #24]
 8084848:	9301      	str	r3, [sp, #4]
 808484a:	bd08      	pop	{r3, pc}
 808484c:	080401a0 	.word	0x080401a0

08084850 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8084850:	b508      	push	{r3, lr}
 8084852:	4b02      	ldr	r3, [pc, #8]	; (808485c <snprintf+0xc>)
 8084854:	681b      	ldr	r3, [r3, #0]
 8084856:	69db      	ldr	r3, [r3, #28]
 8084858:	9301      	str	r3, [sp, #4]
 808485a:	bd08      	pop	{r3, pc}
 808485c:	080401a0 	.word	0x080401a0

08084860 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8084860:	b508      	push	{r3, lr}
 8084862:	4b02      	ldr	r3, [pc, #8]	; (808486c <sniprintf+0xc>)
 8084864:	681b      	ldr	r3, [r3, #0]
 8084866:	6a1b      	ldr	r3, [r3, #32]
 8084868:	9301      	str	r3, [sp, #4]
 808486a:	bd08      	pop	{r3, pc}
 808486c:	080401a0 	.word	0x080401a0

08084870 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8084870:	b508      	push	{r3, lr}
 8084872:	4b02      	ldr	r3, [pc, #8]	; (808487c <vsnprintf+0xc>)
 8084874:	681b      	ldr	r3, [r3, #0]
 8084876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084878:	9301      	str	r3, [sp, #4]
 808487a:	bd08      	pop	{r3, pc}
 808487c:	080401a0 	.word	0x080401a0

08084880 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8084880:	b508      	push	{r3, lr}
 8084882:	4b02      	ldr	r3, [pc, #8]	; (808488c <abort+0xc>)
 8084884:	681b      	ldr	r3, [r3, #0]
 8084886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084888:	9301      	str	r3, [sp, #4]
 808488a:	bd08      	pop	{r3, pc}
 808488c:	080401a0 	.word	0x080401a0

08084890 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8084890:	b508      	push	{r3, lr}
 8084892:	4b02      	ldr	r3, [pc, #8]	; (808489c <_malloc_r+0xc>)
 8084894:	681b      	ldr	r3, [r3, #0]
 8084896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084898:	9301      	str	r3, [sp, #4]
 808489a:	bd08      	pop	{r3, pc}
 808489c:	080401a0 	.word	0x080401a0

080848a0 <_ZN4PMIC4lockEv>:
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}

bool PMIC::lock() {
 80848a0:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.lock();
 80848a2:	f001 fe4f 	bl	8086544 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 80848a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
}

bool PMIC::lock() {
#if Wiring_Wire3
    return Wire3.lock();
 80848aa:	f001 bd1c 	b.w	80862e6 <_ZN7TwoWire4lockEv>

080848ae <_ZN4PMICC1Eb>:


#include "spark_wiring_power.h"
#include <mutex>

PMIC::PMIC(bool _lock) :
 80848ae:	b510      	push	{r4, lr}
 80848b0:	4604      	mov	r4, r0
    lock_(_lock)
 80848b2:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80848b4:	b109      	cbz	r1, 80848ba <_ZN4PMICC1Eb+0xc>
        lock();
 80848b6:	f7ff fff3 	bl	80848a0 <_ZN4PMIC4lockEv>
    }
}
 80848ba:	4620      	mov	r0, r4
 80848bc:	bd10      	pop	{r4, pc}

080848be <_ZN4PMIC6unlockEv>:
    return Wire3.lock();
#endif
    return false;
}

bool PMIC::unlock() {
 80848be:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.unlock();
 80848c0:	f001 fe40 	bl	8086544 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 80848c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return false;
}

bool PMIC::unlock() {
#if Wiring_Wire3
    return Wire3.unlock();
 80848c8:	f001 bd16 	b.w	80862f8 <_ZN7TwoWire6unlockEv>

080848cc <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80848cc:	b510      	push	{r4, lr}
{
    if (lock_) {
 80848ce:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80848d0:	4604      	mov	r4, r0
{
    if (lock_) {
 80848d2:	b10b      	cbz	r3, 80848d8 <_ZN4PMICD1Ev+0xc>
        unlock();
 80848d4:	f7ff fff3 	bl	80848be <_ZN4PMIC6unlockEv>
    }
}
 80848d8:	4620      	mov	r0, r4
 80848da:	bd10      	pop	{r4, pc}

080848dc <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80848dc:	b510      	push	{r4, lr}
 80848de:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80848e0:	6800      	ldr	r0, [r0, #0]
 80848e2:	f7ff ffec 	bl	80848be <_ZN4PMIC6unlockEv>
 80848e6:	4620      	mov	r0, r4
 80848e8:	bd10      	pop	{r4, pc}

080848ea <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80848ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80848ec:	ac02      	add	r4, sp, #8
 80848ee:	460d      	mov	r5, r1
 80848f0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80848f4:	f7ff ffd4 	bl	80848a0 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 80848f8:	f001 fe24 	bl	8086544 <_Z20__fetch_global_Wire3v>
 80848fc:	216b      	movs	r1, #107	; 0x6b
 80848fe:	f001 fce4 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(startAddress);
 8084902:	f001 fe1f 	bl	8086544 <_Z20__fetch_global_Wire3v>
 8084906:	6803      	ldr	r3, [r0, #0]
 8084908:	4629      	mov	r1, r5
 808490a:	689b      	ldr	r3, [r3, #8]
 808490c:	4798      	blx	r3
    Wire3.endTransmission(true);
 808490e:	f001 fe19 	bl	8086544 <_Z20__fetch_global_Wire3v>
 8084912:	2101      	movs	r1, #1
 8084914:	f001 fcdc 	bl	80862d0 <_ZN7TwoWire15endTransmissionEh>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
 8084918:	f001 fe14 	bl	8086544 <_Z20__fetch_global_Wire3v>
 808491c:	2301      	movs	r3, #1
 808491e:	461a      	mov	r2, r3
 8084920:	216b      	movs	r1, #107	; 0x6b
 8084922:	f001 fcc9 	bl	80862b8 <_ZN7TwoWire11requestFromEiii>
    DATA = Wire3.read();
 8084926:	f001 fe0d 	bl	8086544 <_Z20__fetch_global_Wire3v>
 808492a:	6803      	ldr	r3, [r0, #0]
 808492c:	695b      	ldr	r3, [r3, #20]
 808492e:	4798      	blx	r3
 8084930:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8084932:	4620      	mov	r0, r4
 8084934:	f7ff ffd2 	bl	80848dc <_ZNSt10lock_guardI4PMICED1Ev>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
    DATA = Wire3.read();
#endif
    return DATA;
}
 8084938:	b2e8      	uxtb	r0, r5
 808493a:	b003      	add	sp, #12
 808493c:	bd30      	pop	{r4, r5, pc}

0808493e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808493e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8084940:	ac02      	add	r4, sp, #8
 8084942:	4615      	mov	r5, r2
 8084944:	460e      	mov	r6, r1
 8084946:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808494a:	f7ff ffa9 	bl	80848a0 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 808494e:	f001 fdf9 	bl	8086544 <_Z20__fetch_global_Wire3v>
 8084952:	216b      	movs	r1, #107	; 0x6b
 8084954:	f001 fcb9 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(address);
 8084958:	f001 fdf4 	bl	8086544 <_Z20__fetch_global_Wire3v>
 808495c:	6803      	ldr	r3, [r0, #0]
 808495e:	4631      	mov	r1, r6
 8084960:	689b      	ldr	r3, [r3, #8]
 8084962:	4798      	blx	r3
    Wire3.write(DATA);
 8084964:	f001 fdee 	bl	8086544 <_Z20__fetch_global_Wire3v>
 8084968:	6803      	ldr	r3, [r0, #0]
 808496a:	4629      	mov	r1, r5
 808496c:	689b      	ldr	r3, [r3, #8]
 808496e:	4798      	blx	r3
    Wire3.endTransmission(true);
 8084970:	f001 fde8 	bl	8086544 <_Z20__fetch_global_Wire3v>
 8084974:	2101      	movs	r1, #1
 8084976:	f001 fcab 	bl	80862d0 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808497a:	4620      	mov	r0, r4
 808497c:	f7ff ffae 	bl	80848dc <_ZNSt10lock_guardI4PMICED1Ev>
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(address);
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}
 8084980:	b002      	add	sp, #8
 8084982:	bd70      	pop	{r4, r5, r6, pc}

08084984 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8084984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084986:	4604      	mov	r4, r0
 8084988:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808498a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808498c:	f7ff ff88 	bl	80848a0 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8084990:	2104      	movs	r1, #4
 8084992:	4620      	mov	r0, r4
 8084994:	f7ff ffa9 	bl	80848ea <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8084998:	f241 0310 	movw	r3, #4112	; 0x1010
 808499c:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808499e:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 80849a2:	d006      	beq.n	80849b2 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 80849a4:	f241 0370 	movw	r3, #4208	; 0x1070
 80849a8:	429d      	cmp	r5, r3
 80849aa:	d10a      	bne.n	80849c2 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80849ac:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 80849b0:	e001      	b.n	80849b6 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 80849b2:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80849b6:	4620      	mov	r0, r4
 80849b8:	2104      	movs	r1, #4
 80849ba:	f7ff ffc0 	bl	808493e <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80849be:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 80849c0:	e000      	b.n	80849c4 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 80849c2:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80849c4:	a801      	add	r0, sp, #4
 80849c6:	f7ff ff89 	bl	80848dc <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80849ca:	4620      	mov	r0, r4
 80849cc:	b003      	add	sp, #12
 80849ce:	bd30      	pop	{r4, r5, pc}

080849d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80849d0:	4770      	bx	lr

080849d2 <_ZN8SPIClassD0Ev>:
 80849d2:	b510      	push	{r4, lr}
 80849d4:	4604      	mov	r4, r0
 80849d6:	f7fb fb62 	bl	808009e <_ZdlPv>
 80849da:	4620      	mov	r0, r4
 80849dc:	bd10      	pop	{r4, pc}
	...

080849e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80849e0:	b570      	push	{r4, r5, r6, lr}
 80849e2:	4604      	mov	r4, r0
 80849e4:	460e      	mov	r6, r1
 80849e6:	4b07      	ldr	r3, [pc, #28]	; (8084a04 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80849e8:	2500      	movs	r5, #0
 80849ea:	6003      	str	r3, [r0, #0]
 80849ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80849f0:	f7ff fcc8 	bl	8084384 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80849f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80849f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80849f8:	f7ff fc14 	bl	8084224 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80849fc:	60a5      	str	r5, [r4, #8]
}
 80849fe:	4620      	mov	r0, r4
 8084a00:	bd70      	pop	{r4, r5, r6, pc}
 8084a02:	bf00      	nop
 8084a04:	0808b98c 	.word	0x0808b98c

08084a08 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8084a08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8084a0c:	7900      	ldrb	r0, [r0, #4]
 8084a0e:	f7ff bbe1 	b.w	80841d4 <HAL_SPI_Begin>

08084a12 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8084a12:	7900      	ldrb	r0, [r0, #4]
 8084a14:	f7ff bbe6 	b.w	80841e4 <HAL_SPI_Set_Bit_Order>

08084a18 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8084a18:	7900      	ldrb	r0, [r0, #4]
 8084a1a:	f7ff bbeb 	b.w	80841f4 <HAL_SPI_Set_Data_Mode>
	...

08084a20 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8084a20:	4a05      	ldr	r2, [pc, #20]	; (8084a38 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8084a22:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8084a24:	5c99      	ldrb	r1, [r3, r2]
 8084a26:	4281      	cmp	r1, r0
 8084a28:	d002      	beq.n	8084a30 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8084a2a:	3301      	adds	r3, #1
 8084a2c:	2b08      	cmp	r3, #8
 8084a2e:	d1f9      	bne.n	8084a24 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8084a30:	1c58      	adds	r0, r3, #1
}
 8084a32:	b2c0      	uxtb	r0, r0
 8084a34:	4770      	bx	lr
 8084a36:	bf00      	nop
 8084a38:	0808b994 	.word	0x0808b994

08084a3c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8084a3c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8084a3e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8084a40:	6018      	str	r0, [r3, #0]
 8084a42:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8084a44:	6818      	ldr	r0, [r3, #0]
 8084a46:	b2e5      	uxtb	r5, r4
 8084a48:	4288      	cmp	r0, r1
 8084a4a:	d906      	bls.n	8084a5a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8084a4c:	3401      	adds	r4, #1
 8084a4e:	2c08      	cmp	r4, #8
 8084a50:	d002      	beq.n	8084a58 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8084a52:	0840      	lsrs	r0, r0, #1
 8084a54:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8084a56:	e7f5      	b.n	8084a44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8084a58:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8084a5a:	4b02      	ldr	r3, [pc, #8]	; (8084a64 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8084a5c:	5d5b      	ldrb	r3, [r3, r5]
 8084a5e:	7013      	strb	r3, [r2, #0]
 8084a60:	bd30      	pop	{r4, r5, pc}
 8084a62:	bf00      	nop
 8084a64:	0808b994 	.word	0x0808b994

08084a68 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084a68:	b570      	push	{r4, r5, r6, lr}
 8084a6a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8084a6c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084a70:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8084a72:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8084a74:	2214      	movs	r2, #20
 8084a76:	2100      	movs	r1, #0
 8084a78:	a803      	add	r0, sp, #12
 8084a7a:	f004 fcef 	bl	808945c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8084a7e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8084a80:	a903      	add	r1, sp, #12
 8084a82:	4630      	mov	r0, r6
 8084a84:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8084a86:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8084a8a:	f7ff fbdb 	bl	8084244 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8084a8e:	ab02      	add	r3, sp, #8
 8084a90:	f10d 0207 	add.w	r2, sp, #7
 8084a94:	4629      	mov	r1, r5
 8084a96:	9804      	ldr	r0, [sp, #16]
 8084a98:	f7ff ffd0 	bl	8084a3c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8084a9c:	7920      	ldrb	r0, [r4, #4]
 8084a9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8084aa2:	f7ff fbaf 	bl	8084204 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8084aa6:	9802      	ldr	r0, [sp, #8]
 8084aa8:	b008      	add	sp, #32
 8084aaa:	bd70      	pop	{r4, r5, r6, pc}

08084aac <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8084aac:	b538      	push	{r3, r4, r5, lr}
 8084aae:	4604      	mov	r4, r0
    if (dividerReference)
 8084ab0:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8084ab2:	4608      	mov	r0, r1
    if (dividerReference)
 8084ab4:	b14d      	cbz	r5, 8084aca <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8084ab6:	f7ff ffb3 	bl	8084a20 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8084aba:	2201      	movs	r2, #1
 8084abc:	fa25 f100 	lsr.w	r1, r5, r0
 8084ac0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8084ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8084ac6:	f7ff bfcf 	b.w	8084a68 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8084aca:	7920      	ldrb	r0, [r4, #4]
    }
}
 8084acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8084ad0:	f7ff bb98 	b.w	8084204 <HAL_SPI_Set_Clock_Divider>

08084ad4 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8084ad4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8084ad6:	7900      	ldrb	r0, [r0, #4]
 8084ad8:	f7ff fb9c 	bl	8084214 <HAL_SPI_Send_Receive_Data>
}
 8084adc:	b2c0      	uxtb	r0, r0
 8084ade:	bd08      	pop	{r3, pc}

08084ae0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8084ae0:	7900      	ldrb	r0, [r0, #4]
 8084ae2:	f7ff bba7 	b.w	8084234 <HAL_SPI_Is_Enabled>

08084ae6 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
 8084ae6:	f7ff bbe5 	b.w	80842b4 <HAL_Core_Enter_Bootloader>
	...

08084aec <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8084aec:	b510      	push	{r4, lr}
 8084aee:	4604      	mov	r4, r0
 8084af0:	4608      	mov	r0, r1
 8084af2:	4611      	mov	r1, r2
 8084af4:	461a      	mov	r2, r3
    system_sleep(sleepMode, seconds, flags.value(), NULL);
 8084af6:	2300      	movs	r3, #0
 8084af8:	f7ff fdc4 	bl	8084684 <system_sleep>
    System.sleepResult_ = SleepResult();
 8084afc:	4b07      	ldr	r3, [pc, #28]	; (8084b1c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x30>)
 8084afe:	2200      	movs	r2, #0
 8084b00:	701a      	strb	r2, [r3, #0]
 8084b02:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8084b06:	805a      	strh	r2, [r3, #2]
 8084b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8084b0c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8084b0e:	681a      	ldr	r2, [r3, #0]
 8084b10:	889b      	ldrh	r3, [r3, #4]
 8084b12:	6022      	str	r2, [r4, #0]
 8084b14:	80a3      	strh	r3, [r4, #4]
}
 8084b16:	4620      	mov	r0, r4
 8084b18:	bd10      	pop	{r4, pc}
 8084b1a:	bf00      	nop
 8084b1c:	20000d20 	.word	0x20000d20

08084b20 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084b20:	b530      	push	{r4, r5, lr}
 8084b22:	f64f 759c 	movw	r5, #65436	; 0xff9c
 8084b26:	8045      	strh	r5, [r0, #2]
 8084b28:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8084b2c:	2400      	movs	r4, #0
    if (ret > 0) {
 8084b2e:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8084b30:	7004      	strb	r4, [r0, #0]
 8084b32:	8085      	strh	r5, [r0, #4]
    if (ret > 0) {
 8084b34:	dd09      	ble.n	8084b4a <_ZN11SleepResultC1EiPKtj+0x2a>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8084b36:	3901      	subs	r1, #1
 8084b38:	4299      	cmp	r1, r3
 8084b3a:	d20a      	bcs.n	8084b52 <_ZN11SleepResultC1EiPKtj+0x32>
            pin_ = pins[ret];
 8084b3c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
            reason_ = WAKEUP_REASON_PIN;
            err_ = SYSTEM_ERROR_NONE;
 8084b40:	8044      	strh	r4, [r0, #2]
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
    if (ret > 0) {
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
            pin_ = pins[ret];
 8084b42:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8084b44:	2301      	movs	r3, #1
 8084b46:	7003      	strb	r3, [r0, #0]
 8084b48:	bd30      	pop	{r4, r5, pc}
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 8084b4a:	bf04      	itt	eq
 8084b4c:	2302      	moveq	r3, #2
 8084b4e:	7003      	strbeq	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 8084b50:	8041      	strh	r1, [r0, #2]
    }
}
 8084b52:	bd30      	pop	{r4, r5, pc}

08084b54 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult();
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084b54:	b570      	push	{r4, r5, r6, lr}
 8084b56:	460d      	mov	r5, r1
 8084b58:	4616      	mov	r6, r2
 8084b5a:	b086      	sub	sp, #24
 8084b5c:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084b5e:	2300      	movs	r3, #0
 8084b60:	9302      	str	r3, [sp, #8]
 8084b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult();
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8084b64:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8084b66:	9301      	str	r3, [sp, #4]
 8084b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8084b6a:	4631      	mov	r1, r6
 8084b6c:	9300      	str	r3, [sp, #0]
 8084b6e:	4628      	mov	r0, r5
 8084b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b72:	f7ff fdcb 	bl	808470c <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8084b76:	4633      	mov	r3, r6
 8084b78:	462a      	mov	r2, r5
 8084b7a:	4601      	mov	r1, r0
 8084b7c:	a804      	add	r0, sp, #16
 8084b7e:	f7ff ffcf 	bl	8084b20 <_ZN11SleepResultC1EiPKtj>
 8084b82:	4b06      	ldr	r3, [pc, #24]	; (8084b9c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8084b84:	9804      	ldr	r0, [sp, #16]
 8084b86:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8084b8a:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 8084b8c:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8084b8e:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8084b90:	681a      	ldr	r2, [r3, #0]
 8084b92:	889b      	ldrh	r3, [r3, #4]
 8084b94:	6022      	str	r2, [r4, #0]
 8084b96:	80a3      	strh	r3, [r4, #4]
}
 8084b98:	b006      	add	sp, #24
 8084b9a:	bd70      	pop	{r4, r5, r6, pc}
 8084b9c:	20000d20 	.word	0x20000d20

08084ba0 <_ZNK11SleepResult12wokenUpByRtcEv>:
 8084ba0:	7800      	ldrb	r0, [r0, #0]
 8084ba2:	3802      	subs	r0, #2
 8084ba4:	2801      	cmp	r0, #1
 8084ba6:	bf8c      	ite	hi
 8084ba8:	2000      	movhi	r0, #0
 8084baa:	2001      	movls	r0, #1
 8084bac:	4770      	bx	lr

08084bae <_ZNK11SleepResult12wokenUpByPinEv>:
bool SleepResult::wokenUpByRtc() const {
    return reason_ == WAKEUP_REASON_RTC || reason_ == WAKEUP_REASON_PIN_OR_RTC;
}

bool SleepResult::wokenUpByPin() const {
    return reason_ == WAKEUP_REASON_PIN || reason_ == WAKEUP_REASON_PIN_OR_RTC;
 8084bae:	7800      	ldrb	r0, [r0, #0]
 8084bb0:	2801      	cmp	r0, #1
 8084bb2:	d002      	beq.n	8084bba <_ZNK11SleepResult12wokenUpByPinEv+0xc>
 8084bb4:	1ec3      	subs	r3, r0, #3
 8084bb6:	4258      	negs	r0, r3
 8084bb8:	4158      	adcs	r0, r3
}
 8084bba:	4770      	bx	lr

08084bbc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084bbc:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 8084bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084bc2:	4c0d      	ldr	r4, [pc, #52]	; (8084bf8 <_GLOBAL__sub_I_System+0x3c>)
 8084bc4:	2500      	movs	r5, #0
 8084bc6:	8063      	strh	r3, [r4, #2]
 8084bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084bcc:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084bce:	80a3      	strh	r3, [r4, #4]
 8084bd0:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084bd2:	f7ff fd47 	bl	8084664 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8084bd6:	a802      	add	r0, sp, #8
 8084bd8:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8084bdc:	462a      	mov	r2, r5
 8084bde:	4629      	mov	r1, r5
 8084be0:	f7ff fb78 	bl	80842d4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8084be4:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8084be6:	2b1e      	cmp	r3, #30
 8084be8:	d104      	bne.n	8084bf4 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8084bea:	2303      	movs	r3, #3
 8084bec:	7023      	strb	r3, [r4, #0]
 8084bee:	2311      	movs	r3, #17
 8084bf0:	8065      	strh	r5, [r4, #2]
 8084bf2:	80a3      	strh	r3, [r4, #4]
 8084bf4:	b003      	add	sp, #12
 8084bf6:	bd30      	pop	{r4, r5, pc}
 8084bf8:	20000d20 	.word	0x20000d20

08084bfc <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8084bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084bfe:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8084c00:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8084c02:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8084c06:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8084c08:	2201      	movs	r2, #1
 8084c0a:	f247 5330 	movw	r3, #30000	; 0x7530
 8084c0e:	4621      	mov	r1, r4
 8084c10:	47a8      	blx	r5
}
 8084c12:	b003      	add	sp, #12
 8084c14:	bd30      	pop	{r4, r5, pc}

08084c16 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8084c16:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8084c18:	6803      	ldr	r3, [r0, #0]
 8084c1a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8084c1c:	f247 5330 	movw	r3, #30000	; 0x7530
 8084c20:	46a4      	mov	ip, r4
}
 8084c22:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8084c24:	4760      	bx	ip

08084c26 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8084c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084c28:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 8084c2a:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8084c2c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 8084c30:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8084c32:	4621      	mov	r1, r4
 8084c34:	4613      	mov	r3, r2
 8084c36:	2201      	movs	r2, #1
 8084c38:	47a8      	blx	r5
}
 8084c3a:	b003      	add	sp, #12
 8084c3c:	bd30      	pop	{r4, r5, pc}

08084c3e <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8084c3e:	4770      	bx	lr

08084c40 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8084c40:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8084c42:	4903      	ldr	r1, [pc, #12]	; (8084c50 <_ZN9TCPClient8remoteIPEv+0x10>)
 8084c44:	6001      	str	r1, [r0, #0]
 8084c46:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8084c4a:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8084c4c:	4770      	bx	lr
 8084c4e:	bf00      	nop
 8084c50:	0808bb48 	.word	0x0808bb48

08084c54 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8084c54:	4770      	bx	lr

08084c56 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8084c56:	2000      	movs	r0, #0
 8084c58:	4770      	bx	lr

08084c5a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8084c5a:	b510      	push	{r4, lr}
 8084c5c:	4604      	mov	r4, r0
 8084c5e:	f7fb fa1e 	bl	808009e <_ZdlPv>
 8084c62:	4620      	mov	r0, r4
 8084c64:	bd10      	pop	{r4, pc}

08084c66 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8084c66:	f7fb ba1a 	b.w	808009e <_ZdlPv>
	...

08084c6c <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8084c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084c6e:	461d      	mov	r5, r3
    stop();
 8084c70:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8084c72:	b087      	sub	sp, #28
    stop();
 8084c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8084c76:	4604      	mov	r4, r0
 8084c78:	460e      	mov	r6, r1
 8084c7a:	4617      	mov	r7, r2
    stop();
 8084c7c:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 8084c7e:	4b11      	ldr	r3, [pc, #68]	; (8084cc4 <_ZN9TCPClient7connectEPKctm+0x58>)
 8084c80:	6818      	ldr	r0, [r3, #0]
 8084c82:	6803      	ldr	r3, [r0, #0]
 8084c84:	681b      	ldr	r3, [r3, #0]
 8084c86:	4798      	blx	r3
 8084c88:	b1c8      	cbz	r0, 8084cbe <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 8084c8a:	a802      	add	r0, sp, #8
 8084c8c:	f001 f932 	bl	8085ef4 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 8084c90:	4630      	mov	r0, r6
 8084c92:	f005 f955 	bl	8089f40 <strlen>
 8084c96:	2300      	movs	r3, #0
 8084c98:	9300      	str	r3, [sp, #0]
 8084c9a:	b281      	uxth	r1, r0
 8084c9c:	462b      	mov	r3, r5
 8084c9e:	aa03      	add	r2, sp, #12
 8084ca0:	4630      	mov	r0, r6
 8084ca2:	f7ff fc87 	bl	80845b4 <inet_gethostbyname>
 8084ca6:	b950      	cbnz	r0, 8084cbe <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 8084ca8:	6823      	ldr	r3, [r4, #0]
 8084caa:	463a      	mov	r2, r7
 8084cac:	6a1e      	ldr	r6, [r3, #32]
 8084cae:	4b06      	ldr	r3, [pc, #24]	; (8084cc8 <_ZN9TCPClient7connectEPKctm+0x5c>)
 8084cb0:	a904      	add	r1, sp, #16
 8084cb2:	9304      	str	r3, [sp, #16]
 8084cb4:	9b03      	ldr	r3, [sp, #12]
 8084cb6:	4620      	mov	r0, r4
 8084cb8:	9305      	str	r3, [sp, #20]
 8084cba:	462b      	mov	r3, r5
 8084cbc:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 8084cbe:	b007      	add	sp, #28
 8084cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084cc2:	bf00      	nop
 8084cc4:	0808bb90 	.word	0x0808bb90
 8084cc8:	0808bb48 	.word	0x0808bb48

08084ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8084ccc:	b510      	push	{r4, lr}
 8084cce:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8084cd0:	6803      	ldr	r3, [r0, #0]
 8084cd2:	689b      	ldr	r3, [r3, #8]
 8084cd4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084cd6:	68a3      	ldr	r3, [r4, #8]
 8084cd8:	3b01      	subs	r3, #1
 8084cda:	60a3      	str	r3, [r4, #8]
 8084cdc:	b92b      	cbnz	r3, 8084cea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.31+0x1e>
            _M_destroy();
 8084cde:	6823      	ldr	r3, [r4, #0]
 8084ce0:	4620      	mov	r0, r4
        }
    }
 8084ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8084ce6:	68db      	ldr	r3, [r3, #12]
 8084ce8:	4718      	bx	r3
 8084cea:	bd10      	pop	{r4, pc}

08084cec <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8084cec:	b510      	push	{r4, lr}
 8084cee:	6943      	ldr	r3, [r0, #20]
 8084cf0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8084cf2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8084cf6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8084cfa:	429a      	cmp	r2, r3
 8084cfc:	d005      	beq.n	8084d0a <_ZN9TCPClient4peekEv+0x1e>
 8084cfe:	6962      	ldr	r2, [r4, #20]
 8084d00:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8084d04:	4413      	add	r3, r2
 8084d06:	7918      	ldrb	r0, [r3, #4]
 8084d08:	bd10      	pop	{r4, pc}
 8084d0a:	6803      	ldr	r3, [r0, #0]
 8084d0c:	691b      	ldr	r3, [r3, #16]
 8084d0e:	4798      	blx	r3
 8084d10:	2800      	cmp	r0, #0
 8084d12:	d1f4      	bne.n	8084cfe <_ZN9TCPClient4peekEv+0x12>
 8084d14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8084d18:	bd10      	pop	{r4, pc}

08084d1a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 8084d1a:	b510      	push	{r4, lr}
 8084d1c:	6943      	ldr	r3, [r0, #20]
 8084d1e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8084d20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8084d24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8084d28:	429a      	cmp	r2, r3
 8084d2a:	d008      	beq.n	8084d3e <_ZN9TCPClient4readEv+0x24>
 8084d2c:	6962      	ldr	r2, [r4, #20]
 8084d2e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8084d32:	1c59      	adds	r1, r3, #1
 8084d34:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8084d38:	4413      	add	r3, r2
 8084d3a:	7918      	ldrb	r0, [r3, #4]
 8084d3c:	bd10      	pop	{r4, pc}
 8084d3e:	6803      	ldr	r3, [r0, #0]
 8084d40:	691b      	ldr	r3, [r3, #16]
 8084d42:	4798      	blx	r3
 8084d44:	2800      	cmp	r0, #0
 8084d46:	d1f1      	bne.n	8084d2c <_ZN9TCPClient4readEv+0x12>
 8084d48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8084d4c:	bd10      	pop	{r4, pc}

08084d4e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 8084d4e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8084d50:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 8084d52:	6820      	ldr	r0, [r4, #0]
 8084d54:	f7ff fbe6 	bl	8084524 <socket_handle_valid>
 8084d58:	b110      	cbz	r0, 8084d60 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 8084d5a:	6820      	ldr	r0, [r4, #0]
 8084d5c:	f7ff fc02 	bl	8084564 <socket_close>
 8084d60:	4620      	mov	r0, r4
 8084d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084d66:	f7fb b99a 	b.w	808009e <_ZdlPv>

08084d6a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8084d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084d6c:	6943      	ldr	r3, [r0, #20]
 8084d6e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8084d70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8084d74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8084d78:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8084d7a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8084d7c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8084d7e:	d106      	bne.n	8084d8e <_ZN9TCPClient4readEPhj+0x24>
 8084d80:	6803      	ldr	r3, [r0, #0]
 8084d82:	691b      	ldr	r3, [r3, #16]
 8084d84:	4798      	blx	r3
 8084d86:	b910      	cbnz	r0, 8084d8e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8084d88:	f04f 34ff 	mov.w	r4, #4294967295
 8084d8c:	e014      	b.n	8084db8 <_ZN9TCPClient4readEPhj+0x4e>
 8084d8e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8084d90:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8084d92:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8084d96:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8084d9a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8084d9c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8084d9e:	42bc      	cmp	r4, r7
 8084da0:	bf28      	it	cs
 8084da2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8084da4:	3104      	adds	r1, #4
 8084da6:	4622      	mov	r2, r4
 8084da8:	f004 fb32 	bl	8089410 <memcpy>
 8084dac:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8084dae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8084db2:	4423      	add	r3, r4
 8084db4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8084db8:	4620      	mov	r0, r4
 8084dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084dbc <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8084dbc:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8084dbe:	2300      	movs	r3, #0
 8084dc0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8084dc4:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8084dc6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8084dca:	4770      	bx	lr

08084dcc <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8084dcc:	b538      	push	{r3, r4, r5, lr}
 8084dce:	6942      	ldr	r2, [r0, #20]
 8084dd0:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8084dd2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8084dd6:	b11b      	cbz	r3, 8084de0 <_ZN9TCPClient9availableEv+0x14>
 8084dd8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8084ddc:	429a      	cmp	r2, r3
 8084dde:	d00b      	beq.n	8084df8 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 8084de0:	4b18      	ldr	r3, [pc, #96]	; (8084e44 <_ZN9TCPClient9availableEv+0x78>)
 8084de2:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8084de4:	6803      	ldr	r3, [r0, #0]
 8084de6:	681b      	ldr	r3, [r3, #0]
 8084de8:	4798      	blx	r3
 8084dea:	b318      	cbz	r0, 8084e34 <_ZN9TCPClient9availableEv+0x68>
 8084dec:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8084dee:	6818      	ldr	r0, [r3, #0]
 8084df0:	f7ff fb98 	bl	8084524 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8084df4:	b918      	cbnz	r0, 8084dfe <_ZN9TCPClient9availableEv+0x32>
 8084df6:	e01d      	b.n	8084e34 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8084df8:	f7ff ffe0 	bl	8084dbc <_ZN9TCPClient12flush_bufferEv>
 8084dfc:	e7f0      	b.n	8084de0 <_ZN9TCPClient9availableEv+0x14>
 8084dfe:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 8084e00:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8084e04:	297f      	cmp	r1, #127	; 0x7f
 8084e06:	d815      	bhi.n	8084e34 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8084e08:	1d05      	adds	r5, r0, #4
 8084e0a:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8084e0e:	2300      	movs	r3, #0
 8084e10:	4429      	add	r1, r5
 8084e12:	6800      	ldr	r0, [r0, #0]
 8084e14:	f7ff fb9e 	bl	8084554 <socket_receive>
            if (ret > 0)
 8084e18:	2800      	cmp	r0, #0
 8084e1a:	dd0b      	ble.n	8084e34 <_ZN9TCPClient9availableEv+0x68>
 8084e1c:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 8084e1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8084e22:	b90a      	cbnz	r2, 8084e28 <_ZN9TCPClient9availableEv+0x5c>
 8084e24:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8084e28:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 8084e2a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8084e2e:	4418      	add	r0, r3
 8084e30:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 8084e34:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8084e36:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8084e3a:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8084e3e:	1a18      	subs	r0, r3, r0
}
 8084e40:	bd38      	pop	{r3, r4, r5, pc}
 8084e42:	bf00      	nop
 8084e44:	0808bb90 	.word	0x0808bb90

08084e48 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8084e48:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8084e4a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8084e4c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8084e4e:	6818      	ldr	r0, [r3, #0]
 8084e50:	f7ff fb68 	bl	8084524 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8084e54:	b118      	cbz	r0, 8084e5e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 8084e56:	6963      	ldr	r3, [r4, #20]
 8084e58:	6818      	ldr	r0, [r3, #0]
 8084e5a:	f7ff fb83 	bl	8084564 <socket_close>
 8084e5e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8084e60:	f7ff fb88 	bl	8084574 <socket_handle_invalid>
 8084e64:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8084e66:	6963      	ldr	r3, [r4, #20]
 8084e68:	2200      	movs	r2, #0
 8084e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8084e6e:	4620      	mov	r0, r4
}
 8084e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8084e74:	f7ff bfa2 	b.w	8084dbc <_ZN9TCPClient12flush_bufferEv>

08084e78 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8084e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084e7e:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8084e80:	4b17      	ldr	r3, [pc, #92]	; (8084ee0 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8084e82:	2600      	movs	r6, #0
 8084e84:	6046      	str	r6, [r0, #4]
 8084e86:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8084e88:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8084e8a:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8084e8c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084e8e:	2090      	movs	r0, #144	; 0x90
 8084e90:	460f      	mov	r7, r1
 8084e92:	f7fb f902 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8084e96:	4605      	mov	r5, r0
 8084e98:	b138      	cbz	r0, 8084eaa <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 8084e9a:	6007      	str	r7, [r0, #0]
 8084e9c:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 8084ea0:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8084ea4:	3088      	adds	r0, #136	; 0x88
 8084ea6:	f001 f825 	bl	8085ef4 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8084eaa:	2014      	movs	r0, #20
 8084eac:	f7fb f8f5 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8084eb0:	4603      	mov	r3, r0
 8084eb2:	b128      	cbz	r0, 8084ec0 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8084eb4:	2201      	movs	r2, #1
 8084eb6:	6042      	str	r2, [r0, #4]
 8084eb8:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8084eba:	4a0a      	ldr	r2, [pc, #40]	; (8084ee4 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8084ebc:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8084ebe:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8084ec0:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8084ec2:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8084ec4:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8084ec6:	b128      	cbz	r0, 8084ed4 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8084ec8:	6843      	ldr	r3, [r0, #4]
 8084eca:	3b01      	subs	r3, #1
 8084ecc:	6043      	str	r3, [r0, #4]
 8084ece:	b90b      	cbnz	r3, 8084ed4 <_ZN9TCPClientC1Em+0x5c>
 8084ed0:	f7ff fefc 	bl	8084ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.31>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8084ed4:	4620      	mov	r0, r4
 8084ed6:	f7ff ff71 	bl	8084dbc <_ZN9TCPClient12flush_bufferEv>
}
 8084eda:	4620      	mov	r0, r4
 8084edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084ede:	bf00      	nop
 8084ee0:	0808b9c0 	.word	0x0808b9c0
 8084ee4:	0808b9a4 	.word	0x0808b9a4

08084ee8 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8084ee8:	b510      	push	{r4, lr}
 8084eea:	4604      	mov	r4, r0
 8084eec:	f7ff fb42 	bl	8084574 <socket_handle_invalid>
 8084ef0:	4601      	mov	r1, r0
 8084ef2:	4620      	mov	r0, r4
 8084ef4:	f7ff ffc0 	bl	8084e78 <_ZN9TCPClientC1Em>
{
}
 8084ef8:	4620      	mov	r0, r4
 8084efa:	bd10      	pop	{r4, pc}

08084efc <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8084efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f00:	4698      	mov	r8, r3
    stop();
 8084f02:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8084f04:	b08a      	sub	sp, #40	; 0x28
    stop();
 8084f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8084f08:	4604      	mov	r4, r0
 8084f0a:	460d      	mov	r5, r1
 8084f0c:	4617      	mov	r7, r2
    stop();
 8084f0e:	4798      	blx	r3
 8084f10:	4b2c      	ldr	r3, [pc, #176]	; (8084fc4 <_ZN9TCPClient7connectE9IPAddresstm+0xc8>)
 8084f12:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 8084f14:	6803      	ldr	r3, [r0, #0]
 8084f16:	681b      	ldr	r3, [r3, #0]
 8084f18:	4798      	blx	r3
 8084f1a:	2800      	cmp	r0, #0
 8084f1c:	d04f      	beq.n	8084fbe <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8084f1e:	463b      	mov	r3, r7
 8084f20:	2206      	movs	r2, #6
 8084f22:	2101      	movs	r1, #1
 8084f24:	f8cd 8000 	str.w	r8, [sp]
 8084f28:	2002      	movs	r0, #2
 8084f2a:	6966      	ldr	r6, [r4, #20]
 8084f2c:	f7ff fb02 	bl	8084534 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8084f30:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8084f32:	6030      	str	r0, [r6, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8084f34:	9302      	str	r3, [sp, #8]
 8084f36:	2600      	movs	r6, #0
 8084f38:	6963      	ldr	r3, [r4, #20]
 8084f3a:	9603      	str	r6, [sp, #12]
 8084f3c:	681b      	ldr	r3, [r3, #0]
 8084f3e:	2001      	movs	r0, #1
 8084f40:	9301      	str	r3, [sp, #4]
 8084f42:	4b21      	ldr	r3, [pc, #132]	; (8084fc8 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 8084f44:	aa02      	add	r2, sp, #8
 8084f46:	9300      	str	r3, [sp, #0]
 8084f48:	4920      	ldr	r1, [pc, #128]	; (8084fcc <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 8084f4a:	4633      	mov	r3, r6
 8084f4c:	f7ff fb72 	bl	8084634 <log_message>

          if (socket_handle_valid(d_->sock))
 8084f50:	6963      	ldr	r3, [r4, #20]
 8084f52:	6818      	ldr	r0, [r3, #0]
 8084f54:	f7ff fae6 	bl	8084524 <socket_handle_valid>
 8084f58:	b388      	cbz	r0, 8084fbe <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
          {
            flush_buffer();
 8084f5a:	4620      	mov	r0, r4
 8084f5c:	f7ff ff2e 	bl	8084dbc <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8084f60:	2302      	movs	r3, #2
 8084f62:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8084f66:	0a3b      	lsrs	r3, r7, #8
 8084f68:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8084f6c:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8084f6e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8084f72:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 8084f76:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8084f78:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8084f7c:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8084f80:	796b      	ldrb	r3, [r5, #5]
 8084f82:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8084f86:	792b      	ldrb	r3, [r5, #4]
 8084f88:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8084f8c:	f7ff fb0a 	bl	80845a4 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8084f90:	6963      	ldr	r3, [r4, #20]
 8084f92:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8084f94:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8084f96:	a902      	add	r1, sp, #8
 8084f98:	6818      	ldr	r0, [r3, #0]
 8084f9a:	f7ff fad3 	bl	8084544 <socket_connect>
 8084f9e:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8084fa0:	4640      	mov	r0, r8
 8084fa2:	f7ff faff 	bl	80845a4 <HAL_NET_SetNetWatchDog>
 8084fa6:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8084fa8:	686a      	ldr	r2, [r5, #4]
 8084faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8084fae:	b12f      	cbz	r7, 8084fbc <_ZN9TCPClient7connectE9IPAddresstm+0xc0>
            {
                stop();
 8084fb0:	6823      	ldr	r3, [r4, #0]
 8084fb2:	4620      	mov	r0, r4
 8084fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084fb6:	4798      	blx	r3
 8084fb8:	4630      	mov	r0, r6
 8084fba:	e000      	b.n	8084fbe <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8084fbc:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8084fbe:	b00a      	add	sp, #40	; 0x28
 8084fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084fc4:	0808bb90 	.word	0x0808bb90
 8084fc8:	0808ba0b 	.word	0x0808ba0b
 8084fcc:	0808ba04 	.word	0x0808ba04

08084fd0 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8084fd0:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8084fd2:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8084fd4:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8084fd6:	6818      	ldr	r0, [r3, #0]
 8084fd8:	f7ff faa4 	bl	8084524 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8084fdc:	b908      	cbnz	r0, 8084fe2 <_ZN9TCPClient6statusEv+0x12>
 8084fde:	2000      	movs	r0, #0
 8084fe0:	bd10      	pop	{r4, pc}
 8084fe2:	4b07      	ldr	r3, [pc, #28]	; (8085000 <_ZN9TCPClient6statusEv+0x30>)
 8084fe4:	6818      	ldr	r0, [r3, #0]
 8084fe6:	6803      	ldr	r3, [r0, #0]
 8084fe8:	681b      	ldr	r3, [r3, #0]
 8084fea:	4798      	blx	r3
 8084fec:	2800      	cmp	r0, #0
 8084fee:	d0f6      	beq.n	8084fde <_ZN9TCPClient6statusEv+0xe>
 8084ff0:	6963      	ldr	r3, [r4, #20]
 8084ff2:	6818      	ldr	r0, [r3, #0]
 8084ff4:	f7ff fa8e 	bl	8084514 <socket_active_status>
 8084ff8:	fab0 f080 	clz	r0, r0
 8084ffc:	0940      	lsrs	r0, r0, #5
}
 8084ffe:	bd10      	pop	{r4, pc}
 8085000:	0808bb90 	.word	0x0808bb90

08085004 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 8085004:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 8085008:	2500      	movs	r5, #0
 808500a:	6045      	str	r5, [r0, #4]
 808500c:	4604      	mov	r4, r0
 808500e:	460e      	mov	r6, r1
 8085010:	4617      	mov	r7, r2
 8085012:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8085014:	f7ff ffdc 	bl	8084fd0 <_ZN9TCPClient6statusEv>
 8085018:	b160      	cbz	r0, 8085034 <_ZN9TCPClient5writeEPKhjm+0x30>
 808501a:	6960      	ldr	r0, [r4, #20]
 808501c:	9501      	str	r5, [sp, #4]
 808501e:	f8cd 8000 	str.w	r8, [sp]
 8085022:	462b      	mov	r3, r5
 8085024:	463a      	mov	r2, r7
 8085026:	4631      	mov	r1, r6
 8085028:	6800      	ldr	r0, [r0, #0]
 808502a:	f7ff faab 	bl	8084584 <socket_send_ex>
    if (ret < 0) {
 808502e:	2800      	cmp	r0, #0
 8085030:	da03      	bge.n	808503a <_ZN9TCPClient5writeEPKhjm+0x36>
 8085032:	e001      	b.n	8085038 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8085034:	f04f 30ff 	mov.w	r0, #4294967295
 8085038:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 808503a:	b002      	add	sp, #8
 808503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085040 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8085040:	b538      	push	{r3, r4, r5, lr}
 8085042:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8085044:	f7ff ffc4 	bl	8084fd0 <_ZN9TCPClient6statusEv>
 8085048:	bb00      	cbnz	r0, 808508c <_ZN9TCPClient9connectedEv+0x4c>
 808504a:	6963      	ldr	r3, [r4, #20]
 808504c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8085050:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8085054:	4291      	cmp	r1, r2
 8085056:	d119      	bne.n	808508c <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8085058:	6818      	ldr	r0, [r3, #0]
 808505a:	f7ff fa63 	bl	8084524 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 808505e:	b128      	cbz	r0, 808506c <_ZN9TCPClient9connectedEv+0x2c>
 8085060:	6963      	ldr	r3, [r4, #20]
 8085062:	6818      	ldr	r0, [r3, #0]
 8085064:	f7ff fa56 	bl	8084514 <socket_active_status>
 8085068:	2801      	cmp	r0, #1
 808506a:	d001      	beq.n	8085070 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808506c:	2500      	movs	r5, #0
 808506e:	e00e      	b.n	808508e <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8085070:	6823      	ldr	r3, [r4, #0]
 8085072:	4620      	mov	r0, r4
 8085074:	691b      	ldr	r3, [r3, #16]
 8085076:	4798      	blx	r3
 8085078:	2800      	cmp	r0, #0
 808507a:	bf14      	ite	ne
 808507c:	2501      	movne	r5, #1
 808507e:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8085080:	d105      	bne.n	808508e <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 8085082:	6823      	ldr	r3, [r4, #0]
 8085084:	4620      	mov	r0, r4
 8085086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085088:	4798      	blx	r3
 808508a:	e000      	b.n	808508e <_ZN9TCPClient9connectedEv+0x4e>
 808508c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 808508e:	4628      	mov	r0, r5
 8085090:	bd38      	pop	{r3, r4, r5, pc}

08085092 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8085092:	b508      	push	{r3, lr}
   return (status()!=0);
 8085094:	f7ff ff9c 	bl	8084fd0 <_ZN9TCPClient6statusEv>
}
 8085098:	3000      	adds	r0, #0
 808509a:	bf18      	it	ne
 808509c:	2001      	movne	r0, #1
 808509e:	bd08      	pop	{r3, pc}

080850a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80850a0:	b510      	push	{r4, lr}
 80850a2:	4604      	mov	r4, r0
{
	free(buffer);
 80850a4:	6800      	ldr	r0, [r0, #0]
 80850a6:	f7ff fbab 	bl	8084800 <free>
}
 80850aa:	4620      	mov	r0, r4
 80850ac:	bd10      	pop	{r4, pc}

080850ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80850ae:	b510      	push	{r4, lr}
 80850b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80850b2:	6800      	ldr	r0, [r0, #0]
 80850b4:	b108      	cbz	r0, 80850ba <_ZN6String10invalidateEv+0xc>
 80850b6:	f7ff fba3 	bl	8084800 <free>
	buffer = NULL;
 80850ba:	2300      	movs	r3, #0
 80850bc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80850be:	60a3      	str	r3, [r4, #8]
 80850c0:	6063      	str	r3, [r4, #4]
 80850c2:	bd10      	pop	{r4, pc}

080850c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80850c4:	b538      	push	{r3, r4, r5, lr}
 80850c6:	4604      	mov	r4, r0
 80850c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80850ca:	6800      	ldr	r0, [r0, #0]
 80850cc:	3101      	adds	r1, #1
 80850ce:	f7ff fb9f 	bl	8084810 <realloc>
	if (newbuffer) {
 80850d2:	b110      	cbz	r0, 80850da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80850d4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80850d8:	2001      	movs	r0, #1
	}
	return 0;
}
 80850da:	bd38      	pop	{r3, r4, r5, pc}

080850dc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80850dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80850de:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80850e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80850e2:	b113      	cbz	r3, 80850ea <_ZN6String7reserveEj+0xe>
 80850e4:	6843      	ldr	r3, [r0, #4]
 80850e6:	428b      	cmp	r3, r1
 80850e8:	d207      	bcs.n	80850fa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80850ea:	4620      	mov	r0, r4
 80850ec:	f7ff ffea 	bl	80850c4 <_ZN6String12changeBufferEj>
 80850f0:	b120      	cbz	r0, 80850fc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80850f2:	68a3      	ldr	r3, [r4, #8]
 80850f4:	b90b      	cbnz	r3, 80850fa <_ZN6String7reserveEj+0x1e>
 80850f6:	6822      	ldr	r2, [r4, #0]
 80850f8:	7013      	strb	r3, [r2, #0]
 80850fa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80850fc:	bd10      	pop	{r4, pc}

080850fe <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80850fe:	b570      	push	{r4, r5, r6, lr}
 8085100:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8085102:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8085104:	4604      	mov	r4, r0
 8085106:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8085108:	f7ff ffe8 	bl	80850dc <_ZN6String7reserveEj>
 808510c:	b918      	cbnz	r0, 8085116 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808510e:	4620      	mov	r0, r4
 8085110:	f7ff ffcd 	bl	80850ae <_ZN6String10invalidateEv>
		return *this;
 8085114:	e009      	b.n	808512a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8085116:	462a      	mov	r2, r5
 8085118:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808511a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808511c:	6820      	ldr	r0, [r4, #0]
 808511e:	f004 f977 	bl	8089410 <memcpy>
	buffer[len] = 0;
 8085122:	6822      	ldr	r2, [r4, #0]
 8085124:	68a3      	ldr	r3, [r4, #8]
 8085126:	2100      	movs	r1, #0
 8085128:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808512a:	4620      	mov	r0, r4
 808512c:	bd70      	pop	{r4, r5, r6, pc}

0808512e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808512e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8085130:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8085132:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8085134:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8085136:	6043      	str	r3, [r0, #4]
	len = 0;
 8085138:	6083      	str	r3, [r0, #8]
	flags = 0;
 808513a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808513c:	460d      	mov	r5, r1
 808513e:	b139      	cbz	r1, 8085150 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8085140:	4608      	mov	r0, r1
 8085142:	f004 fefd 	bl	8089f40 <strlen>
 8085146:	4629      	mov	r1, r5
 8085148:	4602      	mov	r2, r0
 808514a:	4620      	mov	r0, r4
 808514c:	f7ff ffd7 	bl	80850fe <_ZN6String4copyEPKcj>
}
 8085150:	4620      	mov	r0, r4
 8085152:	bd38      	pop	{r3, r4, r5, pc}

08085154 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8085154:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8085156:	b510      	push	{r4, lr}
 8085158:	460b      	mov	r3, r1
 808515a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808515c:	d007      	beq.n	808516e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808515e:	6809      	ldr	r1, [r1, #0]
 8085160:	b119      	cbz	r1, 808516a <_ZN6StringaSERKS_+0x16>
 8085162:	689a      	ldr	r2, [r3, #8]
 8085164:	f7ff ffcb 	bl	80850fe <_ZN6String4copyEPKcj>
 8085168:	e001      	b.n	808516e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808516a:	f7ff ffa0 	bl	80850ae <_ZN6String10invalidateEv>

	return *this;
}
 808516e:	4620      	mov	r0, r4
 8085170:	bd10      	pop	{r4, pc}

08085172 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8085172:	b510      	push	{r4, lr}
 8085174:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8085176:	2300      	movs	r3, #0
 8085178:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808517a:	6043      	str	r3, [r0, #4]
	len = 0;
 808517c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808517e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8085180:	f7ff ffe8 	bl	8085154 <_ZN6StringaSERKS_>
}
 8085184:	4620      	mov	r0, r4
 8085186:	bd10      	pop	{r4, pc}

08085188 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8085188:	6800      	ldr	r0, [r0, #0]
 808518a:	b108      	cbz	r0, 8085190 <_ZNK6String5toIntEv+0x8>
 808518c:	f004 b830 	b.w	80891f0 <atol>
	return 0;
}
 8085190:	4770      	bx	lr

08085192 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8085192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085194:	4606      	mov	r6, r0
 8085196:	460d      	mov	r5, r1
 8085198:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808519a:	2400      	movs	r4, #0
  while (size--) {
 808519c:	42bd      	cmp	r5, r7
 808519e:	d00c      	beq.n	80851ba <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80851a0:	6833      	ldr	r3, [r6, #0]
 80851a2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80851a6:	689b      	ldr	r3, [r3, #8]
 80851a8:	4630      	mov	r0, r6
 80851aa:	4798      	blx	r3
     if (chunk>=0)
 80851ac:	2800      	cmp	r0, #0
 80851ae:	db01      	blt.n	80851b4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80851b0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80851b2:	e7f3      	b.n	808519c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80851b4:	2c00      	cmp	r4, #0
 80851b6:	bf08      	it	eq
 80851b8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80851ba:	4620      	mov	r0, r4
 80851bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080851be <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80851be:	b570      	push	{r4, r5, r6, lr}
 80851c0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80851c2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80851c4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80851c6:	b149      	cbz	r1, 80851dc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80851c8:	f004 feba 	bl	8089f40 <strlen>
 80851cc:	682b      	ldr	r3, [r5, #0]
 80851ce:	4602      	mov	r2, r0
 80851d0:	4621      	mov	r1, r4
 80851d2:	4628      	mov	r0, r5
    }
 80851d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80851d8:	68db      	ldr	r3, [r3, #12]
 80851da:	4718      	bx	r3
    }
 80851dc:	bd70      	pop	{r4, r5, r6, pc}

080851de <_ZN5Print5printEPKc>:
 80851de:	b508      	push	{r3, lr}
 80851e0:	f7ff ffed 	bl	80851be <_ZN5Print5writeEPKc>
 80851e4:	bd08      	pop	{r3, pc}

080851e6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80851e6:	6803      	ldr	r3, [r0, #0]
 80851e8:	689b      	ldr	r3, [r3, #8]
 80851ea:	4718      	bx	r3

080851ec <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80851ec:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80851ee:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80851f0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80851f2:	f7ff fff8 	bl	80851e6 <_ZN5Print5printEc>
  n += print('\n');
 80851f6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80851f8:	4604      	mov	r4, r0
  n += print('\n');
 80851fa:	4628      	mov	r0, r5
 80851fc:	f7ff fff3 	bl	80851e6 <_ZN5Print5printEc>
  return n;
}
 8085200:	4420      	add	r0, r4
 8085202:	bd38      	pop	{r3, r4, r5, pc}

08085204 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8085204:	2a01      	cmp	r2, #1
 8085206:	bf98      	it	ls
 8085208:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808520a:	b530      	push	{r4, r5, lr}
 808520c:	460b      	mov	r3, r1
 808520e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8085210:	2100      	movs	r1, #0
 8085212:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8085216:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808521a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808521e:	fb05 3312 	mls	r3, r5, r2, r3
 8085222:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8085224:	2b09      	cmp	r3, #9
 8085226:	bf94      	ite	ls
 8085228:	3330      	addls	r3, #48	; 0x30
 808522a:	3337      	addhi	r3, #55	; 0x37
 808522c:	b2db      	uxtb	r3, r3
 808522e:	4621      	mov	r1, r4
 8085230:	f804 3901 	strb.w	r3, [r4], #-1
 8085234:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8085236:	2d00      	cmp	r5, #0
 8085238:	d1ef      	bne.n	808521a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808523a:	f7ff ffc0 	bl	80851be <_ZN5Print5writeEPKc>
}
 808523e:	b00b      	add	sp, #44	; 0x2c
 8085240:	bd30      	pop	{r4, r5, pc}

08085242 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8085242:	b410      	push	{r4}
  if (base == 0) return write(n);
 8085244:	b922      	cbnz	r2, 8085250 <_ZN5Print5printEmi+0xe>
 8085246:	6803      	ldr	r3, [r0, #0]
 8085248:	b2c9      	uxtb	r1, r1
 808524a:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808524c:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808524e:	4718      	bx	r3
  else return printNumber(n, base);
 8085250:	b2d2      	uxtb	r2, r2
}
 8085252:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8085254:	f7ff bfd6 	b.w	8085204 <_ZN5Print11printNumberEmh>

08085258 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8085258:	f7ff bff3 	b.w	8085242 <_ZN5Print5printEmi>

0808525c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808525c:	b40c      	push	{r2, r3}
 808525e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085262:	b087      	sub	sp, #28
 8085264:	af00      	add	r7, sp, #0
 8085266:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808526a:	f854 9b04 	ldr.w	r9, [r4], #4
 808526e:	4605      	mov	r5, r0
 8085270:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8085272:	4623      	mov	r3, r4
 8085274:	464a      	mov	r2, r9
 8085276:	2114      	movs	r1, #20
 8085278:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808527a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808527c:	f7ff faf8 	bl	8084870 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8085280:	2813      	cmp	r0, #19
 8085282:	d805      	bhi.n	8085290 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8085284:	1d39      	adds	r1, r7, #4
 8085286:	4628      	mov	r0, r5
 8085288:	f7ff ff99 	bl	80851be <_ZN5Print5writeEPKc>
 808528c:	4604      	mov	r4, r0
 808528e:	e013      	b.n	80852b8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8085290:	f100 0308 	add.w	r3, r0, #8
 8085294:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8085298:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808529a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808529e:	1c41      	adds	r1, r0, #1
 80852a0:	4623      	mov	r3, r4
 80852a2:	464a      	mov	r2, r9
 80852a4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80852a6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80852a8:	f7ff fae2 	bl	8084870 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80852ac:	4669      	mov	r1, sp
 80852ae:	4628      	mov	r0, r5
 80852b0:	f7ff ff85 	bl	80851be <_ZN5Print5writeEPKc>
 80852b4:	4604      	mov	r4, r0
 80852b6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80852b8:	b11e      	cbz	r6, 80852c2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80852ba:	4628      	mov	r0, r5
 80852bc:	f7ff ff96 	bl	80851ec <_ZN5Print7printlnEv>
 80852c0:	4404      	add	r4, r0
    return n;
}
 80852c2:	4620      	mov	r0, r4
 80852c4:	371c      	adds	r7, #28
 80852c6:	46bd      	mov	sp, r7
 80852c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80852cc:	b002      	add	sp, #8
 80852ce:	4770      	bx	lr

080852d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80852d0:	680b      	ldr	r3, [r1, #0]
 80852d2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80852d4:	b113      	cbz	r3, 80852dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80852d6:	685a      	ldr	r2, [r3, #4]
 80852d8:	3201      	adds	r2, #1
 80852da:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80852dc:	4770      	bx	lr
	...

080852e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80852e0:	4a01      	ldr	r2, [pc, #4]	; (80852e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80852e2:	4b02      	ldr	r3, [pc, #8]	; (80852ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80852e4:	601a      	str	r2, [r3, #0]
 80852e6:	4770      	bx	lr
 80852e8:	0808bad2 	.word	0x0808bad2
 80852ec:	20000d28 	.word	0x20000d28

080852f0 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80852f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80852f2:	4b14      	ldr	r3, [pc, #80]	; (8085344 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80852f4:	4f14      	ldr	r7, [pc, #80]	; (8085348 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80852f6:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80852f8:	4b14      	ldr	r3, [pc, #80]	; (808534c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80852fa:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80852fc:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80852fe:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8085300:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8085302:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8085304:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8085306:	d01b      	beq.n	8085340 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8085308:	a80a      	add	r0, sp, #40	; 0x28
 808530a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808530e:	f003 ff87 	bl	8089220 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8085312:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8085314:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8085316:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8085318:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808531c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808531e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8085320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8085322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8085324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8085326:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808532a:	4c09      	ldr	r4, [pc, #36]	; (8085350 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808532c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8085330:	ad01      	add	r5, sp, #4
 8085332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8085334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8085336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8085338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808533a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808533c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8085340:	b00b      	add	sp, #44	; 0x2c
 8085342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085344:	20000d60 	.word	0x20000d60
 8085348:	20000d5c 	.word	0x20000d5c
 808534c:	20000d58 	.word	0x20000d58
 8085350:	20000d2c 	.word	0x20000d2c

08085354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8085354:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8085356:	2000      	movs	r0, #0
 8085358:	f7ff fa32 	bl	80847c0 <spark_sync_time_pending>
 808535c:	b128      	cbz	r0, 808536a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808535e:	f7ff fa1f 	bl	80847a0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8085362:	f080 0001 	eor.w	r0, r0, #1
 8085366:	b2c0      	uxtb	r0, r0
 8085368:	bd08      	pop	{r3, pc}
 808536a:	2001      	movs	r0, #1
    }
 808536c:	bd08      	pop	{r3, pc}
	...

08085370 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
 8085370:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8085372:	f7ff ffbd 	bl	80852f0 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
 8085376:	4b04      	ldr	r3, [pc, #16]	; (8085388 <_ZN9TimeClass12hourFormat12El+0x18>)
 8085378:	6898      	ldr	r0, [r3, #8]
 808537a:	b118      	cbz	r0, 8085384 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
 808537c:	280c      	cmp	r0, #12
 808537e:	dd02      	ble.n	8085386 <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
 8085380:	380c      	subs	r0, #12
 8085382:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
 8085384:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
 8085386:	bd08      	pop	{r3, pc}
 8085388:	20000d2c 	.word	0x20000d2c

0808538c <_ZN9TimeClass4isPMEl>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
 808538c:	b508      	push	{r3, lr}
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808538e:	f7ff ffaf 	bl	80852f0 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
 8085392:	4b03      	ldr	r3, [pc, #12]	; (80853a0 <_ZN9TimeClass4isPMEl+0x14>)
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
	return (hour(t) >= 12);
 8085394:	6898      	ldr	r0, [r3, #8]
}
 8085396:	280b      	cmp	r0, #11
 8085398:	bfd4      	ite	le
 808539a:	2000      	movle	r0, #0
 808539c:	2001      	movgt	r0, #1
 808539e:	bd08      	pop	{r3, pc}
 80853a0:	20000d2c 	.word	0x20000d2c

080853a4 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
 80853a4:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
 80853a6:	f7fe ff75 	bl	8084294 <HAL_RTC_Get_UnixTime>
 80853aa:	4b03      	ldr	r3, [pc, #12]	; (80853b8 <_ZN9TimeClass5localEv+0x14>)
 80853ac:	681b      	ldr	r3, [r3, #0]
 80853ae:	4418      	add	r0, r3
 80853b0:	4b02      	ldr	r3, [pc, #8]	; (80853bc <_ZN9TimeClass5localEv+0x18>)
 80853b2:	681b      	ldr	r3, [r3, #0]
}
 80853b4:	4418      	add	r0, r3
 80853b6:	bd08      	pop	{r3, pc}
 80853b8:	20000d60 	.word	0x20000d60
 80853bc:	20000d58 	.word	0x20000d58

080853c0 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80853c0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80853c2:	4909      	ldr	r1, [pc, #36]	; (80853e8 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80853c4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80853c6:	f003 fe89 	bl	80890dc <__aeabi_fcmplt>
 80853ca:	b960      	cbnz	r0, 80853e6 <_ZN9TimeClass4zoneEf+0x26>
 80853cc:	4907      	ldr	r1, [pc, #28]	; (80853ec <_ZN9TimeClass4zoneEf+0x2c>)
 80853ce:	4620      	mov	r0, r4
 80853d0:	f003 fea2 	bl	8089118 <__aeabi_fcmpgt>
 80853d4:	b938      	cbnz	r0, 80853e6 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80853d6:	4906      	ldr	r1, [pc, #24]	; (80853f0 <_ZN9TimeClass4zoneEf+0x30>)
 80853d8:	4620      	mov	r0, r4
 80853da:	f003 fce1 	bl	8088da0 <__aeabi_fmul>
 80853de:	f003 fea5 	bl	808912c <__aeabi_f2iz>
 80853e2:	4b04      	ldr	r3, [pc, #16]	; (80853f4 <_ZN9TimeClass4zoneEf+0x34>)
 80853e4:	6018      	str	r0, [r3, #0]
 80853e6:	bd10      	pop	{r4, pc}
 80853e8:	c1400000 	.word	0xc1400000
 80853ec:	41600000 	.word	0x41600000
 80853f0:	45610000 	.word	0x45610000
 80853f4:	20000d60 	.word	0x20000d60

080853f8 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80853f8:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 80853fa:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80853fc:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 80853fe:	f003 fe6d 	bl	80890dc <__aeabi_fcmplt>
 8085402:	b968      	cbnz	r0, 8085420 <_ZN9TimeClass12setDSTOffsetEf+0x28>
 8085404:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8085408:	4620      	mov	r0, r4
 808540a:	f003 fe85 	bl	8089118 <__aeabi_fcmpgt>
 808540e:	b938      	cbnz	r0, 8085420 <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 8085410:	4904      	ldr	r1, [pc, #16]	; (8085424 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 8085412:	4620      	mov	r0, r4
 8085414:	f003 fcc4 	bl	8088da0 <__aeabi_fmul>
 8085418:	f003 fe88 	bl	808912c <__aeabi_f2iz>
 808541c:	4b02      	ldr	r3, [pc, #8]	; (8085428 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 808541e:	6018      	str	r0, [r3, #0]
 8085420:	bd10      	pop	{r4, pc}
 8085422:	bf00      	nop
 8085424:	45610000 	.word	0x45610000
 8085428:	20000820 	.word	0x20000820

0808542c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808542e:	4b0e      	ldr	r3, [pc, #56]	; (8085468 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8085430:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8085432:	681b      	ldr	r3, [r3, #0]
 8085434:	a802      	add	r0, sp, #8
 8085436:	4419      	add	r1, r3
 8085438:	4b0c      	ldr	r3, [pc, #48]	; (808546c <_ZN9TimeClass7timeStrEl+0x40>)
 808543a:	681b      	ldr	r3, [r3, #0]
 808543c:	4419      	add	r1, r3
 808543e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8085442:	f003 feed 	bl	8089220 <localtime>
        char* ascstr = asctime(calendar_time);
 8085446:	f003 fe97 	bl	8089178 <asctime>
 808544a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 808544c:	f004 fd78 	bl	8089f40 <strlen>
        ascstr[len-1] = 0; // remove final newline
 8085450:	2300      	movs	r3, #0
 8085452:	4428      	add	r0, r5
 8085454:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8085458:	4629      	mov	r1, r5
 808545a:	4620      	mov	r0, r4
 808545c:	f7ff fe67 	bl	808512e <_ZN6StringC1EPK19__FlashStringHelper>
}
 8085460:	4620      	mov	r0, r4
 8085462:	b003      	add	sp, #12
 8085464:	bd30      	pop	{r4, r5, pc}
 8085466:	bf00      	nop
 8085468:	20000d60 	.word	0x20000d60
 808546c:	20000d58 	.word	0x20000d58

08085470 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8085470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085474:	b0a2      	sub	sp, #136	; 0x88
    char format_str[64];
    strcpy(format_str, format);
 8085476:	ac12      	add	r4, sp, #72	; 0x48
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8085478:	4607      	mov	r7, r0
 808547a:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 808547c:	4620      	mov	r0, r4
 808547e:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8085480:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 8085482:	f004 f825 	bl	80894d0 <strcpy>
    size_t len = strlen(format_str);
 8085486:	4620      	mov	r0, r4
 8085488:	f004 fd5a 	bl	8089f40 <strlen>
 808548c:	4680      	mov	r8, r0

    char time_zone_str[10];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808548e:	b925      	cbnz	r5, 808549a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 8085490:	4924      	ldr	r1, [pc, #144]	; (8085524 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 8085492:	a802      	add	r0, sp, #8
 8085494:	f004 f81c 	bl	80894d0 <strcpy>
 8085498:	e013      	b.n	80854c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808549a:	213c      	movs	r1, #60	; 0x3c
 808549c:	fb95 f2f1 	sdiv	r2, r5, r1
 80854a0:	2a00      	cmp	r2, #0
 80854a2:	bfb8      	it	lt
 80854a4:	4252      	neglt	r2, r2
 80854a6:	fb92 f3f1 	sdiv	r3, r2, r1
 80854aa:	fb01 2213 	mls	r2, r1, r3, r2
 80854ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80854b2:	9200      	str	r2, [sp, #0]
 80854b4:	fb95 f3f3 	sdiv	r3, r5, r3
 80854b8:	4a1b      	ldr	r2, [pc, #108]	; (8085528 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80854ba:	210a      	movs	r1, #10
 80854bc:	a802      	add	r0, sp, #8
 80854be:	f7ff f9c7 	bl	8084850 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80854c2:	4625      	mov	r5, r4
 80854c4:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80854c6:	f108 3aff 	add.w	sl, r8, #4294967295
 80854ca:	45b2      	cmp	sl, r6
 80854cc:	d91b      	bls.n	8085506 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80854ce:	782b      	ldrb	r3, [r5, #0]
 80854d0:	2b25      	cmp	r3, #37	; 0x25
 80854d2:	d116      	bne.n	8085502 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80854d4:	786b      	ldrb	r3, [r5, #1]
 80854d6:	2b7a      	cmp	r3, #122	; 0x7a
 80854d8:	d113      	bne.n	8085502 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80854da:	a802      	add	r0, sp, #8
 80854dc:	f004 fd30 	bl	8089f40 <strlen>
 80854e0:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80854e2:	4430      	add	r0, r6
 80854e4:	ebc6 020a 	rsb	r2, r6, sl
 80854e8:	1ca9      	adds	r1, r5, #2
 80854ea:	4420      	add	r0, r4
 80854ec:	f003 ff90 	bl	8089410 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80854f0:	4642      	mov	r2, r8
 80854f2:	a902      	add	r1, sp, #8
 80854f4:	4628      	mov	r0, r5
 80854f6:	f003 ff8b 	bl	8089410 <memcpy>
            len = strlen(format_str);
 80854fa:	4620      	mov	r0, r4
 80854fc:	f004 fd20 	bl	8089f40 <strlen>
 8085500:	4680      	mov	r8, r0
 8085502:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8085504:	e7de      	b.n	80854c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8085506:	464b      	mov	r3, r9
 8085508:	4622      	mov	r2, r4
 808550a:	2132      	movs	r1, #50	; 0x32
 808550c:	a805      	add	r0, sp, #20
 808550e:	f004 f863 	bl	80895d8 <strftime>
    return String(buf);
 8085512:	a905      	add	r1, sp, #20
 8085514:	4638      	mov	r0, r7
 8085516:	f7ff fe0a 	bl	808512e <_ZN6StringC1EPK19__FlashStringHelper>
}
 808551a:	4638      	mov	r0, r7
 808551c:	b022      	add	sp, #136	; 0x88
 808551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085522:	bf00      	nop
 8085524:	0808c2b1 	.word	0x0808c2b1
 8085528:	0808bafb 	.word	0x0808bafb

0808552c <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 808552c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808552e:	4605      	mov	r5, r0
 8085530:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8085532:	461c      	mov	r4, r3
 8085534:	b913      	cbnz	r3, 808553c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8085536:	4b12      	ldr	r3, [pc, #72]	; (8085580 <_ZN9TimeClass6formatElPKc+0x54>)
 8085538:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808553a:	b12c      	cbz	r4, 8085548 <_ZN9TimeClass6formatElPKc+0x1c>
 808553c:	4b11      	ldr	r3, [pc, #68]	; (8085584 <_ZN9TimeClass6formatElPKc+0x58>)
 808553e:	4620      	mov	r0, r4
 8085540:	6819      	ldr	r1, [r3, #0]
 8085542:	f003 ffbb 	bl	80894bc <strcmp>
 8085546:	b920      	cbnz	r0, 8085552 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8085548:	9901      	ldr	r1, [sp, #4]
 808554a:	4628      	mov	r0, r5
 808554c:	f7ff ff6e 	bl	808542c <_ZN9TimeClass7timeStrEl>
 8085550:	e013      	b.n	808557a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8085552:	4f0d      	ldr	r7, [pc, #52]	; (8085588 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8085554:	9a01      	ldr	r2, [sp, #4]
 8085556:	683b      	ldr	r3, [r7, #0]
 8085558:	4e0c      	ldr	r6, [pc, #48]	; (808558c <_ZN9TimeClass6formatElPKc+0x60>)
 808555a:	441a      	add	r2, r3
 808555c:	6833      	ldr	r3, [r6, #0]
 808555e:	a802      	add	r0, sp, #8
 8085560:	4413      	add	r3, r2
 8085562:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 8085566:	f003 fe5b 	bl	8089220 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808556a:	683a      	ldr	r2, [r7, #0]
 808556c:	6833      	ldr	r3, [r6, #0]
 808556e:	4601      	mov	r1, r0
 8085570:	4413      	add	r3, r2
 8085572:	4628      	mov	r0, r5
 8085574:	4622      	mov	r2, r4
 8085576:	f7ff ff7b 	bl	8085470 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808557a:	4628      	mov	r0, r5
 808557c:	b003      	add	sp, #12
 808557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085580:	20000d54 	.word	0x20000d54
 8085584:	20000824 	.word	0x20000824
 8085588:	20000d60 	.word	0x20000d60
 808558c:	20000d58 	.word	0x20000d58

08085590 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8085590:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8085592:	2000      	movs	r0, #0
 8085594:	f7fe fe86 	bl	80842a4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8085598:	4604      	mov	r4, r0
 808559a:	b968      	cbnz	r0, 80855b8 <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808559c:	f7ff f85a 	bl	8084654 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80855a0:	2801      	cmp	r0, #1
 80855a2:	d10b      	bne.n	80855bc <_ZN9TimeClass7isValidEv+0x2c>
 80855a4:	4620      	mov	r0, r4
 80855a6:	f7ff f895 	bl	80846d4 <system_thread_get_state>
 80855aa:	b938      	cbnz	r0, 80855bc <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80855ac:	f7ff fed2 	bl	8085354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80855b0:	b930      	cbnz	r0, 80855c0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80855b2:	f7ff f8e5 	bl	8084780 <spark_process>
 80855b6:	e7f9      	b.n	80855ac <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80855b8:	2001      	movs	r0, #1
 80855ba:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80855bc:	2000      	movs	r0, #0
 80855be:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80855c0:	f7ff fec8 	bl	8085354 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80855c4:	2000      	movs	r0, #0
 80855c6:	f7fe fe6d 	bl	80842a4 <HAL_RTC_Time_Is_Valid>
 80855ca:	3000      	adds	r0, #0
 80855cc:	bf18      	it	ne
 80855ce:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80855d0:	bd10      	pop	{r4, pc}

080855d2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80855d2:	b508      	push	{r3, lr}
    (void)isValid();
 80855d4:	f7ff ffdc 	bl	8085590 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80855d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80855dc:	f7fe be5a 	b.w	8084294 <HAL_RTC_Get_UnixTime>

080855e0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80855e0:	b508      	push	{r3, lr}
	return hour(now());
 80855e2:	f7ff fff6 	bl	80855d2 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80855e6:	f7ff fe83 	bl	80852f0 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80855ea:	4b01      	ldr	r3, [pc, #4]	; (80855f0 <_ZN9TimeClass4hourEv+0x10>)
 80855ec:	6898      	ldr	r0, [r3, #8]
 80855ee:	bd08      	pop	{r3, pc}
 80855f0:	20000d2c 	.word	0x20000d2c

080855f4 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
 80855f4:	b508      	push	{r3, lr}
	return hourFormat12(now());
 80855f6:	f7ff ffec 	bl	80855d2 <_ZN9TimeClass3nowEv>
}
 80855fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
 80855fe:	f7ff beb7 	b.w	8085370 <_ZN9TimeClass12hourFormat12El>

08085602 <_ZN9TimeClass4isAMEv>:
		return calendar_time_cache.tm_hour ;
}

/* returns true if time now is AM */
uint8_t TimeClass::isAM()
{
 8085602:	b508      	push	{r3, lr}
	return !isPM(now());
 8085604:	f7ff ffe5 	bl	80855d2 <_ZN9TimeClass3nowEv>
 8085608:	f7ff fec0 	bl	808538c <_ZN9TimeClass4isPMEl>
}
 808560c:	fab0 f080 	clz	r0, r0
 8085610:	0940      	lsrs	r0, r0, #5
 8085612:	bd08      	pop	{r3, pc}

08085614 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8085614:	b508      	push	{r3, lr}
	return minute(now());
 8085616:	f7ff ffdc 	bl	80855d2 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808561a:	f7ff fe69 	bl	80852f0 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808561e:	4b01      	ldr	r3, [pc, #4]	; (8085624 <_ZN9TimeClass6minuteEv+0x10>)
 8085620:	6858      	ldr	r0, [r3, #4]
 8085622:	bd08      	pop	{r3, pc}
 8085624:	20000d2c 	.word	0x20000d2c

08085628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8085628:	4b02      	ldr	r3, [pc, #8]	; (8085634 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808562a:	681a      	ldr	r2, [r3, #0]
 808562c:	4b02      	ldr	r3, [pc, #8]	; (8085638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808562e:	601a      	str	r2, [r3, #0]
 8085630:	4770      	bx	lr
 8085632:	bf00      	nop
 8085634:	20000824 	.word	0x20000824
 8085638:	20000d54 	.word	0x20000d54

0808563c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808563c:	2100      	movs	r1, #0
 808563e:	f7ff b819 	b.w	8084674 <system_delay_ms>

08085642 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8085642:	b510      	push	{r4, lr}
 8085644:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085646:	f7fb f857 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 808564a:	4620      	mov	r0, r4
 808564c:	bd10      	pop	{r4, pc}

0808564e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808564e:	b513      	push	{r0, r1, r4, lr}
 8085650:	460b      	mov	r3, r1
 8085652:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085654:	c803      	ldmia	r0, {r0, r1}
 8085656:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808565a:	e893 0003 	ldmia.w	r3, {r0, r1}
 808565e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8085662:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8085666:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808566a:	b002      	add	sp, #8
 808566c:	bd10      	pop	{r4, pc}
	...

08085670 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085670:	4803      	ldr	r0, [pc, #12]	; (8085680 <_GLOBAL__sub_I_RGB+0x10>)
 8085672:	2300      	movs	r3, #0
 8085674:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8085676:	4a03      	ldr	r2, [pc, #12]	; (8085684 <_GLOBAL__sub_I_RGB+0x14>)
 8085678:	4903      	ldr	r1, [pc, #12]	; (8085688 <_GLOBAL__sub_I_RGB+0x18>)
 808567a:	f000 bf83 	b.w	8086584 <__aeabi_atexit>
 808567e:	bf00      	nop
 8085680:	20000d64 	.word	0x20000d64
 8085684:	200008e0 	.word	0x200008e0
 8085688:	08085643 	.word	0x08085643

0808568c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808568c:	6800      	ldr	r0, [r0, #0]
 808568e:	f000 be2a 	b.w	80862e6 <_ZN7TwoWire4lockEv>

08085692 <_ZN9FuelGaugeC1ER7TwoWireb>:
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8085692:	b510      	push	{r4, lr}
 8085694:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8085696:	6001      	str	r1, [r0, #0]
 8085698:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808569a:	b10a      	cbz	r2, 80856a0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808569c:	f7ff fff6 	bl	808568c <_ZN9FuelGauge4lockEv>
    }
}
 80856a0:	4620      	mov	r0, r4
 80856a2:	bd10      	pop	{r4, pc}

080856a4 <_ZN9FuelGaugeC1Eb>:

#include "spark_wiring_fuel.h"
#include <mutex>
#include "spark_wiring_power.h"

FuelGauge::FuelGauge(bool _lock) :
 80856a4:	b538      	push	{r3, r4, r5, lr}
 80856a6:	4604      	mov	r4, r0
 80856a8:	460d      	mov	r5, r1
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
    FuelGauge(Wire3, _lock)
 80856aa:	f000 ff4b 	bl	8086544 <_Z20__fetch_global_Wire3v>
 80856ae:	462a      	mov	r2, r5
 80856b0:	4601      	mov	r1, r0
 80856b2:	4620      	mov	r0, r4
 80856b4:	f7ff ffed 	bl	8085692 <_ZN9FuelGaugeC1ER7TwoWireb>
#else
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}
 80856b8:	4620      	mov	r0, r4
 80856ba:	bd38      	pop	{r3, r4, r5, pc}

080856bc <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80856bc:	6800      	ldr	r0, [r0, #0]
 80856be:	f000 be1b 	b.w	80862f8 <_ZN7TwoWire6unlockEv>

080856c2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80856c2:	b510      	push	{r4, lr}
{
    if (lock_) {
 80856c4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80856c6:	4604      	mov	r4, r0
{
    if (lock_) {
 80856c8:	b10b      	cbz	r3, 80856ce <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80856ca:	f7ff fff7 	bl	80856bc <_ZN9FuelGauge6unlockEv>
    }
}
 80856ce:	4620      	mov	r0, r4
 80856d0:	bd10      	pop	{r4, pc}

080856d2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80856d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80856d4:	4604      	mov	r4, r0
 80856d6:	460f      	mov	r7, r1
 80856d8:	4616      	mov	r6, r2
 80856da:	461d      	mov	r5, r3
 80856dc:	f7ff ffd6 	bl	808568c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80856e0:	6820      	ldr	r0, [r4, #0]
 80856e2:	2136      	movs	r1, #54	; 0x36
 80856e4:	f000 fdf1 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80856e8:	6820      	ldr	r0, [r4, #0]
 80856ea:	4639      	mov	r1, r7
 80856ec:	6803      	ldr	r3, [r0, #0]
 80856ee:	689b      	ldr	r3, [r3, #8]
 80856f0:	4798      	blx	r3
    i2c_.endTransmission(true);
 80856f2:	2101      	movs	r1, #1
 80856f4:	6820      	ldr	r0, [r4, #0]
 80856f6:	f000 fdeb 	bl	80862d0 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80856fa:	2202      	movs	r2, #2
 80856fc:	2136      	movs	r1, #54	; 0x36
 80856fe:	2301      	movs	r3, #1
 8085700:	6820      	ldr	r0, [r4, #0]
 8085702:	f000 fdd9 	bl	80862b8 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8085706:	6820      	ldr	r0, [r4, #0]
 8085708:	6803      	ldr	r3, [r0, #0]
 808570a:	695b      	ldr	r3, [r3, #20]
 808570c:	4798      	blx	r3
 808570e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8085710:	6820      	ldr	r0, [r4, #0]
 8085712:	6803      	ldr	r3, [r0, #0]
 8085714:	695b      	ldr	r3, [r3, #20]
 8085716:	4798      	blx	r3
 8085718:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808571a:	4620      	mov	r0, r4
}
 808571c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8085720:	f7ff bfcc 	b.w	80856bc <_ZN9FuelGauge6unlockEv>

08085724 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8085724:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8085726:	2200      	movs	r2, #0
	byte LSB = 0;
 8085728:	ab02      	add	r3, sp, #8
 808572a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808572e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8085732:	2104      	movs	r1, #4
 8085734:	f10d 0206 	add.w	r2, sp, #6
 8085738:	f7ff ffcb 	bl	80856d2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808573c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8085740:	f002 fe92 	bl	8088468 <__aeabi_i2d>
 8085744:	2200      	movs	r2, #0
 8085746:	4b08      	ldr	r3, [pc, #32]	; (8085768 <_ZN9FuelGauge6getSoCEv+0x44>)
 8085748:	f002 fef4 	bl	8088534 <__aeabi_dmul>
 808574c:	f003 f9ca 	bl	8088ae4 <__aeabi_d2f>
 8085750:	4604      	mov	r4, r0
 8085752:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8085756:	f003 facf 	bl	8088cf8 <__aeabi_i2f>
 808575a:	4601      	mov	r1, r0
 808575c:	4620      	mov	r0, r4
 808575e:	f003 fa17 	bl	8088b90 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8085762:	b002      	add	sp, #8
 8085764:	bd10      	pop	{r4, pc}
 8085766:	bf00      	nop
 8085768:	3f700000 	.word	0x3f700000

0808576c <_ZN9FuelGauge18readConfigRegisterERhS0_>:

}


void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
 808576c:	4613      	mov	r3, r2
 808576e:	460a      	mov	r2, r1
 8085770:	210c      	movs	r1, #12
 8085772:	f7ff bfae 	b.w	80856d2 <_ZN9FuelGauge12readRegisterEhRhS0_>

08085776 <_ZN9FuelGauge13writeRegisterEhhh>:
    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
    MSB = i2c_.read();
    LSB = i2c_.read();
}

void FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
 8085776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085778:	4604      	mov	r4, r0
 808577a:	460f      	mov	r7, r1
 808577c:	4616      	mov	r6, r2
 808577e:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8085780:	f7ff ff84 	bl	808568c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8085784:	6820      	ldr	r0, [r4, #0]
 8085786:	2136      	movs	r1, #54	; 0x36
 8085788:	f000 fd9f 	bl	80862ca <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(address);
 808578c:	6820      	ldr	r0, [r4, #0]
 808578e:	4639      	mov	r1, r7
 8085790:	6803      	ldr	r3, [r0, #0]
 8085792:	689b      	ldr	r3, [r3, #8]
 8085794:	4798      	blx	r3
    i2c_.write(MSB);
 8085796:	6820      	ldr	r0, [r4, #0]
 8085798:	4631      	mov	r1, r6
 808579a:	6803      	ldr	r3, [r0, #0]
 808579c:	689b      	ldr	r3, [r3, #8]
 808579e:	4798      	blx	r3
    i2c_.write(LSB);
 80857a0:	6820      	ldr	r0, [r4, #0]
 80857a2:	4629      	mov	r1, r5
 80857a4:	6803      	ldr	r3, [r0, #0]
 80857a6:	689a      	ldr	r2, [r3, #8]
 80857a8:	4790      	blx	r2
    i2c_.endTransmission(true);
 80857aa:	6820      	ldr	r0, [r4, #0]
 80857ac:	2101      	movs	r1, #1
 80857ae:	f000 fd8f 	bl	80862d0 <_ZN7TwoWire15endTransmissionEh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80857b2:	4620      	mov	r0, r4
}
 80857b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80857b8:	f7ff bf80 	b.w	80856bc <_ZN9FuelGauge6unlockEv>

080857bc <_ZN9FuelGauge10quickStartEv>:
	writeRegister(COMMAND_REGISTER, 0x00, 0x54);
}

void FuelGauge::quickStart() {

	writeRegister(MODE_REGISTER, 0x40, 0x00);
 80857bc:	2300      	movs	r3, #0
 80857be:	2240      	movs	r2, #64	; 0x40
 80857c0:	2106      	movs	r1, #6
 80857c2:	f7ff bfd8 	b.w	8085776 <_ZN9FuelGauge13writeRegisterEhhh>

080857c6 <_ZN9FuelGauge6wakeupEv>:

	writeRegister(CONFIG_REGISTER, MSB, (LSB | 0b10000000));

}

void FuelGauge::wakeup() {
 80857c6:	b513      	push	{r0, r1, r4, lr}
 80857c8:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 80857ca:	f7ff ff5f 	bl	808568c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
 80857ce:	2300      	movs	r3, #0
	byte LSB = 0;
 80857d0:	aa02      	add	r2, sp, #8
 80857d2:	f802 3d01 	strb.w	r3, [r2, #-1]!

	readConfigRegister(MSB, LSB);
 80857d6:	f10d 0106 	add.w	r1, sp, #6
 80857da:	4620      	mov	r0, r4

}

void FuelGauge::wakeup() {
    std::lock_guard<FuelGauge> l(*this);
	byte MSB = 0;
 80857dc:	f88d 3006 	strb.w	r3, [sp, #6]
	byte LSB = 0;

	readConfigRegister(MSB, LSB);
 80857e0:	f7ff ffc4 	bl	808576c <_ZN9FuelGauge18readConfigRegisterERhS0_>

	writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111));
 80857e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80857e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80857ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80857f0:	210c      	movs	r1, #12
 80857f2:	4620      	mov	r0, r4
 80857f4:	f7ff ffbf 	bl	8085776 <_ZN9FuelGauge13writeRegisterEhhh>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80857f8:	4620      	mov	r0, r4
 80857fa:	f7ff ff5f 	bl	80856bc <_ZN9FuelGauge6unlockEv>

}
 80857fe:	b002      	add	sp, #8
 8085800:	bd10      	pop	{r4, pc}
	...

08085804 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8085804:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8085806:	4b18      	ldr	r3, [pc, #96]	; (8085868 <serialEventRun+0x64>)
 8085808:	b133      	cbz	r3, 8085818 <serialEventRun+0x14>
 808580a:	f000 fbf9 	bl	8086000 <_Z16_fetch_usbserialv>
 808580e:	6803      	ldr	r3, [r0, #0]
 8085810:	691b      	ldr	r3, [r3, #16]
 8085812:	4798      	blx	r3
 8085814:	2800      	cmp	r0, #0
 8085816:	dc1e      	bgt.n	8085856 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8085818:	4b14      	ldr	r3, [pc, #80]	; (808586c <serialEventRun+0x68>)
 808581a:	b133      	cbz	r3, 808582a <serialEventRun+0x26>
 808581c:	f000 fcc4 	bl	80861a8 <_Z22__fetch_global_Serial1v>
 8085820:	6803      	ldr	r3, [r0, #0]
 8085822:	691b      	ldr	r3, [r3, #16]
 8085824:	4798      	blx	r3
 8085826:	2800      	cmp	r0, #0
 8085828:	dc18      	bgt.n	808585c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808582a:	4b11      	ldr	r3, [pc, #68]	; (8085870 <serialEventRun+0x6c>)
 808582c:	b10b      	cbz	r3, 8085832 <serialEventRun+0x2e>
 808582e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8085832:	4b10      	ldr	r3, [pc, #64]	; (8085874 <serialEventRun+0x70>)
 8085834:	b10b      	cbz	r3, 808583a <serialEventRun+0x36>
 8085836:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808583a:	4b0f      	ldr	r3, [pc, #60]	; (8085878 <serialEventRun+0x74>)
 808583c:	b10b      	cbz	r3, 8085842 <serialEventRun+0x3e>
 808583e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8085842:	4b0e      	ldr	r3, [pc, #56]	; (808587c <serialEventRun+0x78>)
 8085844:	b17b      	cbz	r3, 8085866 <serialEventRun+0x62>
 8085846:	f000 fc17 	bl	8086078 <_Z17_fetch_usbserial1v>
 808584a:	6803      	ldr	r3, [r0, #0]
 808584c:	691b      	ldr	r3, [r3, #16]
 808584e:	4798      	blx	r3
 8085850:	2800      	cmp	r0, #0
 8085852:	dc06      	bgt.n	8085862 <serialEventRun+0x5e>
 8085854:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8085856:	f3af 8000 	nop.w
 808585a:	e7dd      	b.n	8085818 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808585c:	f7fa fff6 	bl	808084c <_Z12serialEvent1v>
 8085860:	e7e3      	b.n	808582a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8085862:	f3af 8000 	nop.w
 8085866:	bd08      	pop	{r3, pc}
 8085868:	00000000 	.word	0x00000000
 808586c:	0808084d 	.word	0x0808084d
	...

08085880 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8085880:	b508      	push	{r3, lr}
	serialEventRun();
 8085882:	f7ff ffbf 	bl	8085804 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8085886:	f7fe fcfd 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808588a:	4b01      	ldr	r3, [pc, #4]	; (8085890 <_post_loop+0x10>)
 808588c:	6018      	str	r0, [r3, #0]
 808588e:	bd08      	pop	{r3, pc}
 8085890:	20001260 	.word	0x20001260

08085894 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8085894:	4802      	ldr	r0, [pc, #8]	; (80858a0 <_Z33system_initialize_user_backup_ramv+0xc>)
 8085896:	4a03      	ldr	r2, [pc, #12]	; (80858a4 <_Z33system_initialize_user_backup_ramv+0x10>)
 8085898:	4903      	ldr	r1, [pc, #12]	; (80858a8 <_Z33system_initialize_user_backup_ramv+0x14>)
 808589a:	1a12      	subs	r2, r2, r0
 808589c:	f003 bdb8 	b.w	8089410 <memcpy>
 80858a0:	40024000 	.word	0x40024000
 80858a4:	40024a04 	.word	0x40024a04
 80858a8:	0808c330 	.word	0x0808c330

080858ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80858ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80858ae:	2300      	movs	r3, #0
 80858b0:	9300      	str	r3, [sp, #0]
 80858b2:	461a      	mov	r2, r3
 80858b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80858b8:	f7fe ff1e 	bl	80846f8 <system_ctrl_set_result>
}
 80858bc:	b003      	add	sp, #12
 80858be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080858c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80858c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80858c6:	8843      	ldrh	r3, [r0, #2]
 80858c8:	2b0a      	cmp	r3, #10
 80858ca:	d008      	beq.n	80858de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80858cc:	2b50      	cmp	r3, #80	; 0x50
 80858ce:	d109      	bne.n	80858e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80858d0:	4b09      	ldr	r3, [pc, #36]	; (80858f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80858d2:	681b      	ldr	r3, [r3, #0]
 80858d4:	b13b      	cbz	r3, 80858e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80858d6:	b003      	add	sp, #12
 80858d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80858dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80858de:	f7ff ffe5 	bl	80858ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80858e2:	e006      	b.n	80858f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80858e4:	2300      	movs	r3, #0
 80858e6:	9300      	str	r3, [sp, #0]
 80858e8:	461a      	mov	r2, r3
 80858ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80858ee:	f7fe ff03 	bl	80846f8 <system_ctrl_set_result>
        break;
    }
}
 80858f2:	b003      	add	sp, #12
 80858f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80858f8:	20000d74 	.word	0x20000d74

080858fc <module_user_init_hook>:

void module_user_init_hook()
{
 80858fc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80858fe:	4c10      	ldr	r4, [pc, #64]	; (8085940 <module_user_init_hook+0x44>)
 8085900:	4d10      	ldr	r5, [pc, #64]	; (8085944 <module_user_init_hook+0x48>)
 8085902:	6823      	ldr	r3, [r4, #0]
 8085904:	42ab      	cmp	r3, r5
 8085906:	4b10      	ldr	r3, [pc, #64]	; (8085948 <module_user_init_hook+0x4c>)
 8085908:	bf0c      	ite	eq
 808590a:	2201      	moveq	r2, #1
 808590c:	2200      	movne	r2, #0
 808590e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8085910:	d002      	beq.n	8085918 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8085912:	f7ff ffbf 	bl	8085894 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8085916:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 8085918:	f7fe fc9c 	bl	8084254 <HAL_RNG_GetRandomNumber>
 808591c:	f003 fda6 	bl	808946c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8085920:	4b0a      	ldr	r3, [pc, #40]	; (808594c <module_user_init_hook+0x50>)
 8085922:	b11b      	cbz	r3, 808592c <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8085924:	f7fe fc96 	bl	8084254 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 8085928:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808592c:	2100      	movs	r1, #0
 808592e:	4807      	ldr	r0, [pc, #28]	; (808594c <module_user_init_hook+0x50>)
 8085930:	f7fe ff56 	bl	80847e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8085934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8085938:	2100      	movs	r1, #0
 808593a:	4805      	ldr	r0, [pc, #20]	; (8085950 <module_user_init_hook+0x54>)
 808593c:	f7fe bed2 	b.w	80846e4 <system_ctrl_set_app_request_handler>
 8085940:	40024a00 	.word	0x40024a00
 8085944:	9a271c1e 	.word	0x9a271c1e
 8085948:	20000d78 	.word	0x20000d78
 808594c:	00000000 	.word	0x00000000
 8085950:	080858c5 	.word	0x080858c5

08085954 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8085954:	4770      	bx	lr

08085956 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8085956:	2000      	movs	r0, #0
 8085958:	4770      	bx	lr

0808595a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808595a:	b510      	push	{r4, lr}
 808595c:	4604      	mov	r4, r0
 808595e:	f7fa fb9e 	bl	808009e <_ZdlPv>
 8085962:	4620      	mov	r0, r4
 8085964:	bd10      	pop	{r4, pc}

08085966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8085966:	b508      	push	{r3, lr}
      { delete this; }
 8085968:	b108      	cbz	r0, 808596e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808596a:	f7ff fff6 	bl	808595a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808596e:	bd08      	pop	{r3, pc}

08085970 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8085970:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8085972:	68c4      	ldr	r4, [r0, #12]
 8085974:	b1d4      	cbz	r4, 80859ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>
 8085976:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8085978:	2b02      	cmp	r3, #2
 808597a:	d102      	bne.n	8085982 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808597c:	68e0      	ldr	r0, [r4, #12]
 808597e:	f7fe ff3f 	bl	8084800 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8085982:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8085984:	b12d      	cbz	r5, 8085992 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085986:	4628      	mov	r0, r5
 8085988:	f7fa feb6 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 808598c:	4628      	mov	r0, r5
 808598e:	f7fa fb86 	bl	808009e <_ZdlPv>
 8085992:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8085994:	b12d      	cbz	r5, 80859a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8085996:	4628      	mov	r0, r5
 8085998:	f7fa feae 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 808599c:	4628      	mov	r0, r5
 808599e:	f7fa fb7e 	bl	808009e <_ZdlPv>
 80859a2:	4620      	mov	r0, r4
 80859a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80859a8:	f7fa bb79 	b.w	808009e <_ZdlPv>
 80859ac:	bd38      	pop	{r3, r4, r5, pc}

080859ae <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80859ae:	b510      	push	{r4, lr}
 80859b0:	b088      	sub	sp, #32
 80859b2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80859b4:	4668      	mov	r0, sp
 80859b6:	f7ff fbba 	bl	808512e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80859ba:	4669      	mov	r1, sp
 80859bc:	a804      	add	r0, sp, #16
 80859be:	f7ff fbd8 	bl	8085172 <_ZN6StringC1ERKS_>
 80859c2:	a804      	add	r0, sp, #16
 80859c4:	47a0      	blx	r4
 80859c6:	4604      	mov	r4, r0
 80859c8:	a804      	add	r0, sp, #16
 80859ca:	f7ff fb69 	bl	80850a0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80859ce:	4668      	mov	r0, sp
 80859d0:	f7ff fb66 	bl	80850a0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80859d4:	4620      	mov	r0, r4
 80859d6:	b008      	add	sp, #32
 80859d8:	bd10      	pop	{r4, pc}

080859da <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80859da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80859dc:	4607      	mov	r7, r0
 80859de:	460e      	mov	r6, r1
 80859e0:	4615      	mov	r5, r2
 80859e2:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80859e4:	2410      	movs	r4, #16
 80859e6:	4622      	mov	r2, r4
 80859e8:	2100      	movs	r1, #0
 80859ea:	4668      	mov	r0, sp
 80859ec:	f003 fd36 	bl	808945c <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80859f0:	2200      	movs	r2, #0
 80859f2:	4669      	mov	r1, sp
 80859f4:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80859f6:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80859fa:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80859fc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80859fe:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8085a00:	f7fe feb6 	bl	8084770 <spark_function>
}
 8085a04:	b005      	add	sp, #20
 8085a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085a08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8085a08:	b513      	push	{r0, r1, r4, lr}
 8085a0a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8085a0c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8085a10:	2300      	movs	r3, #0
 8085a12:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8085a14:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8085a16:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8085a18:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085a1a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8085a1c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8085a1e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085a20:	f7fb fa6d 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085a24:	4620      	mov	r0, r4
 8085a26:	b002      	add	sp, #8
 8085a28:	bd10      	pop	{r4, pc}

08085a2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8085a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085a2c:	460c      	mov	r4, r1
 8085a2e:	4606      	mov	r6, r0
 8085a30:	460f      	mov	r7, r1
 8085a32:	f854 3b04 	ldr.w	r3, [r4], #4
 8085a36:	ad02      	add	r5, sp, #8
 8085a38:	f845 3d08 	str.w	r3, [r5, #-8]!
 8085a3c:	4621      	mov	r1, r4
 8085a3e:	a801      	add	r0, sp, #4
 8085a40:	f7ff fc46 	bl	80852d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8085a44:	4629      	mov	r1, r5
 8085a46:	4630      	mov	r0, r6
 8085a48:	f7ff ffde 	bl	8085a08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085a4c:	a801      	add	r0, sp, #4
 8085a4e:	f7fb fa56 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085a52:	4620      	mov	r0, r4
 8085a54:	f7fb fa53 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8085a58:	4638      	mov	r0, r7
 8085a5a:	f7fa fb20 	bl	808009e <_ZdlPv>
        return p;
    }
 8085a5e:	4630      	mov	r0, r6
 8085a60:	b003      	add	sp, #12
 8085a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085a64 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8085a64:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8085a66:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8085a68:	b90a      	cbnz	r2, 8085a6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8085a6a:	f000 fd90 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8085a6e:	68c3      	ldr	r3, [r0, #12]
    }
 8085a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8085a74:	4718      	bx	r3

08085a76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8085a76:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8085a78:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8085a7a:	f100 0110 	add.w	r1, r0, #16
 8085a7e:	f7ff fff1 	bl	8085a64 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8085a82:	bd08      	pop	{r3, pc}

08085a84 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8085a84:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8085a86:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8085a88:	b90a      	cbnz	r2, 8085a8e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8085a8a:	f000 fd80 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8085a8e:	68c3      	ldr	r3, [r0, #12]
    }
 8085a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8085a94:	4718      	bx	r3

08085a96 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8085a96:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8085a98:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8085a9a:	f100 0110 	add.w	r1, r0, #16
 8085a9e:	f7ff fff1 	bl	8085a84 <_ZNKSt8functionIFvRKbEEclES1_>
 8085aa2:	bd08      	pop	{r3, pc}

08085aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085aa4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085aa6:	2300      	movs	r3, #0
 8085aa8:	6083      	str	r3, [r0, #8]
 8085aaa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085aac:	4604      	mov	r4, r0
 8085aae:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8085ab0:	b12b      	cbz	r3, 8085abe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8085ab2:	2202      	movs	r2, #2
 8085ab4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8085ab6:	68eb      	ldr	r3, [r5, #12]
 8085ab8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8085aba:	68ab      	ldr	r3, [r5, #8]
 8085abc:	60a3      	str	r3, [r4, #8]
	}
    }
 8085abe:	4620      	mov	r0, r4
 8085ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

08085ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8085ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8085ac8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8085acc:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8085ace:	f04f 0002 	mov.w	r0, #2
 8085ad2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085ad4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ad8:	808b      	strh	r3, [r1, #4]
 8085ada:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085adc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8085ade:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ae2:	600b      	str	r3, [r1, #0]
 8085ae4:	e8d4 1f4f 	ldrexb	r1, [r4]
 8085ae8:	4299      	cmp	r1, r3
 8085aea:	d103      	bne.n	8085af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8085aec:	e8c4 0f45 	strexb	r5, r0, [r4]
 8085af0:	2d00      	cmp	r5, #0
 8085af2:	d1f7      	bne.n	8085ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8085af4:	d002      	beq.n	8085afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8085af6:	f88d 1000 	strb.w	r1, [sp]
 8085afa:	e06b      	b.n	8085bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8085afc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085b00:	bf1c      	itt	ne
 8085b02:	60e7      	strne	r7, [r4, #12]
 8085b04:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8085b06:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8085b0a:	bf18      	it	ne
 8085b0c:	461f      	movne	r7, r3
 8085b0e:	2301      	movs	r3, #1
 8085b10:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8085b12:	f3bf 8f5f 	dmb	sy
 8085b16:	f104 0308 	add.w	r3, r4, #8
 8085b1a:	2000      	movs	r0, #0
 8085b1c:	e853 6f00 	ldrex	r6, [r3]
 8085b20:	e843 0200 	strex	r2, r0, [r3]
 8085b24:	2a00      	cmp	r2, #0
 8085b26:	d1f9      	bne.n	8085b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8085b28:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8085b2c:	2e00      	cmp	r6, #0
 8085b2e:	d051      	beq.n	8085bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085b30:	f7fe fdc0 	bl	80846b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8085b34:	b120      	cbz	r0, 8085b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8085b36:	4629      	mov	r1, r5
 8085b38:	4630      	mov	r0, r6
 8085b3a:	f7ff ff93 	bl	8085a64 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8085b3e:	e043      	b.n	8085bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8085b40:	4631      	mov	r1, r6
 8085b42:	4668      	mov	r0, sp
 8085b44:	f7ff ffae 	bl	8085aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8085b48:	68e0      	ldr	r0, [r4, #12]
 8085b4a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8085b4e:	b108      	cbz	r0, 8085b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8085b50:	f003 fcc6 	bl	80894e0 <strdup>
 8085b54:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8085b56:	2010      	movs	r0, #16
 8085b58:	f8ad 5014 	strh.w	r5, [sp, #20]
 8085b5c:	f7fa fa9d 	bl	808009a <_Znwj>
 8085b60:	4605      	mov	r5, r0
 8085b62:	b330      	cbz	r0, 8085bb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085b64:	f04f 0800 	mov.w	r8, #0
 8085b68:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085b6c:	2018      	movs	r0, #24
 8085b6e:	f7fa fa94 	bl	808009a <_Znwj>
 8085b72:	4604      	mov	r4, r0
 8085b74:	b1c0      	cbz	r0, 8085ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085b76:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8085b7a:	4601      	mov	r1, r0
 8085b7c:	4668      	mov	r0, sp
 8085b7e:	f7ff fd66 	bl	808564e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b82:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8085b84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085b88:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085b8a:	9202      	str	r2, [sp, #8]
 8085b8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b8e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085b90:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8085b94:	9203      	str	r2, [sp, #12]
 8085b96:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8085b98:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8085b9c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085ba0:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8085ba2:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085ba6:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085ba8:	4b0d      	ldr	r3, [pc, #52]	; (8085be0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085baa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085bac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8085bae:	4b0d      	ldr	r3, [pc, #52]	; (8085be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8085bb0:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8085bb2:	9804      	ldr	r0, [sp, #16]
 8085bb4:	f7fe fe24 	bl	8084800 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085bb8:	4668      	mov	r0, sp
 8085bba:	f7fa fd9d 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8085bbe:	2200      	movs	r2, #0
 8085bc0:	4629      	mov	r1, r5
 8085bc2:	4809      	ldr	r0, [pc, #36]	; (8085be8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8085bc4:	f7fe fd7e 	bl	80846c4 <application_thread_invoke>
 8085bc8:	4630      	mov	r0, r6
 8085bca:	f7fa fd95 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8085bce:	4630      	mov	r0, r6
 8085bd0:	f7fa fa65 	bl	808009e <_ZdlPv>
 8085bd4:	4638      	mov	r0, r7
 8085bd6:	f7fe fe13 	bl	8084800 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8085bda:	b006      	add	sp, #24
 8085bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085be0:	08085a77 	.word	0x08085a77
 8085be4:	08085cd5 	.word	0x08085cd5
 8085be8:	080861f5 	.word	0x080861f5

08085bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8085bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085bf0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8085bf2:	ad07      	add	r5, sp, #28
 8085bf4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8085bf8:	4606      	mov	r6, r0
 8085bfa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8085bfc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8085bfe:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8085c00:	460f      	mov	r7, r1
 8085c02:	4690      	mov	r8, r2
 8085c04:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8085c08:	f8c5 b004 	str.w	fp, [r5, #4]
 8085c0c:	f8c5 b008 	str.w	fp, [r5, #8]
 8085c10:	9307      	str	r3, [sp, #28]
 8085c12:	f7fa fa42 	bl	808009a <_Znwj>
 8085c16:	4604      	mov	r4, r0
 8085c18:	b138      	cbz	r0, 8085c2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8085c1a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8085c1e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8085c22:	f8c0 b004 	str.w	fp, [r0, #4]
 8085c26:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8085c2a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085c2c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8085c2e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8085c30:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085c32:	f7fa fa32 	bl	808009a <_Znwj>
 8085c36:	b128      	cbz	r0, 8085c44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8085c38:	2301      	movs	r3, #1
 8085c3a:	6043      	str	r3, [r0, #4]
 8085c3c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8085c3e:	4b23      	ldr	r3, [pc, #140]	; (8085ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8085c40:	60c4      	str	r4, [r0, #12]
 8085c42:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8085c44:	4b22      	ldr	r3, [pc, #136]	; (8085cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085c46:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8085c48:	2008      	movs	r0, #8
 8085c4a:	9308      	str	r3, [sp, #32]
 8085c4c:	f7fa fa25 	bl	808009a <_Znwj>
 8085c50:	4604      	mov	r4, r0
 8085c52:	b128      	cbz	r0, 8085c60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085c54:	9b03      	ldr	r3, [sp, #12]
 8085c56:	a904      	add	r1, sp, #16
 8085c58:	f840 3b04 	str.w	r3, [r0], #4
 8085c5c:	f7ff fb38 	bl	80852d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8085c60:	9500      	str	r5, [sp, #0]
 8085c62:	fa5f f38a 	uxtb.w	r3, sl
 8085c66:	464a      	mov	r2, r9
 8085c68:	4641      	mov	r1, r8
 8085c6a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8085c6c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8085c6e:	f7fe fd9f 	bl	80847b0 <spark_send_event>
 8085c72:	b9b8      	cbnz	r0, 8085ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8085c74:	9b03      	ldr	r3, [sp, #12]
 8085c76:	785b      	ldrb	r3, [r3, #1]
 8085c78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085c7c:	b993      	cbnz	r3, 8085ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8085c7e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8085c82:	a905      	add	r1, sp, #20
 8085c84:	a803      	add	r0, sp, #12
 8085c86:	9205      	str	r2, [sp, #20]
 8085c88:	f8ad 3018 	strh.w	r3, [sp, #24]
 8085c8c:	f7ff ff1a 	bl	8085ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8085c90:	9805      	ldr	r0, [sp, #20]
 8085c92:	f7fe fdb5 	bl	8084800 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8085c96:	a805      	add	r0, sp, #20
 8085c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085c9a:	f7ff fec6 	bl	8085a2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085c9e:	a806      	add	r0, sp, #24
 8085ca0:	f7fb f92d 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8085ca4:	9b03      	ldr	r3, [sp, #12]
 8085ca6:	a904      	add	r1, sp, #16
 8085ca8:	a806      	add	r0, sp, #24
 8085caa:	9305      	str	r3, [sp, #20]
 8085cac:	f7ff fb10 	bl	80852d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8085cb0:	a905      	add	r1, sp, #20
 8085cb2:	4630      	mov	r0, r6
 8085cb4:	f7ff fea8 	bl	8085a08 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085cb8:	a806      	add	r0, sp, #24
 8085cba:	f7fb f920 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085cbe:	a804      	add	r0, sp, #16
 8085cc0:	f7fb f91d 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8085cc4:	4630      	mov	r0, r6
 8085cc6:	b00b      	add	sp, #44	; 0x2c
 8085cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ccc:	0808bb2c 	.word	0x0808bb2c
 8085cd0:	08085e3d 	.word	0x08085e3d

08085cd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8085cd4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8085cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085cd8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8085cda:	d006      	beq.n	8085cea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8085cdc:	2a03      	cmp	r2, #3
 8085cde:	d017      	beq.n	8085d10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8085ce0:	2a01      	cmp	r2, #1
 8085ce2:	d120      	bne.n	8085d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8085ce4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8085ce6:	6003      	str	r3, [r0, #0]
	      break;
 8085ce8:	e01d      	b.n	8085d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8085cea:	2018      	movs	r0, #24
 8085cec:	680e      	ldr	r6, [r1, #0]
 8085cee:	f7fa f9d4 	bl	808009a <_Znwj>
 8085cf2:	4605      	mov	r5, r0
 8085cf4:	b150      	cbz	r0, 8085d0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8085cf6:	4631      	mov	r1, r6
 8085cf8:	f7ff fed4 	bl	8085aa4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8085cfc:	6930      	ldr	r0, [r6, #16]
 8085cfe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8085d02:	b108      	cbz	r0, 8085d08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8085d04:	f003 fbec 	bl	80894e0 <strdup>
 8085d08:	6128      	str	r0, [r5, #16]
 8085d0a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8085d0c:	6025      	str	r5, [r4, #0]
 8085d0e:	e00a      	b.n	8085d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085d10:	6804      	ldr	r4, [r0, #0]
 8085d12:	b144      	cbz	r4, 8085d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8085d14:	6920      	ldr	r0, [r4, #16]
 8085d16:	f7fe fd73 	bl	8084800 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085d1a:	4620      	mov	r0, r4
 8085d1c:	f7fa fcec 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085d20:	4620      	mov	r0, r4
 8085d22:	f7fa f9bc 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8085d26:	2000      	movs	r0, #0
 8085d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085d2a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085d2c:	2300      	movs	r3, #0
 8085d2e:	6083      	str	r3, [r0, #8]
 8085d30:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085d32:	4604      	mov	r4, r0
 8085d34:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8085d36:	b12b      	cbz	r3, 8085d44 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8085d38:	2202      	movs	r2, #2
 8085d3a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8085d3c:	68eb      	ldr	r3, [r5, #12]
 8085d3e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8085d40:	68ab      	ldr	r3, [r5, #8]
 8085d42:	60a3      	str	r3, [r4, #8]
	}
    }
 8085d44:	4620      	mov	r0, r4
 8085d46:	bd38      	pop	{r3, r4, r5, pc}

08085d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8085d48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8085d4a:	b570      	push	{r4, r5, r6, lr}
 8085d4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8085d4e:	d006      	beq.n	8085d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8085d50:	2a03      	cmp	r2, #3
 8085d52:	d011      	beq.n	8085d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8085d54:	2a01      	cmp	r2, #1
 8085d56:	d117      	bne.n	8085d88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8085d58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8085d5a:	6003      	str	r3, [r0, #0]
	      break;
 8085d5c:	e014      	b.n	8085d88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8085d5e:	2014      	movs	r0, #20
 8085d60:	680e      	ldr	r6, [r1, #0]
 8085d62:	f7fa f99a 	bl	808009a <_Znwj>
 8085d66:	4605      	mov	r5, r0
 8085d68:	b120      	cbz	r0, 8085d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8085d6a:	4631      	mov	r1, r6
 8085d6c:	f7ff ffdd 	bl	8085d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8085d70:	7c33      	ldrb	r3, [r6, #16]
 8085d72:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8085d74:	6025      	str	r5, [r4, #0]
 8085d76:	e007      	b.n	8085d88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085d78:	6804      	ldr	r4, [r0, #0]
 8085d7a:	b12c      	cbz	r4, 8085d88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085d7c:	4620      	mov	r0, r4
 8085d7e:	f7fa fcbb 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085d82:	4620      	mov	r0, r4
 8085d84:	f7fa f98b 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8085d88:	2000      	movs	r0, #0
 8085d8a:	bd70      	pop	{r4, r5, r6, pc}

08085d8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8085d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085d8e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8085d90:	f3bf 8f5f 	dmb	sy
 8085d94:	b087      	sub	sp, #28
 8085d96:	2300      	movs	r3, #0
 8085d98:	e850 6f00 	ldrex	r6, [r0]
 8085d9c:	e840 3200 	strex	r2, r3, [r0]
 8085da0:	2a00      	cmp	r2, #0
 8085da2:	d1f9      	bne.n	8085d98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8085da4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8085da8:	2e00      	cmp	r6, #0
 8085daa:	d03e      	beq.n	8085e2a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085dac:	4618      	mov	r0, r3
 8085dae:	f7fe fc81 	bl	80846b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8085db2:	4607      	mov	r7, r0
 8085db4:	b120      	cbz	r0, 8085dc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8085db6:	4621      	mov	r1, r4
 8085db8:	4630      	mov	r0, r6
 8085dba:	f7ff fe63 	bl	8085a84 <_ZNKSt8functionIFvRKbEEclES1_>
 8085dbe:	e02e      	b.n	8085e1e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8085dc0:	4631      	mov	r1, r6
 8085dc2:	a801      	add	r0, sp, #4
 8085dc4:	f7ff ffb1 	bl	8085d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8085dc8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8085dca:	2010      	movs	r0, #16
 8085dcc:	f88d 3014 	strb.w	r3, [sp, #20]
 8085dd0:	f7fa f963 	bl	808009a <_Znwj>
 8085dd4:	4605      	mov	r5, r0
 8085dd6:	b1d0      	cbz	r0, 8085e0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085dd8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085dda:	2014      	movs	r0, #20
 8085ddc:	f7fa f95d 	bl	808009a <_Znwj>
 8085de0:	4604      	mov	r4, r0
 8085de2:	b178      	cbz	r0, 8085e04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085de4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8085de6:	4601      	mov	r1, r0
 8085de8:	a801      	add	r0, sp, #4
 8085dea:	f7ff fc30 	bl	808564e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085dee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8085df0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8085df2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085df4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085df6:	9203      	str	r2, [sp, #12]
 8085df8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085dfa:	60e3      	str	r3, [r4, #12]
 8085dfc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8085e00:	9204      	str	r2, [sp, #16]
 8085e02:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085e04:	4b0a      	ldr	r3, [pc, #40]	; (8085e30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085e06:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085e08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8085e0a:	4b0a      	ldr	r3, [pc, #40]	; (8085e34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8085e0c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085e0e:	a801      	add	r0, sp, #4
 8085e10:	f7fa fc72 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8085e14:	2200      	movs	r2, #0
 8085e16:	4629      	mov	r1, r5
 8085e18:	4807      	ldr	r0, [pc, #28]	; (8085e38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8085e1a:	f7fe fc53 	bl	80846c4 <application_thread_invoke>
 8085e1e:	4630      	mov	r0, r6
 8085e20:	f7fa fc6a 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8085e24:	4630      	mov	r0, r6
 8085e26:	f7fa f93a 	bl	808009e <_ZdlPv>
        }
    }
 8085e2a:	b007      	add	sp, #28
 8085e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085e2e:	bf00      	nop
 8085e30:	08085a97 	.word	0x08085a97
 8085e34:	08085d49 	.word	0x08085d49
 8085e38:	080861f5 	.word	0x080861f5

08085e3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8085e3c:	b530      	push	{r4, r5, lr}
 8085e3e:	4604      	mov	r4, r0
 8085e40:	b085      	sub	sp, #20
 8085e42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8085e44:	4668      	mov	r0, sp
 8085e46:	4611      	mov	r1, r2
 8085e48:	f7ff fdef 	bl	8085a2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8085e4c:	b17c      	cbz	r4, 8085e6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8085e4e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8085e50:	4628      	mov	r0, r5
 8085e52:	b10d      	cbz	r5, 8085e58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8085e54:	f003 fb44 	bl	80894e0 <strdup>
 8085e58:	9002      	str	r0, [sp, #8]
 8085e5a:	a902      	add	r1, sp, #8
 8085e5c:	4668      	mov	r0, sp
 8085e5e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8085e62:	f7ff fe2f 	bl	8085ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8085e66:	9802      	ldr	r0, [sp, #8]
 8085e68:	f7fe fcca 	bl	8084800 <free>
 8085e6c:	e01d      	b.n	8085eaa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8085e6e:	f04f 0201 	mov.w	r2, #1
 8085e72:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8085e74:	f88d 4008 	strb.w	r4, [sp, #8]
 8085e78:	e8d0 3f4f 	ldrexb	r3, [r0]
 8085e7c:	42a3      	cmp	r3, r4
 8085e7e:	d103      	bne.n	8085e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8085e80:	e8c0 2f41 	strexb	r1, r2, [r0]
 8085e84:	2900      	cmp	r1, #0
 8085e86:	d1f7      	bne.n	8085e78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8085e88:	d002      	beq.n	8085e90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8085e8a:	f88d 3008 	strb.w	r3, [sp, #8]
 8085e8e:	e00c      	b.n	8085eaa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8085e90:	f110 010c 	adds.w	r1, r0, #12
 8085e94:	f04f 0301 	mov.w	r3, #1
 8085e98:	bf18      	it	ne
 8085e9a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8085e9c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8085ea0:	3004      	adds	r0, #4
 8085ea2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8085ea6:	f7ff ff71 	bl	8085d8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8085eaa:	a801      	add	r0, sp, #4
 8085eac:	f7fb f827 	bl	8080efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8085eb0:	b005      	add	sp, #20
 8085eb2:	bd30      	pop	{r4, r5, pc}

08085eb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8085eb4:	4770      	bx	lr

08085eb6 <_ZN9IPAddressD0Ev>:
 8085eb6:	b510      	push	{r4, lr}
 8085eb8:	4604      	mov	r4, r0
 8085eba:	f7fa f8f0 	bl	808009e <_ZdlPv>
 8085ebe:	4620      	mov	r0, r4
 8085ec0:	bd10      	pop	{r4, pc}

08085ec2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8085ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085ec4:	460f      	mov	r7, r1
 8085ec6:	f100 0608 	add.w	r6, r0, #8
 8085eca:	1d05      	adds	r5, r0, #4
 8085ecc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8085ece:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8085ed2:	220a      	movs	r2, #10
 8085ed4:	4638      	mov	r0, r7
 8085ed6:	f7ff f9bf 	bl	8085258 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8085eda:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8085edc:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8085ede:	d007      	beq.n	8085ef0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8085ee0:	2c00      	cmp	r4, #0
 8085ee2:	d0f4      	beq.n	8085ece <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8085ee4:	212e      	movs	r1, #46	; 0x2e
 8085ee6:	4638      	mov	r0, r7
 8085ee8:	f7ff f97d 	bl	80851e6 <_ZN5Print5printEc>
 8085eec:	4404      	add	r4, r0
 8085eee:	e7ee      	b.n	8085ece <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8085ef0:	4620      	mov	r0, r4
 8085ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085ef4 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 8085ef4:	4a02      	ldr	r2, [pc, #8]	; (8085f00 <_ZN9IPAddressC1Ev+0xc>)
 8085ef6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8085ef8:	2200      	movs	r2, #0
 8085efa:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8085efc:	4770      	bx	lr
 8085efe:	bf00      	nop
 8085f00:	0808bb48 	.word	0x0808bb48

08085f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8085f04:	4a02      	ldr	r2, [pc, #8]	; (8085f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8085f06:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8085f08:	680a      	ldr	r2, [r1, #0]
 8085f0a:	6042      	str	r2, [r0, #4]
}
 8085f0c:	4770      	bx	lr
 8085f0e:	bf00      	nop
 8085f10:	0808bb48 	.word	0x0808bb48

08085f14 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8085f14:	4a01      	ldr	r2, [pc, #4]	; (8085f1c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8085f16:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8085f18:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8085f1a:	4770      	bx	lr
 8085f1c:	0808bb48 	.word	0x0808bb48

08085f20 <_ZNK9IPAddresscvbEv>:
IPAddress::operator bool() const
{
#if Wiring_IPv6
#error handle me!
#else
    return address.ipv4!=0;
 8085f20:	6840      	ldr	r0, [r0, #4]
#endif
}
 8085f22:	3000      	adds	r0, #0
 8085f24:	bf18      	it	ne
 8085f26:	2001      	movne	r0, #1
 8085f28:	4770      	bx	lr

08085f2a <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8085f2a:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8085f2c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8085f30:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8085f34:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8085f38:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8085f3c:	6041      	str	r1, [r0, #4]
 8085f3e:	bd10      	pop	{r4, pc}

08085f40 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8085f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085f42:	4d04      	ldr	r5, [pc, #16]	; (8085f54 <_ZN9IPAddressC1Ehhhh+0x14>)
 8085f44:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8085f46:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8085f4a:	9500      	str	r5, [sp, #0]
 8085f4c:	f7ff ffed 	bl	8085f2a <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8085f50:	b003      	add	sp, #12
 8085f52:	bd30      	pop	{r4, r5, pc}
 8085f54:	0808bb48 	.word	0x0808bb48

08085f58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8085f58:	7441      	strb	r1, [r0, #17]
 8085f5a:	4770      	bx	lr

08085f5c <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8085f5c:	4770      	bx	lr

08085f5e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8085f5e:	2100      	movs	r1, #0
 8085f60:	7c00      	ldrb	r0, [r0, #16]
 8085f62:	f7fe bb47 	b.w	80845f4 <HAL_USB_USART_Receive_Data>

08085f66 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8085f66:	2101      	movs	r1, #1
 8085f68:	7c00      	ldrb	r0, [r0, #16]
 8085f6a:	f7fe bb43 	b.w	80845f4 <HAL_USB_USART_Receive_Data>

08085f6e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8085f6e:	7c00      	ldrb	r0, [r0, #16]
 8085f70:	f7fe bb38 	b.w	80845e4 <HAL_USB_USART_Available_Data_For_Write>

08085f74 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8085f74:	7c00      	ldrb	r0, [r0, #16]
 8085f76:	f7fe bb2d 	b.w	80845d4 <HAL_USB_USART_Available_Data>

08085f7a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8085f7a:	b538      	push	{r3, r4, r5, lr}
 8085f7c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8085f7e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8085f80:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8085f82:	f7fe fb2f 	bl	80845e4 <HAL_USB_USART_Available_Data_For_Write>
 8085f86:	2800      	cmp	r0, #0
 8085f88:	dc01      	bgt.n	8085f8e <_ZN9USBSerial5writeEh+0x14>
 8085f8a:	7c60      	ldrb	r0, [r4, #17]
 8085f8c:	b120      	cbz	r0, 8085f98 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8085f8e:	4629      	mov	r1, r5
 8085f90:	7c20      	ldrb	r0, [r4, #16]
 8085f92:	f7fe fb37 	bl	8084604 <HAL_USB_USART_Send_Data>
    return 1;
 8085f96:	2001      	movs	r0, #1
  }
  return 0;
}
 8085f98:	bd38      	pop	{r3, r4, r5, pc}

08085f9a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8085f9a:	7c00      	ldrb	r0, [r0, #16]
 8085f9c:	f7fe bb3a 	b.w	8084614 <HAL_USB_USART_Flush_Data>

08085fa0 <_ZN9USBSerialD0Ev>:
 8085fa0:	b510      	push	{r4, lr}
 8085fa2:	4604      	mov	r4, r0
 8085fa4:	f7fa f87b 	bl	808009e <_ZdlPv>
 8085fa8:	4620      	mov	r0, r4
 8085faa:	bd10      	pop	{r4, pc}

08085fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8085fac:	b510      	push	{r4, lr}
 8085fae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8085fb0:	2300      	movs	r3, #0
 8085fb2:	6063      	str	r3, [r4, #4]
 8085fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085fb8:	60a3      	str	r3, [r4, #8]
 8085fba:	4b05      	ldr	r3, [pc, #20]	; (8085fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8085fbc:	4608      	mov	r0, r1
 8085fbe:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8085fc0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8085fc2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8085fc4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8085fc6:	4611      	mov	r1, r2
 8085fc8:	f7fe fafc 	bl	80845c4 <HAL_USB_USART_Init>
}
 8085fcc:	4620      	mov	r0, r4
 8085fce:	bd10      	pop	{r4, pc}
 8085fd0:	0808bb5c 	.word	0x0808bb5c

08085fd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8085fd4:	b510      	push	{r4, lr}
 8085fd6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8085fd8:	2214      	movs	r2, #20
 8085fda:	2100      	movs	r1, #0
 8085fdc:	f003 fa3e 	bl	808945c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8085fe0:	4b05      	ldr	r3, [pc, #20]	; (8085ff8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8085fe2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8085fe4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8085fe6:	4b05      	ldr	r3, [pc, #20]	; (8085ffc <_Z19acquireSerialBufferv+0x28>)
 8085fe8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8085fea:	f240 1301 	movw	r3, #257	; 0x101
 8085fee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8085ff0:	2381      	movs	r3, #129	; 0x81
 8085ff2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8085ff4:	bd10      	pop	{r4, pc}
 8085ff6:	bf00      	nop
 8085ff8:	20000e01 	.word	0x20000e01
 8085ffc:	20000d80 	.word	0x20000d80

08086000 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8086000:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8086002:	4d0e      	ldr	r5, [pc, #56]	; (808603c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8086004:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8086006:	a801      	add	r0, sp, #4
 8086008:	f7ff ffe4 	bl	8085fd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808600c:	6829      	ldr	r1, [r5, #0]
 808600e:	f011 0401 	ands.w	r4, r1, #1
 8086012:	d110      	bne.n	8086036 <_Z16_fetch_usbserialv+0x36>
 8086014:	4628      	mov	r0, r5
 8086016:	f7fa f84f 	bl	80800b8 <__cxa_guard_acquire>
 808601a:	b160      	cbz	r0, 8086036 <_Z16_fetch_usbserialv+0x36>
 808601c:	aa01      	add	r2, sp, #4
 808601e:	4621      	mov	r1, r4
 8086020:	4807      	ldr	r0, [pc, #28]	; (8086040 <_Z16_fetch_usbserialv+0x40>)
 8086022:	f7ff ffc3 	bl	8085fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8086026:	4628      	mov	r0, r5
 8086028:	f7fa f84b 	bl	80800c2 <__cxa_guard_release>
 808602c:	4a05      	ldr	r2, [pc, #20]	; (8086044 <_Z16_fetch_usbserialv+0x44>)
 808602e:	4906      	ldr	r1, [pc, #24]	; (8086048 <_Z16_fetch_usbserialv+0x48>)
 8086030:	4803      	ldr	r0, [pc, #12]	; (8086040 <_Z16_fetch_usbserialv+0x40>)
 8086032:	f000 faa7 	bl	8086584 <__aeabi_atexit>
	return _usbserial;
}
 8086036:	4802      	ldr	r0, [pc, #8]	; (8086040 <_Z16_fetch_usbserialv+0x40>)
 8086038:	b007      	add	sp, #28
 808603a:	bd30      	pop	{r4, r5, pc}
 808603c:	20000d7c 	.word	0x20000d7c
 8086040:	20000f04 	.word	0x20000f04
 8086044:	200008e0 	.word	0x200008e0
 8086048:	08085f5d 	.word	0x08085f5d

0808604c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808604c:	b510      	push	{r4, lr}
 808604e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8086050:	2214      	movs	r2, #20
 8086052:	2100      	movs	r1, #0
 8086054:	f003 fa02 	bl	808945c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8086058:	4b05      	ldr	r3, [pc, #20]	; (8086070 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808605a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808605c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808605e:	4b05      	ldr	r3, [pc, #20]	; (8086074 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8086060:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8086062:	f240 1301 	movw	r3, #257	; 0x101
 8086066:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8086068:	2381      	movs	r3, #129	; 0x81
 808606a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808606c:	bd10      	pop	{r4, pc}
 808606e:	bf00      	nop
 8086070:	20000fb4 	.word	0x20000fb4
 8086074:	20000f1c 	.word	0x20000f1c

08086078 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8086078:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808607a:	4c0e      	ldr	r4, [pc, #56]	; (80860b4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808607c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808607e:	a801      	add	r0, sp, #4
 8086080:	f7ff ffe4 	bl	808604c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8086084:	6823      	ldr	r3, [r4, #0]
 8086086:	07db      	lsls	r3, r3, #31
 8086088:	d410      	bmi.n	80860ac <_Z17_fetch_usbserial1v+0x34>
 808608a:	4620      	mov	r0, r4
 808608c:	f7fa f814 	bl	80800b8 <__cxa_guard_acquire>
 8086090:	b160      	cbz	r0, 80860ac <_Z17_fetch_usbserial1v+0x34>
 8086092:	aa01      	add	r2, sp, #4
 8086094:	2101      	movs	r1, #1
 8086096:	4808      	ldr	r0, [pc, #32]	; (80860b8 <_Z17_fetch_usbserial1v+0x40>)
 8086098:	f7ff ff88 	bl	8085fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808609c:	4620      	mov	r0, r4
 808609e:	f7fa f810 	bl	80800c2 <__cxa_guard_release>
 80860a2:	4a06      	ldr	r2, [pc, #24]	; (80860bc <_Z17_fetch_usbserial1v+0x44>)
 80860a4:	4906      	ldr	r1, [pc, #24]	; (80860c0 <_Z17_fetch_usbserial1v+0x48>)
 80860a6:	4804      	ldr	r0, [pc, #16]	; (80860b8 <_Z17_fetch_usbserial1v+0x40>)
 80860a8:	f000 fa6c 	bl	8086584 <__aeabi_atexit>
  return _usbserial1;
}
 80860ac:	4802      	ldr	r0, [pc, #8]	; (80860b8 <_Z17_fetch_usbserial1v+0x40>)
 80860ae:	b006      	add	sp, #24
 80860b0:	bd10      	pop	{r4, pc}
 80860b2:	bf00      	nop
 80860b4:	20000f18 	.word	0x20000f18
 80860b8:	20000fa0 	.word	0x20000fa0
 80860bc:	200008e0 	.word	0x200008e0
 80860c0:	08085f5d 	.word	0x08085f5d

080860c4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80860c4:	2200      	movs	r2, #0
 80860c6:	4611      	mov	r1, r2
 80860c8:	4610      	mov	r0, r2
 80860ca:	f7fe bb39 	b.w	8084740 <network_ready>
	...

080860d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80860d0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80860d2:	4c0b      	ldr	r4, [pc, #44]	; (8086100 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 80860d4:	2528      	movs	r5, #40	; 0x28
 80860d6:	462a      	mov	r2, r5
 80860d8:	2100      	movs	r1, #0
 80860da:	4620      	mov	r0, r4
 80860dc:	f003 f9be 	bl	808945c <memset>
        cid = -1;
 80860e0:	f04f 33ff 	mov.w	r3, #4294967295
 80860e4:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 80860e6:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 80860e8:	4c06      	ldr	r4, [pc, #24]	; (8086104 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 80860ea:	4b07      	ldr	r3, [pc, #28]	; (8086108 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80860ec:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80860ee:	252c      	movs	r5, #44	; 0x2c
 80860f0:	f840 3b04 	str.w	r3, [r0], #4
 80860f4:	462a      	mov	r2, r5
 80860f6:	2100      	movs	r1, #0
 80860f8:	f003 f9b0 	bl	808945c <memset>
        size = sizeof(*this);
 80860fc:	80a5      	strh	r5, [r4, #4]
 80860fe:	bd38      	pop	{r3, r4, r5, pc}
 8086100:	200010e8 	.word	0x200010e8
 8086104:	200010b8 	.word	0x200010b8
 8086108:	0808bb8c 	.word	0x0808bb8c

0808610c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808610c:	4770      	bx	lr

0808610e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808610e:	7441      	strb	r1, [r0, #17]
 8086110:	4770      	bx	lr

08086112 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8086112:	7c00      	ldrb	r0, [r0, #16]
 8086114:	f7fe b97e 	b.w	8084414 <HAL_USART_Available_Data_For_Write>

08086118 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8086118:	7c00      	ldrb	r0, [r0, #16]
 808611a:	f7fe b953 	b.w	80843c4 <HAL_USART_Available_Data>

0808611e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808611e:	7c00      	ldrb	r0, [r0, #16]
 8086120:	f7fe b960 	b.w	80843e4 <HAL_USART_Peek_Data>

08086124 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8086124:	7c00      	ldrb	r0, [r0, #16]
 8086126:	f7fe b955 	b.w	80843d4 <HAL_USART_Read_Data>

0808612a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808612a:	7c00      	ldrb	r0, [r0, #16]
 808612c:	f7fe b962 	b.w	80843f4 <HAL_USART_Flush_Data>

08086130 <_ZN11USARTSerialD0Ev>:
 8086130:	b510      	push	{r4, lr}
 8086132:	4604      	mov	r4, r0
 8086134:	f7f9 ffb3 	bl	808009e <_ZdlPv>
 8086138:	4620      	mov	r0, r4
 808613a:	bd10      	pop	{r4, pc}

0808613c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808613c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808613e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8086140:	4604      	mov	r4, r0
 8086142:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8086144:	b925      	cbnz	r5, 8086150 <_ZN11USARTSerial5writeEh+0x14>
 8086146:	7c00      	ldrb	r0, [r0, #16]
 8086148:	f7fe f964 	bl	8084414 <HAL_USART_Available_Data_For_Write>
 808614c:	2800      	cmp	r0, #0
 808614e:	dd05      	ble.n	808615c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8086150:	4631      	mov	r1, r6
 8086152:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8086154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8086158:	f7fe b92c 	b.w	80843b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 808615c:	4628      	mov	r0, r5
 808615e:	bd70      	pop	{r4, r5, r6, pc}

08086160 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8086160:	b510      	push	{r4, lr}
 8086162:	4604      	mov	r4, r0
 8086164:	4608      	mov	r0, r1
 8086166:	4611      	mov	r1, r2
 8086168:	2200      	movs	r2, #0
 808616a:	6062      	str	r2, [r4, #4]
 808616c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8086170:	60a2      	str	r2, [r4, #8]
 8086172:	4a05      	ldr	r2, [pc, #20]	; (8086188 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8086174:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8086176:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8086178:	2201      	movs	r2, #1
 808617a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808617c:	461a      	mov	r2, r3
 808617e:	f7fe f911 	bl	80843a4 <HAL_USART_Init>
}
 8086182:	4620      	mov	r0, r4
 8086184:	bd10      	pop	{r4, pc}
 8086186:	bf00      	nop
 8086188:	0808bb9c 	.word	0x0808bb9c

0808618c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808618c:	2300      	movs	r3, #0
 808618e:	7c00      	ldrb	r0, [r0, #16]
 8086190:	f7fe b948 	b.w	8084424 <HAL_USART_BeginConfig>

08086194 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8086194:	2200      	movs	r2, #0
 8086196:	f7ff bff9 	b.w	808618c <_ZN11USARTSerial5beginEmm>

0808619a <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
 808619a:	7c00      	ldrb	r0, [r0, #16]
 808619c:	f7fe b94a 	b.w	8084434 <HAL_USART_Write_NineBitData>

080861a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80861a0:	7c00      	ldrb	r0, [r0, #16]
 80861a2:	f7fe b92f 	b.w	8084404 <HAL_USART_Is_Enabled>
	...

080861a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80861a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80861aa:	4d0c      	ldr	r5, [pc, #48]	; (80861dc <_Z22__fetch_global_Serial1v+0x34>)
 80861ac:	6829      	ldr	r1, [r5, #0]
 80861ae:	f011 0401 	ands.w	r4, r1, #1
 80861b2:	d111      	bne.n	80861d8 <_Z22__fetch_global_Serial1v+0x30>
 80861b4:	4628      	mov	r0, r5
 80861b6:	f7f9 ff7f 	bl	80800b8 <__cxa_guard_acquire>
 80861ba:	b168      	cbz	r0, 80861d8 <_Z22__fetch_global_Serial1v+0x30>
 80861bc:	4a08      	ldr	r2, [pc, #32]	; (80861e0 <_Z22__fetch_global_Serial1v+0x38>)
 80861be:	4621      	mov	r1, r4
 80861c0:	4b08      	ldr	r3, [pc, #32]	; (80861e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80861c2:	4809      	ldr	r0, [pc, #36]	; (80861e8 <_Z22__fetch_global_Serial1v+0x40>)
 80861c4:	f7ff ffcc 	bl	8086160 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80861c8:	4628      	mov	r0, r5
 80861ca:	f7f9 ff7a 	bl	80800c2 <__cxa_guard_release>
 80861ce:	4a07      	ldr	r2, [pc, #28]	; (80861ec <_Z22__fetch_global_Serial1v+0x44>)
 80861d0:	4907      	ldr	r1, [pc, #28]	; (80861f0 <_Z22__fetch_global_Serial1v+0x48>)
 80861d2:	4805      	ldr	r0, [pc, #20]	; (80861e8 <_Z22__fetch_global_Serial1v+0x40>)
 80861d4:	f000 f9d6 	bl	8086584 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80861d8:	4803      	ldr	r0, [pc, #12]	; (80861e8 <_Z22__fetch_global_Serial1v+0x40>)
 80861da:	bd38      	pop	{r3, r4, r5, pc}
 80861dc:	200011a8 	.word	0x200011a8
 80861e0:	200011ac 	.word	0x200011ac
 80861e4:	20001124 	.word	0x20001124
 80861e8:	20001110 	.word	0x20001110
 80861ec:	200008e0 	.word	0x200008e0
 80861f0:	0808610d 	.word	0x0808610d

080861f4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80861f4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80861f6:	6883      	ldr	r3, [r0, #8]
 80861f8:	4604      	mov	r4, r0
 80861fa:	b90b      	cbnz	r3, 8086200 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80861fc:	f000 f9c7 	bl	808658e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086200:	68c3      	ldr	r3, [r0, #12]
 8086202:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8086204:	68a3      	ldr	r3, [r4, #8]
 8086206:	b11b      	cbz	r3, 8086210 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086208:	2203      	movs	r2, #3
 808620a:	4621      	mov	r1, r4
 808620c:	4620      	mov	r0, r4
 808620e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8086210:	4620      	mov	r0, r4
}
 8086212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8086216:	f7f9 bf42 	b.w	808009e <_ZdlPv>

0808621a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808621a:	4770      	bx	lr

0808621c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808621e:	4606      	mov	r6, r0
 8086220:	4615      	mov	r5, r2
 8086222:	460c      	mov	r4, r1
 8086224:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8086226:	42bc      	cmp	r4, r7
 8086228:	d006      	beq.n	8086238 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808622a:	6833      	ldr	r3, [r6, #0]
 808622c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8086230:	689b      	ldr	r3, [r3, #8]
 8086232:	4630      	mov	r0, r6
 8086234:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8086236:	e7f6      	b.n	8086226 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8086238:	4628      	mov	r0, r5
 808623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808623c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808623c:	2200      	movs	r2, #0
 808623e:	7c00      	ldrb	r0, [r0, #16]
 8086240:	f7fe b920 	b.w	8084484 <HAL_I2C_Write_Data>

08086244 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8086244:	2100      	movs	r1, #0
 8086246:	7c00      	ldrb	r0, [r0, #16]
 8086248:	f7fe b924 	b.w	8084494 <HAL_I2C_Available_Data>

0808624c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808624c:	2100      	movs	r1, #0
 808624e:	7c00      	ldrb	r0, [r0, #16]
 8086250:	f7fe b928 	b.w	80844a4 <HAL_I2C_Read_Data>

08086254 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8086254:	2100      	movs	r1, #0
 8086256:	7c00      	ldrb	r0, [r0, #16]
 8086258:	f7fe b92c 	b.w	80844b4 <HAL_I2C_Peek_Data>

0808625c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808625c:	2100      	movs	r1, #0
 808625e:	7c00      	ldrb	r0, [r0, #16]
 8086260:	f7fe b930 	b.w	80844c4 <HAL_I2C_Flush_Data>

08086264 <_ZN7TwoWireD0Ev>:
 8086264:	b510      	push	{r4, lr}
 8086266:	4604      	mov	r4, r0
 8086268:	f7f9 ff19 	bl	808009e <_ZdlPv>
 808626c:	4620      	mov	r0, r4
 808626e:	bd10      	pop	{r4, pc}

08086270 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8086270:	b510      	push	{r4, lr}
 8086272:	4604      	mov	r4, r0
 8086274:	4608      	mov	r0, r1
 8086276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808627a:	60a3      	str	r3, [r4, #8]
 808627c:	4b04      	ldr	r3, [pc, #16]	; (8086290 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808627e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8086280:	7420      	strb	r0, [r4, #16]
 8086282:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8086284:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8086286:	f7fe f92d 	bl	80844e4 <HAL_I2C_Init>

}
 808628a:	4620      	mov	r0, r4
 808628c:	bd10      	pop	{r4, pc}
 808628e:	bf00      	nop
 8086290:	0808bbcc 	.word	0x0808bbcc

08086294 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8086294:	2300      	movs	r3, #0
 8086296:	461a      	mov	r2, r3
 8086298:	4619      	mov	r1, r3
 808629a:	7c00      	ldrb	r0, [r0, #16]
 808629c:	f7fe b8d2 	b.w	8084444 <HAL_I2C_Begin>

080862a0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80862a0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80862a2:	2400      	movs	r4, #0
 80862a4:	7c00      	ldrb	r0, [r0, #16]
 80862a6:	9400      	str	r4, [sp, #0]
 80862a8:	f7fe f8d4 	bl	8084454 <HAL_I2C_Request_Data>
  return result;
}
 80862ac:	b2c0      	uxtb	r0, r0
 80862ae:	b002      	add	sp, #8
 80862b0:	bd10      	pop	{r4, pc}

080862b2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80862b2:	2301      	movs	r3, #1
 80862b4:	f7ff bff4 	b.w	80862a0 <_ZN7TwoWire11requestFromEhhh>

080862b8 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80862b8:	b2db      	uxtb	r3, r3
 80862ba:	b2d2      	uxtb	r2, r2
 80862bc:	b2c9      	uxtb	r1, r1
 80862be:	f7ff bfef 	b.w	80862a0 <_ZN7TwoWire11requestFromEhhh>

080862c2 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80862c2:	2200      	movs	r2, #0
 80862c4:	7c00      	ldrb	r0, [r0, #16]
 80862c6:	f7fe b8cd 	b.w	8084464 <HAL_I2C_Begin_Transmission>

080862ca <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80862ca:	b2c9      	uxtb	r1, r1
 80862cc:	f7ff bff9 	b.w	80862c2 <_ZN7TwoWire17beginTransmissionEh>

080862d0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80862d0:	2200      	movs	r2, #0
 80862d2:	7c00      	ldrb	r0, [r0, #16]
 80862d4:	f7fe b8ce 	b.w	8084474 <HAL_I2C_End_Transmission>

080862d8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80862d8:	2101      	movs	r1, #1
 80862da:	f7ff bff9 	b.w	80862d0 <_ZN7TwoWire15endTransmissionEh>

080862de <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80862de:	2100      	movs	r1, #0
 80862e0:	7c00      	ldrb	r0, [r0, #16]
 80862e2:	f7fe b8f7 	b.w	80844d4 <HAL_I2C_Is_Enabled>

080862e6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80862e6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80862e8:	2100      	movs	r1, #0
 80862ea:	7c00      	ldrb	r0, [r0, #16]
 80862ec:	f7fe f902 	bl	80844f4 <HAL_I2C_Acquire>
}
 80862f0:	fab0 f080 	clz	r0, r0
 80862f4:	0940      	lsrs	r0, r0, #5
 80862f6:	bd08      	pop	{r3, pc}

080862f8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80862f8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80862fa:	2100      	movs	r1, #0
 80862fc:	7c00      	ldrb	r0, [r0, #16]
 80862fe:	f7fe f901 	bl	8084504 <HAL_I2C_Release>
}
 8086302:	fab0 f080 	clz	r0, r0
 8086306:	0940      	lsrs	r0, r0, #5
 8086308:	bd08      	pop	{r3, pc}
	...

0808630c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808630c:	b510      	push	{r4, lr}
 808630e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8086310:	480f      	ldr	r0, [pc, #60]	; (8086350 <pinAvailable+0x44>)
 8086312:	f7fe fbe5 	bl	8084ae0 <_ZN8SPIClass9isEnabledEv>
 8086316:	b128      	cbz	r0, 8086324 <pinAvailable+0x18>
 8086318:	f1a4 030d 	sub.w	r3, r4, #13
 808631c:	2b02      	cmp	r3, #2
 808631e:	d801      	bhi.n	8086324 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8086320:	2000      	movs	r0, #0
 8086322:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8086324:	f000 f8ee 	bl	8086504 <_Z19__fetch_global_Wirev>
 8086328:	f7ff ffd9 	bl	80862de <_ZN7TwoWire9isEnabledEv>
 808632c:	b108      	cbz	r0, 8086332 <pinAvailable+0x26>
 808632e:	2c01      	cmp	r4, #1
 8086330:	d9f6      	bls.n	8086320 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8086332:	f7ff ff39 	bl	80861a8 <_Z22__fetch_global_Serial1v>
 8086336:	f7ff ff33 	bl	80861a0 <_ZN11USARTSerial9isEnabledEv>
 808633a:	b118      	cbz	r0, 8086344 <pinAvailable+0x38>
 808633c:	f1a4 0312 	sub.w	r3, r4, #18
 8086340:	2b01      	cmp	r3, #1
 8086342:	d9ed      	bls.n	8086320 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8086344:	2c2e      	cmp	r4, #46	; 0x2e
 8086346:	bf8c      	ite	hi
 8086348:	2000      	movhi	r0, #0
 808634a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808634c:	bd10      	pop	{r4, pc}
 808634e:	bf00      	nop
 8086350:	20001230 	.word	0x20001230

08086354 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8086354:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8086356:	b538      	push	{r3, r4, r5, lr}
 8086358:	4604      	mov	r4, r0
 808635a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808635c:	d80a      	bhi.n	8086374 <pinMode+0x20>
 808635e:	29ff      	cmp	r1, #255	; 0xff
 8086360:	d008      	beq.n	8086374 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8086362:	f7ff ffd3 	bl	808630c <pinAvailable>
 8086366:	b128      	cbz	r0, 8086374 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8086368:	4629      	mov	r1, r5
 808636a:	4620      	mov	r0, r4
}
 808636c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8086370:	f7fd bf18 	b.w	80841a4 <HAL_Pin_Mode>
 8086374:	bd38      	pop	{r3, r4, r5, pc}

08086376 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8086376:	b538      	push	{r3, r4, r5, lr}
 8086378:	4604      	mov	r4, r0
 808637a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808637c:	f7fd ff1a 	bl	80841b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8086380:	28ff      	cmp	r0, #255	; 0xff
 8086382:	d010      	beq.n	80863a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8086384:	2806      	cmp	r0, #6
 8086386:	d804      	bhi.n	8086392 <digitalWrite+0x1c>
 8086388:	234d      	movs	r3, #77	; 0x4d
 808638a:	fa23 f000 	lsr.w	r0, r3, r0
 808638e:	07c3      	lsls	r3, r0, #31
 8086390:	d409      	bmi.n	80863a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8086392:	4620      	mov	r0, r4
 8086394:	f7ff ffba 	bl	808630c <pinAvailable>
 8086398:	b128      	cbz	r0, 80863a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808639a:	4629      	mov	r1, r5
 808639c:	4620      	mov	r0, r4
}
 808639e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80863a2:	f7fd bf0f 	b.w	80841c4 <HAL_GPIO_Write>
 80863a6:	bd38      	pop	{r3, r4, r5, pc}

080863a8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80863a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80863ac:	4690      	mov	r8, r2
 80863ae:	461e      	mov	r6, r3
 80863b0:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80863b2:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80863b4:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80863b6:	f1b8 0f00 	cmp.w	r8, #0
 80863ba:	d104      	bne.n	80863c6 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80863bc:	f1c4 0107 	rsb	r1, r4, #7
 80863c0:	fa46 f101 	asr.w	r1, r6, r1
 80863c4:	e001      	b.n	80863ca <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80863c6:	fa46 f104 	asr.w	r1, r6, r4
 80863ca:	f001 0101 	and.w	r1, r1, #1
 80863ce:	4638      	mov	r0, r7
 80863d0:	f7ff ffd1 	bl	8086376 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80863d4:	2101      	movs	r1, #1
 80863d6:	4628      	mov	r0, r5
 80863d8:	f7ff ffcd 	bl	8086376 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80863dc:	2100      	movs	r1, #0
 80863de:	4628      	mov	r0, r5
 80863e0:	f7ff ffc9 	bl	8086376 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80863e4:	f114 34ff 	adds.w	r4, r4, #4294967295
 80863e8:	d2e5      	bcs.n	80863b6 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80863ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080863f0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80863f0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80863f2:	4e11      	ldr	r6, [pc, #68]	; (8086438 <_GLOBAL__sub_I_SPI+0x48>)
 80863f4:	4d11      	ldr	r5, [pc, #68]	; (808643c <_GLOBAL__sub_I_SPI+0x4c>)
 80863f6:	4c12      	ldr	r4, [pc, #72]	; (8086440 <_GLOBAL__sub_I_SPI+0x50>)
 80863f8:	2100      	movs	r1, #0
 80863fa:	4630      	mov	r0, r6
 80863fc:	f7fe faf0 	bl	80849e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8086400:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8086402:	4e10      	ldr	r6, [pc, #64]	; (8086444 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8086404:	462a      	mov	r2, r5
 8086406:	4621      	mov	r1, r4
 8086408:	f000 f8bc 	bl	8086584 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808640c:	2101      	movs	r1, #1
 808640e:	4630      	mov	r0, r6
 8086410:	f7fe fae6 	bl	80849e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8086414:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8086416:	4e0c      	ldr	r6, [pc, #48]	; (8086448 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8086418:	462a      	mov	r2, r5
 808641a:	4621      	mov	r1, r4
 808641c:	f000 f8b2 	bl	8086584 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8086420:	2102      	movs	r1, #2
 8086422:	4630      	mov	r0, r6
 8086424:	f7fe fadc 	bl	80849e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8086428:	462a      	mov	r2, r5
 808642a:	4621      	mov	r1, r4
 808642c:	4630      	mov	r0, r6
 808642e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086432:	f000 b8a7 	b.w	8086584 <__aeabi_atexit>
 8086436:	bf00      	nop
 8086438:	20001230 	.word	0x20001230
 808643c:	200008e0 	.word	0x200008e0
 8086440:	080849d1 	.word	0x080849d1
 8086444:	20001240 	.word	0x20001240
 8086448:	20001250 	.word	0x20001250

0808644c <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 808644c:	b530      	push	{r4, r5, lr}
 808644e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 8086450:	4d1b      	ldr	r5, [pc, #108]	; (80864c0 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 8086452:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 8086454:	6820      	ldr	r0, [r4, #0]
 8086456:	f7fd ff05 	bl	8084264 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808645a:	f7fd ff13 	bl	8084284 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 808645e:	682b      	ldr	r3, [r5, #0]
 8086460:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 8086462:	1ac0      	subs	r0, r0, r3
 8086464:	4290      	cmp	r0, r2
 8086466:	d3f5      	bcc.n	8086454 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 8086468:	6823      	ldr	r3, [r4, #0]
 808646a:	b333      	cbz	r3, 80864ba <_ZN19ApplicationWatchdog4loopEv+0x6e>
 808646c:	68e3      	ldr	r3, [r4, #12]
 808646e:	b323      	cbz	r3, 80864ba <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8086470:	1d25      	adds	r5, r4, #4
 8086472:	6923      	ldr	r3, [r4, #16]
 8086474:	4628      	mov	r0, r5
 8086476:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8086478:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808647a:	a904      	add	r1, sp, #16
 808647c:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808647e:	9302      	str	r3, [sp, #8]
 8086480:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8086482:	f7ff f8e4 	bl	808564e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8086486:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8086488:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 808648a:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808648c:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808648e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8086490:	9a07      	ldr	r2, [sp, #28]
 8086492:	4629      	mov	r1, r5
 8086494:	a804      	add	r0, sp, #16
 8086496:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8086498:	9307      	str	r3, [sp, #28]
 808649a:	f7ff f8d8 	bl	808564e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808649e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80864a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80864a2:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80864a4:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80864a6:	9206      	str	r2, [sp, #24]
 80864a8:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80864aa:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80864ac:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80864ae:	9207      	str	r2, [sp, #28]
 80864b0:	f7fa f922 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
 80864b4:	4668      	mov	r0, sp
 80864b6:	f7fa f91f 	bl	80806f8 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80864ba:	b009      	add	sp, #36	; 0x24
 80864bc:	bd30      	pop	{r4, r5, pc}
 80864be:	bf00      	nop
 80864c0:	20001260 	.word	0x20001260

080864c4 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80864c4:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80864c6:	f7ff ffc1 	bl	808644c <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80864ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80864ce:	2000      	movs	r0, #0
 80864d0:	f7fd bf28 	b.w	8084324 <os_thread_cleanup>

080864d4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80864d4:	b513      	push	{r0, r1, r4, lr}
 80864d6:	4c08      	ldr	r4, [pc, #32]	; (80864f8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80864d8:	2300      	movs	r3, #0
 80864da:	461a      	mov	r2, r3
 80864dc:	4619      	mov	r1, r3
 80864de:	9300      	str	r3, [sp, #0]
 80864e0:	4620      	mov	r0, r4
 80864e2:	f7ff fd2d 	bl	8085f40 <_ZN9IPAddressC1Ehhhh>
 80864e6:	4620      	mov	r0, r4
 80864e8:	4a04      	ldr	r2, [pc, #16]	; (80864fc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80864ea:	4905      	ldr	r1, [pc, #20]	; (8086500 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80864ec:	b002      	add	sp, #8
 80864ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80864f2:	f000 b847 	b.w	8086584 <__aeabi_atexit>
 80864f6:	bf00      	nop
 80864f8:	20001264 	.word	0x20001264
 80864fc:	200008e0 	.word	0x200008e0
 8086500:	08085eb5 	.word	0x08085eb5

08086504 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8086504:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8086506:	4d0b      	ldr	r5, [pc, #44]	; (8086534 <_Z19__fetch_global_Wirev+0x30>)
 8086508:	6829      	ldr	r1, [r5, #0]
 808650a:	f011 0401 	ands.w	r4, r1, #1
 808650e:	d10f      	bne.n	8086530 <_Z19__fetch_global_Wirev+0x2c>
 8086510:	4628      	mov	r0, r5
 8086512:	f7f9 fdd1 	bl	80800b8 <__cxa_guard_acquire>
 8086516:	b158      	cbz	r0, 8086530 <_Z19__fetch_global_Wirev+0x2c>
 8086518:	4621      	mov	r1, r4
 808651a:	4807      	ldr	r0, [pc, #28]	; (8086538 <_Z19__fetch_global_Wirev+0x34>)
 808651c:	f7ff fea8 	bl	8086270 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8086520:	4628      	mov	r0, r5
 8086522:	f7f9 fdce 	bl	80800c2 <__cxa_guard_release>
 8086526:	4a05      	ldr	r2, [pc, #20]	; (808653c <_Z19__fetch_global_Wirev+0x38>)
 8086528:	4905      	ldr	r1, [pc, #20]	; (8086540 <_Z19__fetch_global_Wirev+0x3c>)
 808652a:	4803      	ldr	r0, [pc, #12]	; (8086538 <_Z19__fetch_global_Wirev+0x34>)
 808652c:	f000 f82a 	bl	8086584 <__aeabi_atexit>
	return wire;
}
 8086530:	4801      	ldr	r0, [pc, #4]	; (8086538 <_Z19__fetch_global_Wirev+0x34>)
 8086532:	bd38      	pop	{r3, r4, r5, pc}
 8086534:	2000126c 	.word	0x2000126c
 8086538:	20001284 	.word	0x20001284
 808653c:	200008e0 	.word	0x200008e0
 8086540:	0808621b 	.word	0x0808621b

08086544 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8086544:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8086546:	4c0b      	ldr	r4, [pc, #44]	; (8086574 <_Z20__fetch_global_Wire3v+0x30>)
 8086548:	6823      	ldr	r3, [r4, #0]
 808654a:	07db      	lsls	r3, r3, #31
 808654c:	d40f      	bmi.n	808656e <_Z20__fetch_global_Wire3v+0x2a>
 808654e:	4620      	mov	r0, r4
 8086550:	f7f9 fdb2 	bl	80800b8 <__cxa_guard_acquire>
 8086554:	b158      	cbz	r0, 808656e <_Z20__fetch_global_Wire3v+0x2a>
 8086556:	2102      	movs	r1, #2
 8086558:	4807      	ldr	r0, [pc, #28]	; (8086578 <_Z20__fetch_global_Wire3v+0x34>)
 808655a:	f7ff fe89 	bl	8086270 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808655e:	4620      	mov	r0, r4
 8086560:	f7f9 fdaf 	bl	80800c2 <__cxa_guard_release>
 8086564:	4a05      	ldr	r2, [pc, #20]	; (808657c <_Z20__fetch_global_Wire3v+0x38>)
 8086566:	4906      	ldr	r1, [pc, #24]	; (8086580 <_Z20__fetch_global_Wire3v+0x3c>)
 8086568:	4803      	ldr	r0, [pc, #12]	; (8086578 <_Z20__fetch_global_Wire3v+0x34>)
 808656a:	f000 f80b 	bl	8086584 <__aeabi_atexit>
	return wire;
}
 808656e:	4802      	ldr	r0, [pc, #8]	; (8086578 <_Z20__fetch_global_Wire3v+0x34>)
 8086570:	bd10      	pop	{r4, pc}
 8086572:	bf00      	nop
 8086574:	20001298 	.word	0x20001298
 8086578:	20001270 	.word	0x20001270
 808657c:	200008e0 	.word	0x200008e0
 8086580:	0808621b 	.word	0x0808621b

08086584 <__aeabi_atexit>:
 8086584:	460b      	mov	r3, r1
 8086586:	4601      	mov	r1, r0
 8086588:	4618      	mov	r0, r3
 808658a:	f002 be35 	b.w	80891f8 <__cxa_atexit>

0808658e <_ZSt25__throw_bad_function_callv>:
 808658e:	b508      	push	{r3, lr}
 8086590:	f7fe f976 	bl	8084880 <abort>

08086594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8086594:	4b18      	ldr	r3, [pc, #96]	; (80865f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8086596:	681a      	ldr	r2, [r3, #0]
 8086598:	07d1      	lsls	r1, r2, #31
 808659a:	bf5c      	itt	pl
 808659c:	2201      	movpl	r2, #1
 808659e:	601a      	strpl	r2, [r3, #0]
 80865a0:	4b16      	ldr	r3, [pc, #88]	; (80865fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80865a2:	681a      	ldr	r2, [r3, #0]
 80865a4:	07d2      	lsls	r2, r2, #31
 80865a6:	bf5c      	itt	pl
 80865a8:	2201      	movpl	r2, #1
 80865aa:	601a      	strpl	r2, [r3, #0]
 80865ac:	4b14      	ldr	r3, [pc, #80]	; (8086600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80865ae:	681a      	ldr	r2, [r3, #0]
 80865b0:	07d0      	lsls	r0, r2, #31
 80865b2:	bf5c      	itt	pl
 80865b4:	2201      	movpl	r2, #1
 80865b6:	601a      	strpl	r2, [r3, #0]
 80865b8:	4b12      	ldr	r3, [pc, #72]	; (8086604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80865ba:	681a      	ldr	r2, [r3, #0]
 80865bc:	07d1      	lsls	r1, r2, #31
 80865be:	bf5c      	itt	pl
 80865c0:	2201      	movpl	r2, #1
 80865c2:	601a      	strpl	r2, [r3, #0]
 80865c4:	4b10      	ldr	r3, [pc, #64]	; (8086608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80865c6:	681a      	ldr	r2, [r3, #0]
 80865c8:	07d2      	lsls	r2, r2, #31
 80865ca:	bf5c      	itt	pl
 80865cc:	2201      	movpl	r2, #1
 80865ce:	601a      	strpl	r2, [r3, #0]
 80865d0:	4b0e      	ldr	r3, [pc, #56]	; (808660c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80865d2:	681a      	ldr	r2, [r3, #0]
 80865d4:	07d0      	lsls	r0, r2, #31
 80865d6:	bf5c      	itt	pl
 80865d8:	2201      	movpl	r2, #1
 80865da:	601a      	strpl	r2, [r3, #0]
 80865dc:	4b0c      	ldr	r3, [pc, #48]	; (8086610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80865de:	681a      	ldr	r2, [r3, #0]
 80865e0:	07d1      	lsls	r1, r2, #31
 80865e2:	bf5c      	itt	pl
 80865e4:	2201      	movpl	r2, #1
 80865e6:	601a      	strpl	r2, [r3, #0]
 80865e8:	4b0a      	ldr	r3, [pc, #40]	; (8086614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80865ea:	681a      	ldr	r2, [r3, #0]
 80865ec:	07d2      	lsls	r2, r2, #31
 80865ee:	bf5c      	itt	pl
 80865f0:	2201      	movpl	r2, #1
 80865f2:	601a      	strpl	r2, [r3, #0]
 80865f4:	4770      	bx	lr
 80865f6:	bf00      	nop
 80865f8:	200012b8 	.word	0x200012b8
 80865fc:	200012b4 	.word	0x200012b4
 8086600:	200012b0 	.word	0x200012b0
 8086604:	200012ac 	.word	0x200012ac
 8086608:	200012a8 	.word	0x200012a8
 808660c:	200012a4 	.word	0x200012a4
 8086610:	200012a0 	.word	0x200012a0
 8086614:	2000129c 	.word	0x2000129c

08086618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8086618:	4b24      	ldr	r3, [pc, #144]	; (80866ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808661a:	681a      	ldr	r2, [r3, #0]
 808661c:	07d0      	lsls	r0, r2, #31
 808661e:	bf5c      	itt	pl
 8086620:	2201      	movpl	r2, #1
 8086622:	601a      	strpl	r2, [r3, #0]
 8086624:	4b22      	ldr	r3, [pc, #136]	; (80866b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8086626:	681a      	ldr	r2, [r3, #0]
 8086628:	07d1      	lsls	r1, r2, #31
 808662a:	bf5c      	itt	pl
 808662c:	2201      	movpl	r2, #1
 808662e:	601a      	strpl	r2, [r3, #0]
 8086630:	4b20      	ldr	r3, [pc, #128]	; (80866b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8086632:	681a      	ldr	r2, [r3, #0]
 8086634:	07d2      	lsls	r2, r2, #31
 8086636:	bf5c      	itt	pl
 8086638:	2201      	movpl	r2, #1
 808663a:	601a      	strpl	r2, [r3, #0]
 808663c:	4b1e      	ldr	r3, [pc, #120]	; (80866b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808663e:	681a      	ldr	r2, [r3, #0]
 8086640:	07d0      	lsls	r0, r2, #31
 8086642:	bf5c      	itt	pl
 8086644:	2201      	movpl	r2, #1
 8086646:	601a      	strpl	r2, [r3, #0]
 8086648:	4b1c      	ldr	r3, [pc, #112]	; (80866bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808664a:	681a      	ldr	r2, [r3, #0]
 808664c:	07d1      	lsls	r1, r2, #31
 808664e:	bf5c      	itt	pl
 8086650:	2201      	movpl	r2, #1
 8086652:	601a      	strpl	r2, [r3, #0]
 8086654:	4b1a      	ldr	r3, [pc, #104]	; (80866c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8086656:	681a      	ldr	r2, [r3, #0]
 8086658:	07d2      	lsls	r2, r2, #31
 808665a:	bf5c      	itt	pl
 808665c:	2201      	movpl	r2, #1
 808665e:	601a      	strpl	r2, [r3, #0]
 8086660:	4b18      	ldr	r3, [pc, #96]	; (80866c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8086662:	681a      	ldr	r2, [r3, #0]
 8086664:	07d0      	lsls	r0, r2, #31
 8086666:	bf5c      	itt	pl
 8086668:	2201      	movpl	r2, #1
 808666a:	601a      	strpl	r2, [r3, #0]
 808666c:	4b16      	ldr	r3, [pc, #88]	; (80866c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808666e:	681a      	ldr	r2, [r3, #0]
 8086670:	07d1      	lsls	r1, r2, #31
 8086672:	bf5c      	itt	pl
 8086674:	2201      	movpl	r2, #1
 8086676:	601a      	strpl	r2, [r3, #0]
 8086678:	4b14      	ldr	r3, [pc, #80]	; (80866cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808667a:	681a      	ldr	r2, [r3, #0]
 808667c:	07d2      	lsls	r2, r2, #31
 808667e:	bf5c      	itt	pl
 8086680:	2201      	movpl	r2, #1
 8086682:	601a      	strpl	r2, [r3, #0]
 8086684:	4b12      	ldr	r3, [pc, #72]	; (80866d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8086686:	681a      	ldr	r2, [r3, #0]
 8086688:	07d0      	lsls	r0, r2, #31
 808668a:	bf5c      	itt	pl
 808668c:	2201      	movpl	r2, #1
 808668e:	601a      	strpl	r2, [r3, #0]
 8086690:	4b10      	ldr	r3, [pc, #64]	; (80866d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8086692:	681a      	ldr	r2, [r3, #0]
 8086694:	07d1      	lsls	r1, r2, #31
 8086696:	bf5c      	itt	pl
 8086698:	2201      	movpl	r2, #1
 808669a:	601a      	strpl	r2, [r3, #0]
 808669c:	4b0e      	ldr	r3, [pc, #56]	; (80866d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808669e:	681a      	ldr	r2, [r3, #0]
 80866a0:	07d2      	lsls	r2, r2, #31
 80866a2:	bf5c      	itt	pl
 80866a4:	2201      	movpl	r2, #1
 80866a6:	601a      	strpl	r2, [r3, #0]
 80866a8:	4770      	bx	lr
 80866aa:	bf00      	nop
 80866ac:	200012e8 	.word	0x200012e8
 80866b0:	200012e4 	.word	0x200012e4
 80866b4:	200012e0 	.word	0x200012e0
 80866b8:	200012dc 	.word	0x200012dc
 80866bc:	200012d8 	.word	0x200012d8
 80866c0:	200012d4 	.word	0x200012d4
 80866c4:	200012d0 	.word	0x200012d0
 80866c8:	200012cc 	.word	0x200012cc
 80866cc:	200012c8 	.word	0x200012c8
 80866d0:	200012c4 	.word	0x200012c4
 80866d4:	200012c0 	.word	0x200012c0
 80866d8:	200012bc 	.word	0x200012bc

080866dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80866dc:	4b24      	ldr	r3, [pc, #144]	; (8086770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80866de:	681a      	ldr	r2, [r3, #0]
 80866e0:	07d0      	lsls	r0, r2, #31
 80866e2:	bf5c      	itt	pl
 80866e4:	2201      	movpl	r2, #1
 80866e6:	601a      	strpl	r2, [r3, #0]
 80866e8:	4b22      	ldr	r3, [pc, #136]	; (8086774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80866ea:	681a      	ldr	r2, [r3, #0]
 80866ec:	07d1      	lsls	r1, r2, #31
 80866ee:	bf5c      	itt	pl
 80866f0:	2201      	movpl	r2, #1
 80866f2:	601a      	strpl	r2, [r3, #0]
 80866f4:	4b20      	ldr	r3, [pc, #128]	; (8086778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80866f6:	681a      	ldr	r2, [r3, #0]
 80866f8:	07d2      	lsls	r2, r2, #31
 80866fa:	bf5c      	itt	pl
 80866fc:	2201      	movpl	r2, #1
 80866fe:	601a      	strpl	r2, [r3, #0]
 8086700:	4b1e      	ldr	r3, [pc, #120]	; (808677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8086702:	681a      	ldr	r2, [r3, #0]
 8086704:	07d0      	lsls	r0, r2, #31
 8086706:	bf5c      	itt	pl
 8086708:	2201      	movpl	r2, #1
 808670a:	601a      	strpl	r2, [r3, #0]
 808670c:	4b1c      	ldr	r3, [pc, #112]	; (8086780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808670e:	681a      	ldr	r2, [r3, #0]
 8086710:	07d1      	lsls	r1, r2, #31
 8086712:	bf5c      	itt	pl
 8086714:	2201      	movpl	r2, #1
 8086716:	601a      	strpl	r2, [r3, #0]
 8086718:	4b1a      	ldr	r3, [pc, #104]	; (8086784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808671a:	681a      	ldr	r2, [r3, #0]
 808671c:	07d2      	lsls	r2, r2, #31
 808671e:	bf5c      	itt	pl
 8086720:	2201      	movpl	r2, #1
 8086722:	601a      	strpl	r2, [r3, #0]
 8086724:	4b18      	ldr	r3, [pc, #96]	; (8086788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8086726:	681a      	ldr	r2, [r3, #0]
 8086728:	07d0      	lsls	r0, r2, #31
 808672a:	bf5c      	itt	pl
 808672c:	2201      	movpl	r2, #1
 808672e:	601a      	strpl	r2, [r3, #0]
 8086730:	4b16      	ldr	r3, [pc, #88]	; (808678c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8086732:	681a      	ldr	r2, [r3, #0]
 8086734:	07d1      	lsls	r1, r2, #31
 8086736:	bf5c      	itt	pl
 8086738:	2201      	movpl	r2, #1
 808673a:	601a      	strpl	r2, [r3, #0]
 808673c:	4b14      	ldr	r3, [pc, #80]	; (8086790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808673e:	681a      	ldr	r2, [r3, #0]
 8086740:	07d2      	lsls	r2, r2, #31
 8086742:	bf5c      	itt	pl
 8086744:	2201      	movpl	r2, #1
 8086746:	601a      	strpl	r2, [r3, #0]
 8086748:	4b12      	ldr	r3, [pc, #72]	; (8086794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808674a:	681a      	ldr	r2, [r3, #0]
 808674c:	07d0      	lsls	r0, r2, #31
 808674e:	bf5c      	itt	pl
 8086750:	2201      	movpl	r2, #1
 8086752:	601a      	strpl	r2, [r3, #0]
 8086754:	4b10      	ldr	r3, [pc, #64]	; (8086798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8086756:	681a      	ldr	r2, [r3, #0]
 8086758:	07d1      	lsls	r1, r2, #31
 808675a:	bf5c      	itt	pl
 808675c:	2201      	movpl	r2, #1
 808675e:	601a      	strpl	r2, [r3, #0]
 8086760:	4b0e      	ldr	r3, [pc, #56]	; (808679c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8086762:	681a      	ldr	r2, [r3, #0]
 8086764:	07d2      	lsls	r2, r2, #31
 8086766:	bf5c      	itt	pl
 8086768:	2201      	movpl	r2, #1
 808676a:	601a      	strpl	r2, [r3, #0]
 808676c:	4770      	bx	lr
 808676e:	bf00      	nop
 8086770:	20001318 	.word	0x20001318
 8086774:	20001314 	.word	0x20001314
 8086778:	20001310 	.word	0x20001310
 808677c:	2000130c 	.word	0x2000130c
 8086780:	20001308 	.word	0x20001308
 8086784:	20001304 	.word	0x20001304
 8086788:	20001300 	.word	0x20001300
 808678c:	200012fc 	.word	0x200012fc
 8086790:	200012f8 	.word	0x200012f8
 8086794:	200012f4 	.word	0x200012f4
 8086798:	200012f0 	.word	0x200012f0
 808679c:	200012ec 	.word	0x200012ec

080867a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80867a0:	4b18      	ldr	r3, [pc, #96]	; (8086804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80867a2:	681a      	ldr	r2, [r3, #0]
 80867a4:	07d1      	lsls	r1, r2, #31
 80867a6:	bf5c      	itt	pl
 80867a8:	2201      	movpl	r2, #1
 80867aa:	601a      	strpl	r2, [r3, #0]
 80867ac:	4b16      	ldr	r3, [pc, #88]	; (8086808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80867ae:	681a      	ldr	r2, [r3, #0]
 80867b0:	07d2      	lsls	r2, r2, #31
 80867b2:	bf5c      	itt	pl
 80867b4:	2201      	movpl	r2, #1
 80867b6:	601a      	strpl	r2, [r3, #0]
 80867b8:	4b14      	ldr	r3, [pc, #80]	; (808680c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80867ba:	681a      	ldr	r2, [r3, #0]
 80867bc:	07d0      	lsls	r0, r2, #31
 80867be:	bf5c      	itt	pl
 80867c0:	2201      	movpl	r2, #1
 80867c2:	601a      	strpl	r2, [r3, #0]
 80867c4:	4b12      	ldr	r3, [pc, #72]	; (8086810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80867c6:	681a      	ldr	r2, [r3, #0]
 80867c8:	07d1      	lsls	r1, r2, #31
 80867ca:	bf5c      	itt	pl
 80867cc:	2201      	movpl	r2, #1
 80867ce:	601a      	strpl	r2, [r3, #0]
 80867d0:	4b10      	ldr	r3, [pc, #64]	; (8086814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80867d2:	681a      	ldr	r2, [r3, #0]
 80867d4:	07d2      	lsls	r2, r2, #31
 80867d6:	bf5c      	itt	pl
 80867d8:	2201      	movpl	r2, #1
 80867da:	601a      	strpl	r2, [r3, #0]
 80867dc:	4b0e      	ldr	r3, [pc, #56]	; (8086818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80867de:	681a      	ldr	r2, [r3, #0]
 80867e0:	07d0      	lsls	r0, r2, #31
 80867e2:	bf5c      	itt	pl
 80867e4:	2201      	movpl	r2, #1
 80867e6:	601a      	strpl	r2, [r3, #0]
 80867e8:	4b0c      	ldr	r3, [pc, #48]	; (808681c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80867ea:	681a      	ldr	r2, [r3, #0]
 80867ec:	07d1      	lsls	r1, r2, #31
 80867ee:	bf5c      	itt	pl
 80867f0:	2201      	movpl	r2, #1
 80867f2:	601a      	strpl	r2, [r3, #0]
 80867f4:	4b0a      	ldr	r3, [pc, #40]	; (8086820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80867f6:	681a      	ldr	r2, [r3, #0]
 80867f8:	07d2      	lsls	r2, r2, #31
 80867fa:	bf5c      	itt	pl
 80867fc:	2201      	movpl	r2, #1
 80867fe:	601a      	strpl	r2, [r3, #0]
 8086800:	4770      	bx	lr
 8086802:	bf00      	nop
 8086804:	20001338 	.word	0x20001338
 8086808:	20001334 	.word	0x20001334
 808680c:	20001330 	.word	0x20001330
 8086810:	2000132c 	.word	0x2000132c
 8086814:	20001328 	.word	0x20001328
 8086818:	20001324 	.word	0x20001324
 808681c:	20001320 	.word	0x20001320
 8086820:	2000131c 	.word	0x2000131c

08086824 <cos>:
 8086824:	b530      	push	{r4, r5, lr}
 8086826:	4a21      	ldr	r2, [pc, #132]	; (80868ac <cos+0x88>)
 8086828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808682c:	4293      	cmp	r3, r2
 808682e:	b087      	sub	sp, #28
 8086830:	dd1b      	ble.n	808686a <cos+0x46>
 8086832:	4a1f      	ldr	r2, [pc, #124]	; (80868b0 <cos+0x8c>)
 8086834:	4293      	cmp	r3, r2
 8086836:	dd05      	ble.n	8086844 <cos+0x20>
 8086838:	4602      	mov	r2, r0
 808683a:	460b      	mov	r3, r1
 808683c:	f001 fcc6 	bl	80881cc <__aeabi_dsub>
 8086840:	b007      	add	sp, #28
 8086842:	bd30      	pop	{r4, r5, pc}
 8086844:	aa02      	add	r2, sp, #8
 8086846:	f000 f95f 	bl	8086b08 <__ieee754_rem_pio2>
 808684a:	f000 0003 	and.w	r0, r0, #3
 808684e:	2801      	cmp	r0, #1
 8086850:	d01a      	beq.n	8086888 <cos+0x64>
 8086852:	2802      	cmp	r0, #2
 8086854:	d00f      	beq.n	8086876 <cos+0x52>
 8086856:	b308      	cbz	r0, 808689c <cos+0x78>
 8086858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808685c:	2301      	movs	r3, #1
 808685e:	9300      	str	r3, [sp, #0]
 8086860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8086864:	f001 f94c 	bl	8087b00 <__kernel_sin>
 8086868:	e7ea      	b.n	8086840 <cos+0x1c>
 808686a:	2200      	movs	r2, #0
 808686c:	2300      	movs	r3, #0
 808686e:	f000 fc27 	bl	80870c0 <__kernel_cos>
 8086872:	b007      	add	sp, #28
 8086874:	bd30      	pop	{r4, r5, pc}
 8086876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808687a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808687e:	f000 fc1f 	bl	80870c0 <__kernel_cos>
 8086882:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8086886:	e7db      	b.n	8086840 <cos+0x1c>
 8086888:	9000      	str	r0, [sp, #0]
 808688a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808688e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8086892:	f001 f935 	bl	8087b00 <__kernel_sin>
 8086896:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 808689a:	e7d1      	b.n	8086840 <cos+0x1c>
 808689c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80868a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80868a4:	f000 fc0c 	bl	80870c0 <__kernel_cos>
 80868a8:	e7ca      	b.n	8086840 <cos+0x1c>
 80868aa:	bf00      	nop
 80868ac:	3fe921fb 	.word	0x3fe921fb
 80868b0:	7fefffff 	.word	0x7fefffff

080868b4 <atan2>:
 80868b4:	f000 b85c 	b.w	8086970 <__ieee754_atan2>

080868b8 <sqrt>:
 80868b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80868bc:	b08b      	sub	sp, #44	; 0x2c
 80868be:	4604      	mov	r4, r0
 80868c0:	460d      	mov	r5, r1
 80868c2:	f000 fb37 	bl	8086f34 <__ieee754_sqrt>
 80868c6:	4b28      	ldr	r3, [pc, #160]	; (8086968 <sqrt+0xb0>)
 80868c8:	4606      	mov	r6, r0
 80868ca:	f993 a000 	ldrsb.w	sl, [r3]
 80868ce:	460f      	mov	r7, r1
 80868d0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80868d4:	d012      	beq.n	80868fc <sqrt+0x44>
 80868d6:	4622      	mov	r2, r4
 80868d8:	462b      	mov	r3, r5
 80868da:	4620      	mov	r0, r4
 80868dc:	4629      	mov	r1, r5
 80868de:	f002 f8c3 	bl	8088a68 <__aeabi_dcmpun>
 80868e2:	4683      	mov	fp, r0
 80868e4:	b950      	cbnz	r0, 80868fc <sqrt+0x44>
 80868e6:	f04f 0800 	mov.w	r8, #0
 80868ea:	f04f 0900 	mov.w	r9, #0
 80868ee:	4620      	mov	r0, r4
 80868f0:	4629      	mov	r1, r5
 80868f2:	4642      	mov	r2, r8
 80868f4:	464b      	mov	r3, r9
 80868f6:	f002 f88f 	bl	8088a18 <__aeabi_dcmplt>
 80868fa:	b920      	cbnz	r0, 8086906 <sqrt+0x4e>
 80868fc:	4630      	mov	r0, r6
 80868fe:	4639      	mov	r1, r7
 8086900:	b00b      	add	sp, #44	; 0x2c
 8086902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086906:	4a19      	ldr	r2, [pc, #100]	; (808696c <sqrt+0xb4>)
 8086908:	2301      	movs	r3, #1
 808690a:	f8cd b020 	str.w	fp, [sp, #32]
 808690e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8086912:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8086916:	9201      	str	r2, [sp, #4]
 8086918:	9300      	str	r3, [sp, #0]
 808691a:	f1ba 0f00 	cmp.w	sl, #0
 808691e:	d015      	beq.n	808694c <sqrt+0x94>
 8086920:	4642      	mov	r2, r8
 8086922:	464b      	mov	r3, r9
 8086924:	4640      	mov	r0, r8
 8086926:	4649      	mov	r1, r9
 8086928:	f001 ff2e 	bl	8088788 <__aeabi_ddiv>
 808692c:	f1ba 0f02 	cmp.w	sl, #2
 8086930:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8086934:	d10c      	bne.n	8086950 <sqrt+0x98>
 8086936:	f002 fc6d 	bl	8089214 <__errno>
 808693a:	2321      	movs	r3, #33	; 0x21
 808693c:	6003      	str	r3, [r0, #0]
 808693e:	9b08      	ldr	r3, [sp, #32]
 8086940:	b963      	cbnz	r3, 808695c <sqrt+0xa4>
 8086942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8086946:	b00b      	add	sp, #44	; 0x2c
 8086948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808694c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8086950:	4668      	mov	r0, sp
 8086952:	f001 fbb9 	bl	80880c8 <matherr>
 8086956:	2800      	cmp	r0, #0
 8086958:	d1f1      	bne.n	808693e <sqrt+0x86>
 808695a:	e7ec      	b.n	8086936 <sqrt+0x7e>
 808695c:	f002 fc5a 	bl	8089214 <__errno>
 8086960:	9b08      	ldr	r3, [sp, #32]
 8086962:	6003      	str	r3, [r0, #0]
 8086964:	e7ed      	b.n	8086942 <sqrt+0x8a>
 8086966:	bf00      	nop
 8086968:	20000828 	.word	0x20000828
 808696c:	0808bbec 	.word	0x0808bbec

08086970 <__ieee754_atan2>:
 8086970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086974:	4254      	negs	r4, r2
 8086976:	4314      	orrs	r4, r2
 8086978:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 808697c:	f8df e180 	ldr.w	lr, [pc, #384]	; 8086b00 <__ieee754_atan2+0x190>
 8086980:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
 8086984:	4574      	cmp	r4, lr
 8086986:	4606      	mov	r6, r0
 8086988:	460d      	mov	r5, r1
 808698a:	d83e      	bhi.n	8086a0a <__ieee754_atan2+0x9a>
 808698c:	4244      	negs	r4, r0
 808698e:	4304      	orrs	r4, r0
 8086990:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8086994:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
 8086998:	4574      	cmp	r4, lr
 808699a:	468a      	mov	sl, r1
 808699c:	d835      	bhi.n	8086a0a <__ieee754_atan2+0x9a>
 808699e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
 80869a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80869a6:	4314      	orrs	r4, r2
 80869a8:	d044      	beq.n	8086a34 <__ieee754_atan2+0xc4>
 80869aa:	179c      	asrs	r4, r3, #30
 80869ac:	f004 0402 	and.w	r4, r4, #2
 80869b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80869b4:	ea50 010b 	orrs.w	r1, r0, fp
 80869b8:	d02f      	beq.n	8086a1a <__ieee754_atan2+0xaa>
 80869ba:	ea52 0109 	orrs.w	r1, r2, r9
 80869be:	d033      	beq.n	8086a28 <__ieee754_atan2+0xb8>
 80869c0:	45f1      	cmp	r9, lr
 80869c2:	d046      	beq.n	8086a52 <__ieee754_atan2+0xe2>
 80869c4:	45f3      	cmp	fp, lr
 80869c6:	d02f      	beq.n	8086a28 <__ieee754_atan2+0xb8>
 80869c8:	ebc9 090b 	rsb	r9, r9, fp
 80869cc:	ea4f 5929 	mov.w	r9, r9, asr #20
 80869d0:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80869d4:	dc34      	bgt.n	8086a40 <__ieee754_atan2+0xd0>
 80869d6:	2b00      	cmp	r3, #0
 80869d8:	db57      	blt.n	8086a8a <__ieee754_atan2+0x11a>
 80869da:	4630      	mov	r0, r6
 80869dc:	4629      	mov	r1, r5
 80869de:	f001 fed3 	bl	8088788 <__aeabi_ddiv>
 80869e2:	f001 fae3 	bl	8087fac <fabs>
 80869e6:	f001 f943 	bl	8087c70 <atan>
 80869ea:	2c01      	cmp	r4, #1
 80869ec:	d04a      	beq.n	8086a84 <__ieee754_atan2+0x114>
 80869ee:	2c02      	cmp	r4, #2
 80869f0:	d03b      	beq.n	8086a6a <__ieee754_atan2+0xfa>
 80869f2:	b184      	cbz	r4, 8086a16 <__ieee754_atan2+0xa6>
 80869f4:	a332      	add	r3, pc, #200	; (adr r3, 8086ac0 <__ieee754_atan2+0x150>)
 80869f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80869fa:	f001 fbe7 	bl	80881cc <__aeabi_dsub>
 80869fe:	a332      	add	r3, pc, #200	; (adr r3, 8086ac8 <__ieee754_atan2+0x158>)
 8086a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086a04:	f001 fbe2 	bl	80881cc <__aeabi_dsub>
 8086a08:	e005      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a0a:	4610      	mov	r0, r2
 8086a0c:	4619      	mov	r1, r3
 8086a0e:	4632      	mov	r2, r6
 8086a10:	462b      	mov	r3, r5
 8086a12:	f001 fbdd 	bl	80881d0 <__adddf3>
 8086a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086a1a:	2c02      	cmp	r4, #2
 8086a1c:	d014      	beq.n	8086a48 <__ieee754_atan2+0xd8>
 8086a1e:	2c03      	cmp	r4, #3
 8086a20:	d10c      	bne.n	8086a3c <__ieee754_atan2+0xcc>
 8086a22:	482d      	ldr	r0, [pc, #180]	; (8086ad8 <__ieee754_atan2+0x168>)
 8086a24:	492d      	ldr	r1, [pc, #180]	; (8086adc <__ieee754_atan2+0x16c>)
 8086a26:	e7f6      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a28:	f1ba 0f00 	cmp.w	sl, #0
 8086a2c:	482a      	ldr	r0, [pc, #168]	; (8086ad8 <__ieee754_atan2+0x168>)
 8086a2e:	db0e      	blt.n	8086a4e <__ieee754_atan2+0xde>
 8086a30:	492b      	ldr	r1, [pc, #172]	; (8086ae0 <__ieee754_atan2+0x170>)
 8086a32:	e7f0      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086a38:	f001 b91a 	b.w	8087c70 <atan>
 8086a3c:	4629      	mov	r1, r5
 8086a3e:	e7ea      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a40:	a123      	add	r1, pc, #140	; (adr r1, 8086ad0 <__ieee754_atan2+0x160>)
 8086a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086a46:	e7d0      	b.n	80869ea <__ieee754_atan2+0x7a>
 8086a48:	4823      	ldr	r0, [pc, #140]	; (8086ad8 <__ieee754_atan2+0x168>)
 8086a4a:	4926      	ldr	r1, [pc, #152]	; (8086ae4 <__ieee754_atan2+0x174>)
 8086a4c:	e7e3      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a4e:	4926      	ldr	r1, [pc, #152]	; (8086ae8 <__ieee754_atan2+0x178>)
 8086a50:	e7e1      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a52:	45cb      	cmp	fp, r9
 8086a54:	d01f      	beq.n	8086a96 <__ieee754_atan2+0x126>
 8086a56:	2c02      	cmp	r4, #2
 8086a58:	d0f6      	beq.n	8086a48 <__ieee754_atan2+0xd8>
 8086a5a:	2c03      	cmp	r4, #3
 8086a5c:	d0e1      	beq.n	8086a22 <__ieee754_atan2+0xb2>
 8086a5e:	2c01      	cmp	r4, #1
 8086a60:	f04f 0000 	mov.w	r0, #0
 8086a64:	d020      	beq.n	8086aa8 <__ieee754_atan2+0x138>
 8086a66:	4601      	mov	r1, r0
 8086a68:	e7d5      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a6a:	a315      	add	r3, pc, #84	; (adr r3, 8086ac0 <__ieee754_atan2+0x150>)
 8086a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086a70:	f001 fbac 	bl	80881cc <__aeabi_dsub>
 8086a74:	4602      	mov	r2, r0
 8086a76:	460b      	mov	r3, r1
 8086a78:	a113      	add	r1, pc, #76	; (adr r1, 8086ac8 <__ieee754_atan2+0x158>)
 8086a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086a7e:	f001 fba5 	bl	80881cc <__aeabi_dsub>
 8086a82:	e7c8      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a84:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8086a88:	e7c5      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086a8a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
 8086a8e:	daa4      	bge.n	80869da <__ieee754_atan2+0x6a>
 8086a90:	2000      	movs	r0, #0
 8086a92:	2100      	movs	r1, #0
 8086a94:	e7a9      	b.n	80869ea <__ieee754_atan2+0x7a>
 8086a96:	2c02      	cmp	r4, #2
 8086a98:	d00e      	beq.n	8086ab8 <__ieee754_atan2+0x148>
 8086a9a:	2c03      	cmp	r4, #3
 8086a9c:	d009      	beq.n	8086ab2 <__ieee754_atan2+0x142>
 8086a9e:	2c01      	cmp	r4, #1
 8086aa0:	480d      	ldr	r0, [pc, #52]	; (8086ad8 <__ieee754_atan2+0x168>)
 8086aa2:	d004      	beq.n	8086aae <__ieee754_atan2+0x13e>
 8086aa4:	4911      	ldr	r1, [pc, #68]	; (8086aec <__ieee754_atan2+0x17c>)
 8086aa6:	e7b6      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086aa8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8086aac:	e7b3      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086aae:	4910      	ldr	r1, [pc, #64]	; (8086af0 <__ieee754_atan2+0x180>)
 8086ab0:	e7b1      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086ab2:	4810      	ldr	r0, [pc, #64]	; (8086af4 <__ieee754_atan2+0x184>)
 8086ab4:	4910      	ldr	r1, [pc, #64]	; (8086af8 <__ieee754_atan2+0x188>)
 8086ab6:	e7ae      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086ab8:	480e      	ldr	r0, [pc, #56]	; (8086af4 <__ieee754_atan2+0x184>)
 8086aba:	4910      	ldr	r1, [pc, #64]	; (8086afc <__ieee754_atan2+0x18c>)
 8086abc:	e7ab      	b.n	8086a16 <__ieee754_atan2+0xa6>
 8086abe:	bf00      	nop
 8086ac0:	33145c07 	.word	0x33145c07
 8086ac4:	3ca1a626 	.word	0x3ca1a626
 8086ac8:	54442d18 	.word	0x54442d18
 8086acc:	400921fb 	.word	0x400921fb
 8086ad0:	54442d18 	.word	0x54442d18
 8086ad4:	3ff921fb 	.word	0x3ff921fb
 8086ad8:	54442d18 	.word	0x54442d18
 8086adc:	c00921fb 	.word	0xc00921fb
 8086ae0:	3ff921fb 	.word	0x3ff921fb
 8086ae4:	400921fb 	.word	0x400921fb
 8086ae8:	bff921fb 	.word	0xbff921fb
 8086aec:	3fe921fb 	.word	0x3fe921fb
 8086af0:	bfe921fb 	.word	0xbfe921fb
 8086af4:	7f3321d2 	.word	0x7f3321d2
 8086af8:	c002d97c 	.word	0xc002d97c
 8086afc:	4002d97c 	.word	0x4002d97c
 8086b00:	7ff00000 	.word	0x7ff00000
 8086b04:	00000000 	.word	0x00000000

08086b08 <__ieee754_rem_pio2>:
 8086b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086b0c:	4c94      	ldr	r4, [pc, #592]	; (8086d60 <__ieee754_rem_pio2+0x258>)
 8086b0e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8086b12:	42a7      	cmp	r7, r4
 8086b14:	b08f      	sub	sp, #60	; 0x3c
 8086b16:	f340 8081 	ble.w	8086c1c <__ieee754_rem_pio2+0x114>
 8086b1a:	4614      	mov	r4, r2
 8086b1c:	4a91      	ldr	r2, [pc, #580]	; (8086d64 <__ieee754_rem_pio2+0x25c>)
 8086b1e:	460e      	mov	r6, r1
 8086b20:	4297      	cmp	r7, r2
 8086b22:	dc26      	bgt.n	8086b72 <__ieee754_rem_pio2+0x6a>
 8086b24:	a384      	add	r3, pc, #528	; (adr r3, 8086d38 <__ieee754_rem_pio2+0x230>)
 8086b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086b2a:	2900      	cmp	r1, #0
 8086b2c:	f340 81a0 	ble.w	8086e70 <__ieee754_rem_pio2+0x368>
 8086b30:	f001 fb4c 	bl	80881cc <__aeabi_dsub>
 8086b34:	4b8c      	ldr	r3, [pc, #560]	; (8086d68 <__ieee754_rem_pio2+0x260>)
 8086b36:	4680      	mov	r8, r0
 8086b38:	429f      	cmp	r7, r3
 8086b3a:	4689      	mov	r9, r1
 8086b3c:	f000 8083 	beq.w	8086c46 <__ieee754_rem_pio2+0x13e>
 8086b40:	a37f      	add	r3, pc, #508	; (adr r3, 8086d40 <__ieee754_rem_pio2+0x238>)
 8086b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086b46:	f001 fb41 	bl	80881cc <__aeabi_dsub>
 8086b4a:	4602      	mov	r2, r0
 8086b4c:	460b      	mov	r3, r1
 8086b4e:	4640      	mov	r0, r8
 8086b50:	e9c4 2300 	strd	r2, r3, [r4]
 8086b54:	4649      	mov	r1, r9
 8086b56:	f001 fb39 	bl	80881cc <__aeabi_dsub>
 8086b5a:	a379      	add	r3, pc, #484	; (adr r3, 8086d40 <__ieee754_rem_pio2+0x238>)
 8086b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086b60:	f001 fb34 	bl	80881cc <__aeabi_dsub>
 8086b64:	2501      	movs	r5, #1
 8086b66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8086b6a:	4628      	mov	r0, r5
 8086b6c:	b00f      	add	sp, #60	; 0x3c
 8086b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086b72:	4a7e      	ldr	r2, [pc, #504]	; (8086d6c <__ieee754_rem_pio2+0x264>)
 8086b74:	4297      	cmp	r7, r2
 8086b76:	f340 8083 	ble.w	8086c80 <__ieee754_rem_pio2+0x178>
 8086b7a:	4a7d      	ldr	r2, [pc, #500]	; (8086d70 <__ieee754_rem_pio2+0x268>)
 8086b7c:	4297      	cmp	r7, r2
 8086b7e:	dc58      	bgt.n	8086c32 <__ieee754_rem_pio2+0x12a>
 8086b80:	153d      	asrs	r5, r7, #20
 8086b82:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8086b86:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 8086b8a:	468b      	mov	fp, r1
 8086b8c:	4682      	mov	sl, r0
 8086b8e:	f001 ff81 	bl	8088a94 <__aeabi_d2iz>
 8086b92:	f001 fc69 	bl	8088468 <__aeabi_i2d>
 8086b96:	4680      	mov	r8, r0
 8086b98:	4689      	mov	r9, r1
 8086b9a:	4642      	mov	r2, r8
 8086b9c:	464b      	mov	r3, r9
 8086b9e:	4650      	mov	r0, sl
 8086ba0:	4659      	mov	r1, fp
 8086ba2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8086ba6:	f001 fb11 	bl	80881cc <__aeabi_dsub>
 8086baa:	2200      	movs	r2, #0
 8086bac:	4b71      	ldr	r3, [pc, #452]	; (8086d74 <__ieee754_rem_pio2+0x26c>)
 8086bae:	f001 fcc1 	bl	8088534 <__aeabi_dmul>
 8086bb2:	468b      	mov	fp, r1
 8086bb4:	4682      	mov	sl, r0
 8086bb6:	f001 ff6d 	bl	8088a94 <__aeabi_d2iz>
 8086bba:	f001 fc55 	bl	8088468 <__aeabi_i2d>
 8086bbe:	4680      	mov	r8, r0
 8086bc0:	4689      	mov	r9, r1
 8086bc2:	4642      	mov	r2, r8
 8086bc4:	464b      	mov	r3, r9
 8086bc6:	4650      	mov	r0, sl
 8086bc8:	4659      	mov	r1, fp
 8086bca:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8086bce:	f001 fafd 	bl	80881cc <__aeabi_dsub>
 8086bd2:	2200      	movs	r2, #0
 8086bd4:	4b67      	ldr	r3, [pc, #412]	; (8086d74 <__ieee754_rem_pio2+0x26c>)
 8086bd6:	f001 fcad 	bl	8088534 <__aeabi_dmul>
 8086bda:	2200      	movs	r2, #0
 8086bdc:	2300      	movs	r3, #0
 8086bde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8086be2:	f001 ff0f 	bl	8088a04 <__aeabi_dcmpeq>
 8086be6:	2800      	cmp	r0, #0
 8086be8:	f000 816a 	beq.w	8086ec0 <__ieee754_rem_pio2+0x3b8>
 8086bec:	2300      	movs	r3, #0
 8086bee:	4640      	mov	r0, r8
 8086bf0:	4649      	mov	r1, r9
 8086bf2:	2200      	movs	r2, #0
 8086bf4:	f001 ff06 	bl	8088a04 <__aeabi_dcmpeq>
 8086bf8:	2800      	cmp	r0, #0
 8086bfa:	bf14      	ite	ne
 8086bfc:	2301      	movne	r3, #1
 8086bfe:	2302      	moveq	r3, #2
 8086c00:	485d      	ldr	r0, [pc, #372]	; (8086d78 <__ieee754_rem_pio2+0x270>)
 8086c02:	2102      	movs	r1, #2
 8086c04:	9001      	str	r0, [sp, #4]
 8086c06:	9100      	str	r1, [sp, #0]
 8086c08:	462a      	mov	r2, r5
 8086c0a:	4621      	mov	r1, r4
 8086c0c:	a808      	add	r0, sp, #32
 8086c0e:	f000 fb7b 	bl	8087308 <__kernel_rem_pio2>
 8086c12:	2e00      	cmp	r6, #0
 8086c14:	f2c0 814a 	blt.w	8086eac <__ieee754_rem_pio2+0x3a4>
 8086c18:	4605      	mov	r5, r0
 8086c1a:	e006      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086c1c:	e9c2 0100 	strd	r0, r1, [r2]
 8086c20:	2500      	movs	r5, #0
 8086c22:	2400      	movs	r4, #0
 8086c24:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8086c28:	2500      	movs	r5, #0
 8086c2a:	4628      	mov	r0, r5
 8086c2c:	b00f      	add	sp, #60	; 0x3c
 8086c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086c32:	4602      	mov	r2, r0
 8086c34:	460b      	mov	r3, r1
 8086c36:	f001 fac9 	bl	80881cc <__aeabi_dsub>
 8086c3a:	2500      	movs	r5, #0
 8086c3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8086c40:	e9c4 0100 	strd	r0, r1, [r4]
 8086c44:	e7f1      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086c46:	a340      	add	r3, pc, #256	; (adr r3, 8086d48 <__ieee754_rem_pio2+0x240>)
 8086c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c4c:	f001 fabe 	bl	80881cc <__aeabi_dsub>
 8086c50:	a33f      	add	r3, pc, #252	; (adr r3, 8086d50 <__ieee754_rem_pio2+0x248>)
 8086c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c56:	4606      	mov	r6, r0
 8086c58:	460f      	mov	r7, r1
 8086c5a:	f001 fab7 	bl	80881cc <__aeabi_dsub>
 8086c5e:	4602      	mov	r2, r0
 8086c60:	460b      	mov	r3, r1
 8086c62:	4630      	mov	r0, r6
 8086c64:	e9c4 2300 	strd	r2, r3, [r4]
 8086c68:	4639      	mov	r1, r7
 8086c6a:	f001 faaf 	bl	80881cc <__aeabi_dsub>
 8086c6e:	a338      	add	r3, pc, #224	; (adr r3, 8086d50 <__ieee754_rem_pio2+0x248>)
 8086c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c74:	f001 faaa 	bl	80881cc <__aeabi_dsub>
 8086c78:	2501      	movs	r5, #1
 8086c7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8086c7e:	e7d4      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086c80:	f001 f994 	bl	8087fac <fabs>
 8086c84:	a334      	add	r3, pc, #208	; (adr r3, 8086d58 <__ieee754_rem_pio2+0x250>)
 8086c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086c8a:	4680      	mov	r8, r0
 8086c8c:	4689      	mov	r9, r1
 8086c8e:	f001 fc51 	bl	8088534 <__aeabi_dmul>
 8086c92:	2200      	movs	r2, #0
 8086c94:	4b39      	ldr	r3, [pc, #228]	; (8086d7c <__ieee754_rem_pio2+0x274>)
 8086c96:	f001 fa9b 	bl	80881d0 <__adddf3>
 8086c9a:	f001 fefb 	bl	8088a94 <__aeabi_d2iz>
 8086c9e:	4605      	mov	r5, r0
 8086ca0:	f001 fbe2 	bl	8088468 <__aeabi_i2d>
 8086ca4:	a324      	add	r3, pc, #144	; (adr r3, 8086d38 <__ieee754_rem_pio2+0x230>)
 8086ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086caa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086cae:	f001 fc41 	bl	8088534 <__aeabi_dmul>
 8086cb2:	4602      	mov	r2, r0
 8086cb4:	460b      	mov	r3, r1
 8086cb6:	4640      	mov	r0, r8
 8086cb8:	4649      	mov	r1, r9
 8086cba:	f001 fa87 	bl	80881cc <__aeabi_dsub>
 8086cbe:	a320      	add	r3, pc, #128	; (adr r3, 8086d40 <__ieee754_rem_pio2+0x238>)
 8086cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086cc4:	4682      	mov	sl, r0
 8086cc6:	468b      	mov	fp, r1
 8086cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8086ccc:	f001 fc32 	bl	8088534 <__aeabi_dmul>
 8086cd0:	2d1f      	cmp	r5, #31
 8086cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086cd6:	dc55      	bgt.n	8086d84 <__ieee754_rem_pio2+0x27c>
 8086cd8:	4b29      	ldr	r3, [pc, #164]	; (8086d80 <__ieee754_rem_pio2+0x278>)
 8086cda:	1e6a      	subs	r2, r5, #1
 8086cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8086ce0:	429f      	cmp	r7, r3
 8086ce2:	d04f      	beq.n	8086d84 <__ieee754_rem_pio2+0x27c>
 8086ce4:	4602      	mov	r2, r0
 8086ce6:	460b      	mov	r3, r1
 8086ce8:	4650      	mov	r0, sl
 8086cea:	4659      	mov	r1, fp
 8086cec:	f001 fa6e 	bl	80881cc <__aeabi_dsub>
 8086cf0:	4602      	mov	r2, r0
 8086cf2:	460b      	mov	r3, r1
 8086cf4:	4681      	mov	r9, r0
 8086cf6:	4688      	mov	r8, r1
 8086cf8:	e9c4 2300 	strd	r2, r3, [r4]
 8086cfc:	464a      	mov	r2, r9
 8086cfe:	4643      	mov	r3, r8
 8086d00:	4650      	mov	r0, sl
 8086d02:	4659      	mov	r1, fp
 8086d04:	f001 fa62 	bl	80881cc <__aeabi_dsub>
 8086d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086d0c:	f001 fa5e 	bl	80881cc <__aeabi_dsub>
 8086d10:	4602      	mov	r2, r0
 8086d12:	460b      	mov	r3, r1
 8086d14:	2e00      	cmp	r6, #0
 8086d16:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8086d1a:	da86      	bge.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086d1c:	464a      	mov	r2, r9
 8086d1e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8086d22:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8086d26:	e884 000c 	stmia.w	r4, {r2, r3}
 8086d2a:	60e1      	str	r1, [r4, #12]
 8086d2c:	60a0      	str	r0, [r4, #8]
 8086d2e:	426d      	negs	r5, r5
 8086d30:	e77b      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086d32:	bf00      	nop
 8086d34:	f3af 8000 	nop.w
 8086d38:	54400000 	.word	0x54400000
 8086d3c:	3ff921fb 	.word	0x3ff921fb
 8086d40:	1a626331 	.word	0x1a626331
 8086d44:	3dd0b461 	.word	0x3dd0b461
 8086d48:	1a600000 	.word	0x1a600000
 8086d4c:	3dd0b461 	.word	0x3dd0b461
 8086d50:	2e037073 	.word	0x2e037073
 8086d54:	3ba3198a 	.word	0x3ba3198a
 8086d58:	6dc9c883 	.word	0x6dc9c883
 8086d5c:	3fe45f30 	.word	0x3fe45f30
 8086d60:	3fe921fb 	.word	0x3fe921fb
 8086d64:	4002d97b 	.word	0x4002d97b
 8086d68:	3ff921fb 	.word	0x3ff921fb
 8086d6c:	413921fb 	.word	0x413921fb
 8086d70:	7fefffff 	.word	0x7fefffff
 8086d74:	41700000 	.word	0x41700000
 8086d78:	0808bc74 	.word	0x0808bc74
 8086d7c:	3fe00000 	.word	0x3fe00000
 8086d80:	0808bbf4 	.word	0x0808bbf4
 8086d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8086d88:	4650      	mov	r0, sl
 8086d8a:	4659      	mov	r1, fp
 8086d8c:	f001 fa1e 	bl	80881cc <__aeabi_dsub>
 8086d90:	153f      	asrs	r7, r7, #20
 8086d92:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8086d96:	1afb      	subs	r3, r7, r3
 8086d98:	2b10      	cmp	r3, #16
 8086d9a:	4681      	mov	r9, r0
 8086d9c:	4688      	mov	r8, r1
 8086d9e:	e9c4 0100 	strd	r0, r1, [r4]
 8086da2:	ddab      	ble.n	8086cfc <__ieee754_rem_pio2+0x1f4>
 8086da4:	a358      	add	r3, pc, #352	; (adr r3, 8086f08 <__ieee754_rem_pio2+0x400>)
 8086da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8086dae:	f001 fbc1 	bl	8088534 <__aeabi_dmul>
 8086db2:	4680      	mov	r8, r0
 8086db4:	4689      	mov	r9, r1
 8086db6:	4602      	mov	r2, r0
 8086db8:	460b      	mov	r3, r1
 8086dba:	4650      	mov	r0, sl
 8086dbc:	4659      	mov	r1, fp
 8086dbe:	f001 fa05 	bl	80881cc <__aeabi_dsub>
 8086dc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8086dc6:	4602      	mov	r2, r0
 8086dc8:	460b      	mov	r3, r1
 8086dca:	4650      	mov	r0, sl
 8086dcc:	4659      	mov	r1, fp
 8086dce:	f001 f9fd 	bl	80881cc <__aeabi_dsub>
 8086dd2:	4642      	mov	r2, r8
 8086dd4:	464b      	mov	r3, r9
 8086dd6:	f001 f9f9 	bl	80881cc <__aeabi_dsub>
 8086dda:	a34d      	add	r3, pc, #308	; (adr r3, 8086f10 <__ieee754_rem_pio2+0x408>)
 8086ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086de0:	4680      	mov	r8, r0
 8086de2:	4689      	mov	r9, r1
 8086de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8086de8:	f001 fba4 	bl	8088534 <__aeabi_dmul>
 8086dec:	4642      	mov	r2, r8
 8086dee:	464b      	mov	r3, r9
 8086df0:	f001 f9ec 	bl	80881cc <__aeabi_dsub>
 8086df4:	4602      	mov	r2, r0
 8086df6:	460b      	mov	r3, r1
 8086df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8086e00:	f001 f9e4 	bl	80881cc <__aeabi_dsub>
 8086e04:	460b      	mov	r3, r1
 8086e06:	4602      	mov	r2, r0
 8086e08:	4688      	mov	r8, r1
 8086e0a:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8086e0e:	1a7f      	subs	r7, r7, r1
 8086e10:	2f31      	cmp	r7, #49	; 0x31
 8086e12:	4681      	mov	r9, r0
 8086e14:	e9c4 2300 	strd	r2, r3, [r4]
 8086e18:	dd72      	ble.n	8086f00 <__ieee754_rem_pio2+0x3f8>
 8086e1a:	a33f      	add	r3, pc, #252	; (adr r3, 8086f18 <__ieee754_rem_pio2+0x410>)
 8086e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086e20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8086e24:	f001 fb86 	bl	8088534 <__aeabi_dmul>
 8086e28:	4680      	mov	r8, r0
 8086e2a:	4689      	mov	r9, r1
 8086e2c:	4602      	mov	r2, r0
 8086e2e:	460b      	mov	r3, r1
 8086e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8086e34:	f001 f9ca 	bl	80881cc <__aeabi_dsub>
 8086e38:	4602      	mov	r2, r0
 8086e3a:	460b      	mov	r3, r1
 8086e3c:	4682      	mov	sl, r0
 8086e3e:	468b      	mov	fp, r1
 8086e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8086e44:	f001 f9c2 	bl	80881cc <__aeabi_dsub>
 8086e48:	4642      	mov	r2, r8
 8086e4a:	464b      	mov	r3, r9
 8086e4c:	f001 f9be 	bl	80881cc <__aeabi_dsub>
 8086e50:	a333      	add	r3, pc, #204	; (adr r3, 8086f20 <__ieee754_rem_pio2+0x418>)
 8086e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086e56:	4680      	mov	r8, r0
 8086e58:	4689      	mov	r9, r1
 8086e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8086e5e:	f001 fb69 	bl	8088534 <__aeabi_dmul>
 8086e62:	4642      	mov	r2, r8
 8086e64:	464b      	mov	r3, r9
 8086e66:	f001 f9b1 	bl	80881cc <__aeabi_dsub>
 8086e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086e6e:	e739      	b.n	8086ce4 <__ieee754_rem_pio2+0x1dc>
 8086e70:	f001 f9ae 	bl	80881d0 <__adddf3>
 8086e74:	4b2e      	ldr	r3, [pc, #184]	; (8086f30 <__ieee754_rem_pio2+0x428>)
 8086e76:	4680      	mov	r8, r0
 8086e78:	429f      	cmp	r7, r3
 8086e7a:	4689      	mov	r9, r1
 8086e7c:	d022      	beq.n	8086ec4 <__ieee754_rem_pio2+0x3bc>
 8086e7e:	a32a      	add	r3, pc, #168	; (adr r3, 8086f28 <__ieee754_rem_pio2+0x420>)
 8086e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086e84:	f001 f9a4 	bl	80881d0 <__adddf3>
 8086e88:	4602      	mov	r2, r0
 8086e8a:	460b      	mov	r3, r1
 8086e8c:	4640      	mov	r0, r8
 8086e8e:	e9c4 2300 	strd	r2, r3, [r4]
 8086e92:	4649      	mov	r1, r9
 8086e94:	f001 f99a 	bl	80881cc <__aeabi_dsub>
 8086e98:	a323      	add	r3, pc, #140	; (adr r3, 8086f28 <__ieee754_rem_pio2+0x420>)
 8086e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086e9e:	f001 f997 	bl	80881d0 <__adddf3>
 8086ea2:	f04f 35ff 	mov.w	r5, #4294967295
 8086ea6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8086eaa:	e6be      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086eac:	6862      	ldr	r2, [r4, #4]
 8086eae:	68e3      	ldr	r3, [r4, #12]
 8086eb0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8086eb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8086eb8:	4245      	negs	r5, r0
 8086eba:	6062      	str	r2, [r4, #4]
 8086ebc:	60e3      	str	r3, [r4, #12]
 8086ebe:	e6b4      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086ec0:	2303      	movs	r3, #3
 8086ec2:	e69d      	b.n	8086c00 <__ieee754_rem_pio2+0xf8>
 8086ec4:	a310      	add	r3, pc, #64	; (adr r3, 8086f08 <__ieee754_rem_pio2+0x400>)
 8086ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086eca:	f001 f981 	bl	80881d0 <__adddf3>
 8086ece:	a310      	add	r3, pc, #64	; (adr r3, 8086f10 <__ieee754_rem_pio2+0x408>)
 8086ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086ed4:	4606      	mov	r6, r0
 8086ed6:	460f      	mov	r7, r1
 8086ed8:	f001 f97a 	bl	80881d0 <__adddf3>
 8086edc:	4602      	mov	r2, r0
 8086ede:	460b      	mov	r3, r1
 8086ee0:	4630      	mov	r0, r6
 8086ee2:	e9c4 2300 	strd	r2, r3, [r4]
 8086ee6:	4639      	mov	r1, r7
 8086ee8:	f001 f970 	bl	80881cc <__aeabi_dsub>
 8086eec:	a308      	add	r3, pc, #32	; (adr r3, 8086f10 <__ieee754_rem_pio2+0x408>)
 8086eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086ef2:	f001 f96d 	bl	80881d0 <__adddf3>
 8086ef6:	f04f 35ff 	mov.w	r5, #4294967295
 8086efa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8086efe:	e694      	b.n	8086c2a <__ieee754_rem_pio2+0x122>
 8086f00:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8086f04:	e6fa      	b.n	8086cfc <__ieee754_rem_pio2+0x1f4>
 8086f06:	bf00      	nop
 8086f08:	1a600000 	.word	0x1a600000
 8086f0c:	3dd0b461 	.word	0x3dd0b461
 8086f10:	2e037073 	.word	0x2e037073
 8086f14:	3ba3198a 	.word	0x3ba3198a
 8086f18:	2e000000 	.word	0x2e000000
 8086f1c:	3ba3198a 	.word	0x3ba3198a
 8086f20:	252049c1 	.word	0x252049c1
 8086f24:	397b839a 	.word	0x397b839a
 8086f28:	1a626331 	.word	0x1a626331
 8086f2c:	3dd0b461 	.word	0x3dd0b461
 8086f30:	3ff921fb 	.word	0x3ff921fb

08086f34 <__ieee754_sqrt>:
 8086f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086f38:	4e5f      	ldr	r6, [pc, #380]	; (80870b8 <__ieee754_sqrt+0x184>)
 8086f3a:	460c      	mov	r4, r1
 8086f3c:	46b6      	mov	lr, r6
 8086f3e:	400e      	ands	r6, r1
 8086f40:	4576      	cmp	r6, lr
 8086f42:	4605      	mov	r5, r0
 8086f44:	f000 8098 	beq.w	8087078 <__ieee754_sqrt+0x144>
 8086f48:	2900      	cmp	r1, #0
 8086f4a:	460b      	mov	r3, r1
 8086f4c:	4602      	mov	r2, r0
 8086f4e:	dd74      	ble.n	808703a <__ieee754_sqrt+0x106>
 8086f50:	ea5f 5e21 	movs.w	lr, r1, asr #20
 8086f54:	d07f      	beq.n	8087056 <__ieee754_sqrt+0x122>
 8086f56:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 8086f5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8086f5e:	f01e 0f01 	tst.w	lr, #1
 8086f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8086f66:	d163      	bne.n	8087030 <__ieee754_sqrt+0xfc>
 8086f68:	2700      	movs	r7, #0
 8086f6a:	463e      	mov	r6, r7
 8086f6c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8086f70:	440b      	add	r3, r1
 8086f72:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8086f76:	0052      	lsls	r2, r2, #1
 8086f78:	2016      	movs	r0, #22
 8086f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8086f7e:	1874      	adds	r4, r6, r1
 8086f80:	429c      	cmp	r4, r3
 8086f82:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8086f86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8086f8a:	dc02      	bgt.n	8086f92 <__ieee754_sqrt+0x5e>
 8086f8c:	1b1b      	subs	r3, r3, r4
 8086f8e:	1866      	adds	r6, r4, r1
 8086f90:	440f      	add	r7, r1
 8086f92:	3801      	subs	r0, #1
 8086f94:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8086f98:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8086f9c:	d1ef      	bne.n	8086f7e <__ieee754_sqrt+0x4a>
 8086f9e:	4684      	mov	ip, r0
 8086fa0:	2420      	movs	r4, #32
 8086fa2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8086fa6:	e009      	b.n	8086fbc <__ieee754_sqrt+0x88>
 8086fa8:	d020      	beq.n	8086fec <__ieee754_sqrt+0xb8>
 8086faa:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8086fae:	3c01      	subs	r4, #1
 8086fb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8086fb4:	442b      	add	r3, r5
 8086fb6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8086fba:	d020      	beq.n	8086ffe <__ieee754_sqrt+0xca>
 8086fbc:	429e      	cmp	r6, r3
 8086fbe:	eb01 050c 	add.w	r5, r1, ip
 8086fc2:	daf1      	bge.n	8086fa8 <__ieee754_sqrt+0x74>
 8086fc4:	2d00      	cmp	r5, #0
 8086fc6:	eb05 0c01 	add.w	ip, r5, r1
 8086fca:	db09      	blt.n	8086fe0 <__ieee754_sqrt+0xac>
 8086fcc:	46b0      	mov	r8, r6
 8086fce:	4295      	cmp	r5, r2
 8086fd0:	eba3 0306 	sub.w	r3, r3, r6
 8086fd4:	d900      	bls.n	8086fd8 <__ieee754_sqrt+0xa4>
 8086fd6:	3b01      	subs	r3, #1
 8086fd8:	4646      	mov	r6, r8
 8086fda:	1b52      	subs	r2, r2, r5
 8086fdc:	4408      	add	r0, r1
 8086fde:	e7e4      	b.n	8086faa <__ieee754_sqrt+0x76>
 8086fe0:	f1bc 0f00 	cmp.w	ip, #0
 8086fe4:	dbf2      	blt.n	8086fcc <__ieee754_sqrt+0x98>
 8086fe6:	f106 0801 	add.w	r8, r6, #1
 8086fea:	e7f0      	b.n	8086fce <__ieee754_sqrt+0x9a>
 8086fec:	4295      	cmp	r5, r2
 8086fee:	d817      	bhi.n	8087020 <__ieee754_sqrt+0xec>
 8086ff0:	2d00      	cmp	r5, #0
 8086ff2:	eb05 0c01 	add.w	ip, r5, r1
 8086ff6:	db49      	blt.n	808708c <__ieee754_sqrt+0x158>
 8086ff8:	4698      	mov	r8, r3
 8086ffa:	2300      	movs	r3, #0
 8086ffc:	e7ec      	b.n	8086fd8 <__ieee754_sqrt+0xa4>
 8086ffe:	4313      	orrs	r3, r2
 8087000:	d110      	bne.n	8087024 <__ieee754_sqrt+0xf0>
 8087002:	0840      	lsrs	r0, r0, #1
 8087004:	107b      	asrs	r3, r7, #1
 8087006:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 808700a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 808700e:	07fa      	lsls	r2, r7, #31
 8087010:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8087014:	4639      	mov	r1, r7
 8087016:	bf48      	it	mi
 8087018:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 808701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087020:	4633      	mov	r3, r6
 8087022:	e7c2      	b.n	8086faa <__ieee754_sqrt+0x76>
 8087024:	1c41      	adds	r1, r0, #1
 8087026:	d035      	beq.n	8087094 <__ieee754_sqrt+0x160>
 8087028:	f000 0301 	and.w	r3, r0, #1
 808702c:	4418      	add	r0, r3
 808702e:	e7e8      	b.n	8087002 <__ieee754_sqrt+0xce>
 8087030:	005b      	lsls	r3, r3, #1
 8087032:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8087036:	0052      	lsls	r2, r2, #1
 8087038:	e796      	b.n	8086f68 <__ieee754_sqrt+0x34>
 808703a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 808703e:	4306      	orrs	r6, r0
 8087040:	d0ec      	beq.n	808701c <__ieee754_sqrt+0xe8>
 8087042:	bb79      	cbnz	r1, 80870a4 <__ieee754_sqrt+0x170>
 8087044:	468e      	mov	lr, r1
 8087046:	0ad3      	lsrs	r3, r2, #11
 8087048:	f1ae 0e15 	sub.w	lr, lr, #21
 808704c:	0552      	lsls	r2, r2, #21
 808704e:	2b00      	cmp	r3, #0
 8087050:	d0f9      	beq.n	8087046 <__ieee754_sqrt+0x112>
 8087052:	02dd      	lsls	r5, r3, #11
 8087054:	d421      	bmi.n	808709a <__ieee754_sqrt+0x166>
 8087056:	2100      	movs	r1, #0
 8087058:	e000      	b.n	808705c <__ieee754_sqrt+0x128>
 808705a:	4601      	mov	r1, r0
 808705c:	005b      	lsls	r3, r3, #1
 808705e:	02dc      	lsls	r4, r3, #11
 8087060:	f101 0001 	add.w	r0, r1, #1
 8087064:	d5f9      	bpl.n	808705a <__ieee754_sqrt+0x126>
 8087066:	f1c0 0420 	rsb	r4, r0, #32
 808706a:	fa22 f404 	lsr.w	r4, r2, r4
 808706e:	4323      	orrs	r3, r4
 8087070:	ebc1 0e0e 	rsb	lr, r1, lr
 8087074:	4082      	lsls	r2, r0
 8087076:	e76e      	b.n	8086f56 <__ieee754_sqrt+0x22>
 8087078:	4602      	mov	r2, r0
 808707a:	460b      	mov	r3, r1
 808707c:	f001 fa5a 	bl	8088534 <__aeabi_dmul>
 8087080:	462a      	mov	r2, r5
 8087082:	4623      	mov	r3, r4
 8087084:	f001 f8a4 	bl	80881d0 <__adddf3>
 8087088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808708c:	f1bc 0f00 	cmp.w	ip, #0
 8087090:	daa9      	bge.n	8086fe6 <__ieee754_sqrt+0xb2>
 8087092:	e7b1      	b.n	8086ff8 <__ieee754_sqrt+0xc4>
 8087094:	3701      	adds	r7, #1
 8087096:	4620      	mov	r0, r4
 8087098:	e7b4      	b.n	8087004 <__ieee754_sqrt+0xd0>
 808709a:	2420      	movs	r4, #32
 808709c:	f04f 31ff 	mov.w	r1, #4294967295
 80870a0:	2000      	movs	r0, #0
 80870a2:	e7e2      	b.n	808706a <__ieee754_sqrt+0x136>
 80870a4:	4602      	mov	r2, r0
 80870a6:	460b      	mov	r3, r1
 80870a8:	f001 f890 	bl	80881cc <__aeabi_dsub>
 80870ac:	4602      	mov	r2, r0
 80870ae:	460b      	mov	r3, r1
 80870b0:	f001 fb6a 	bl	8088788 <__aeabi_ddiv>
 80870b4:	e7b2      	b.n	808701c <__ieee754_sqrt+0xe8>
 80870b6:	bf00      	nop
 80870b8:	7ff00000 	.word	0x7ff00000
 80870bc:	00000000 	.word	0x00000000

080870c0 <__kernel_cos>:
 80870c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80870c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80870c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80870cc:	b085      	sub	sp, #20
 80870ce:	460c      	mov	r4, r1
 80870d0:	4692      	mov	sl, r2
 80870d2:	469b      	mov	fp, r3
 80870d4:	4605      	mov	r5, r0
 80870d6:	da6b      	bge.n	80871b0 <__kernel_cos+0xf0>
 80870d8:	f001 fcdc 	bl	8088a94 <__aeabi_d2iz>
 80870dc:	2800      	cmp	r0, #0
 80870de:	f000 80e7 	beq.w	80872b0 <__kernel_cos+0x1f0>
 80870e2:	462a      	mov	r2, r5
 80870e4:	4623      	mov	r3, r4
 80870e6:	4628      	mov	r0, r5
 80870e8:	4621      	mov	r1, r4
 80870ea:	f001 fa23 	bl	8088534 <__aeabi_dmul>
 80870ee:	a374      	add	r3, pc, #464	; (adr r3, 80872c0 <__kernel_cos+0x200>)
 80870f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80870f4:	4680      	mov	r8, r0
 80870f6:	4689      	mov	r9, r1
 80870f8:	f001 fa1c 	bl	8088534 <__aeabi_dmul>
 80870fc:	a372      	add	r3, pc, #456	; (adr r3, 80872c8 <__kernel_cos+0x208>)
 80870fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087102:	f001 f865 	bl	80881d0 <__adddf3>
 8087106:	4642      	mov	r2, r8
 8087108:	464b      	mov	r3, r9
 808710a:	f001 fa13 	bl	8088534 <__aeabi_dmul>
 808710e:	a370      	add	r3, pc, #448	; (adr r3, 80872d0 <__kernel_cos+0x210>)
 8087110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087114:	f001 f85a 	bl	80881cc <__aeabi_dsub>
 8087118:	4642      	mov	r2, r8
 808711a:	464b      	mov	r3, r9
 808711c:	f001 fa0a 	bl	8088534 <__aeabi_dmul>
 8087120:	a36d      	add	r3, pc, #436	; (adr r3, 80872d8 <__kernel_cos+0x218>)
 8087122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087126:	f001 f853 	bl	80881d0 <__adddf3>
 808712a:	4642      	mov	r2, r8
 808712c:	464b      	mov	r3, r9
 808712e:	f001 fa01 	bl	8088534 <__aeabi_dmul>
 8087132:	a36b      	add	r3, pc, #428	; (adr r3, 80872e0 <__kernel_cos+0x220>)
 8087134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087138:	f001 f848 	bl	80881cc <__aeabi_dsub>
 808713c:	4642      	mov	r2, r8
 808713e:	464b      	mov	r3, r9
 8087140:	f001 f9f8 	bl	8088534 <__aeabi_dmul>
 8087144:	a368      	add	r3, pc, #416	; (adr r3, 80872e8 <__kernel_cos+0x228>)
 8087146:	e9d3 2300 	ldrd	r2, r3, [r3]
 808714a:	f001 f841 	bl	80881d0 <__adddf3>
 808714e:	4642      	mov	r2, r8
 8087150:	464b      	mov	r3, r9
 8087152:	f001 f9ef 	bl	8088534 <__aeabi_dmul>
 8087156:	e9cd 0100 	strd	r0, r1, [sp]
 808715a:	2200      	movs	r2, #0
 808715c:	4b64      	ldr	r3, [pc, #400]	; (80872f0 <__kernel_cos+0x230>)
 808715e:	4640      	mov	r0, r8
 8087160:	4649      	mov	r1, r9
 8087162:	f001 f9e7 	bl	8088534 <__aeabi_dmul>
 8087166:	e9dd 2300 	ldrd	r2, r3, [sp]
 808716a:	4606      	mov	r6, r0
 808716c:	460f      	mov	r7, r1
 808716e:	4640      	mov	r0, r8
 8087170:	4649      	mov	r1, r9
 8087172:	f001 f9df 	bl	8088534 <__aeabi_dmul>
 8087176:	4652      	mov	r2, sl
 8087178:	4680      	mov	r8, r0
 808717a:	4689      	mov	r9, r1
 808717c:	465b      	mov	r3, fp
 808717e:	4628      	mov	r0, r5
 8087180:	4621      	mov	r1, r4
 8087182:	f001 f9d7 	bl	8088534 <__aeabi_dmul>
 8087186:	4602      	mov	r2, r0
 8087188:	460b      	mov	r3, r1
 808718a:	4640      	mov	r0, r8
 808718c:	4649      	mov	r1, r9
 808718e:	f001 f81d 	bl	80881cc <__aeabi_dsub>
 8087192:	4602      	mov	r2, r0
 8087194:	460b      	mov	r3, r1
 8087196:	4630      	mov	r0, r6
 8087198:	4639      	mov	r1, r7
 808719a:	f001 f817 	bl	80881cc <__aeabi_dsub>
 808719e:	4602      	mov	r2, r0
 80871a0:	460b      	mov	r3, r1
 80871a2:	2000      	movs	r0, #0
 80871a4:	4953      	ldr	r1, [pc, #332]	; (80872f4 <__kernel_cos+0x234>)
 80871a6:	f001 f811 	bl	80881cc <__aeabi_dsub>
 80871aa:	b005      	add	sp, #20
 80871ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80871b0:	4602      	mov	r2, r0
 80871b2:	460b      	mov	r3, r1
 80871b4:	f001 f9be 	bl	8088534 <__aeabi_dmul>
 80871b8:	a341      	add	r3, pc, #260	; (adr r3, 80872c0 <__kernel_cos+0x200>)
 80871ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80871be:	4680      	mov	r8, r0
 80871c0:	4689      	mov	r9, r1
 80871c2:	f001 f9b7 	bl	8088534 <__aeabi_dmul>
 80871c6:	a340      	add	r3, pc, #256	; (adr r3, 80872c8 <__kernel_cos+0x208>)
 80871c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80871cc:	f001 f800 	bl	80881d0 <__adddf3>
 80871d0:	4642      	mov	r2, r8
 80871d2:	464b      	mov	r3, r9
 80871d4:	f001 f9ae 	bl	8088534 <__aeabi_dmul>
 80871d8:	a33d      	add	r3, pc, #244	; (adr r3, 80872d0 <__kernel_cos+0x210>)
 80871da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80871de:	f000 fff5 	bl	80881cc <__aeabi_dsub>
 80871e2:	4642      	mov	r2, r8
 80871e4:	464b      	mov	r3, r9
 80871e6:	f001 f9a5 	bl	8088534 <__aeabi_dmul>
 80871ea:	a33b      	add	r3, pc, #236	; (adr r3, 80872d8 <__kernel_cos+0x218>)
 80871ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80871f0:	f000 ffee 	bl	80881d0 <__adddf3>
 80871f4:	4642      	mov	r2, r8
 80871f6:	464b      	mov	r3, r9
 80871f8:	f001 f99c 	bl	8088534 <__aeabi_dmul>
 80871fc:	a338      	add	r3, pc, #224	; (adr r3, 80872e0 <__kernel_cos+0x220>)
 80871fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087202:	f000 ffe3 	bl	80881cc <__aeabi_dsub>
 8087206:	4642      	mov	r2, r8
 8087208:	464b      	mov	r3, r9
 808720a:	f001 f993 	bl	8088534 <__aeabi_dmul>
 808720e:	a336      	add	r3, pc, #216	; (adr r3, 80872e8 <__kernel_cos+0x228>)
 8087210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087214:	f000 ffdc 	bl	80881d0 <__adddf3>
 8087218:	464b      	mov	r3, r9
 808721a:	4642      	mov	r2, r8
 808721c:	f001 f98a 	bl	8088534 <__aeabi_dmul>
 8087220:	4b35      	ldr	r3, [pc, #212]	; (80872f8 <__kernel_cos+0x238>)
 8087222:	e9cd 0100 	strd	r0, r1, [sp]
 8087226:	429e      	cmp	r6, r3
 8087228:	dd97      	ble.n	808715a <__kernel_cos+0x9a>
 808722a:	4b34      	ldr	r3, [pc, #208]	; (80872fc <__kernel_cos+0x23c>)
 808722c:	2200      	movs	r2, #0
 808722e:	429e      	cmp	r6, r3
 8087230:	dc38      	bgt.n	80872a4 <__kernel_cos+0x1e4>
 8087232:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8087236:	2000      	movs	r0, #0
 8087238:	492e      	ldr	r1, [pc, #184]	; (80872f4 <__kernel_cos+0x234>)
 808723a:	4616      	mov	r6, r2
 808723c:	461f      	mov	r7, r3
 808723e:	f000 ffc5 	bl	80881cc <__aeabi_dsub>
 8087242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8087246:	2200      	movs	r2, #0
 8087248:	4b29      	ldr	r3, [pc, #164]	; (80872f0 <__kernel_cos+0x230>)
 808724a:	4640      	mov	r0, r8
 808724c:	4649      	mov	r1, r9
 808724e:	f001 f971 	bl	8088534 <__aeabi_dmul>
 8087252:	4632      	mov	r2, r6
 8087254:	463b      	mov	r3, r7
 8087256:	f000 ffb9 	bl	80881cc <__aeabi_dsub>
 808725a:	e9dd 2300 	ldrd	r2, r3, [sp]
 808725e:	4606      	mov	r6, r0
 8087260:	460f      	mov	r7, r1
 8087262:	4640      	mov	r0, r8
 8087264:	4649      	mov	r1, r9
 8087266:	f001 f965 	bl	8088534 <__aeabi_dmul>
 808726a:	4652      	mov	r2, sl
 808726c:	4680      	mov	r8, r0
 808726e:	4689      	mov	r9, r1
 8087270:	465b      	mov	r3, fp
 8087272:	4628      	mov	r0, r5
 8087274:	4621      	mov	r1, r4
 8087276:	f001 f95d 	bl	8088534 <__aeabi_dmul>
 808727a:	4602      	mov	r2, r0
 808727c:	460b      	mov	r3, r1
 808727e:	4640      	mov	r0, r8
 8087280:	4649      	mov	r1, r9
 8087282:	f000 ffa3 	bl	80881cc <__aeabi_dsub>
 8087286:	4602      	mov	r2, r0
 8087288:	460b      	mov	r3, r1
 808728a:	4630      	mov	r0, r6
 808728c:	4639      	mov	r1, r7
 808728e:	f000 ff9d 	bl	80881cc <__aeabi_dsub>
 8087292:	4602      	mov	r2, r0
 8087294:	460b      	mov	r3, r1
 8087296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808729a:	f000 ff97 	bl	80881cc <__aeabi_dsub>
 808729e:	b005      	add	sp, #20
 80872a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80872a4:	4b16      	ldr	r3, [pc, #88]	; (8087300 <__kernel_cos+0x240>)
 80872a6:	2600      	movs	r6, #0
 80872a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80872ac:	4f15      	ldr	r7, [pc, #84]	; (8087304 <__kernel_cos+0x244>)
 80872ae:	e7ca      	b.n	8087246 <__kernel_cos+0x186>
 80872b0:	4910      	ldr	r1, [pc, #64]	; (80872f4 <__kernel_cos+0x234>)
 80872b2:	2000      	movs	r0, #0
 80872b4:	b005      	add	sp, #20
 80872b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80872ba:	bf00      	nop
 80872bc:	f3af 8000 	nop.w
 80872c0:	be8838d4 	.word	0xbe8838d4
 80872c4:	bda8fae9 	.word	0xbda8fae9
 80872c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80872cc:	3e21ee9e 	.word	0x3e21ee9e
 80872d0:	809c52ad 	.word	0x809c52ad
 80872d4:	3e927e4f 	.word	0x3e927e4f
 80872d8:	19cb1590 	.word	0x19cb1590
 80872dc:	3efa01a0 	.word	0x3efa01a0
 80872e0:	16c15177 	.word	0x16c15177
 80872e4:	3f56c16c 	.word	0x3f56c16c
 80872e8:	5555554c 	.word	0x5555554c
 80872ec:	3fa55555 	.word	0x3fa55555
 80872f0:	3fe00000 	.word	0x3fe00000
 80872f4:	3ff00000 	.word	0x3ff00000
 80872f8:	3fd33332 	.word	0x3fd33332
 80872fc:	3fe90000 	.word	0x3fe90000
 8087300:	3fe70000 	.word	0x3fe70000
 8087304:	3fd20000 	.word	0x3fd20000

08087308 <__kernel_rem_pio2>:
 8087308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808730c:	4c7a      	ldr	r4, [pc, #488]	; (80874f8 <__kernel_rem_pio2+0x1f0>)
 808730e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8087312:	461f      	mov	r7, r3
 8087314:	930c      	str	r3, [sp, #48]	; 0x30
 8087316:	1ed3      	subs	r3, r2, #3
 8087318:	fb84 5403 	smull	r5, r4, r4, r3
 808731c:	17db      	asrs	r3, r3, #31
 808731e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8087322:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 8087324:	4c75      	ldr	r4, [pc, #468]	; (80874fc <__kernel_rem_pio2+0x1f4>)
 8087326:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 808732a:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 808732e:	1c6b      	adds	r3, r5, #1
 8087330:	4626      	mov	r6, r4
 8087332:	9409      	str	r4, [sp, #36]	; 0x24
 8087334:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8087338:	1e7c      	subs	r4, r7, #1
 808733a:	950d      	str	r5, [sp, #52]	; 0x34
 808733c:	9402      	str	r4, [sp, #8]
 808733e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8087342:	1b2d      	subs	r5, r5, r4
 8087344:	1934      	adds	r4, r6, r4
 8087346:	9004      	str	r0, [sp, #16]
 8087348:	910a      	str	r1, [sp, #40]	; 0x28
 808734a:	9308      	str	r3, [sp, #32]
 808734c:	d416      	bmi.n	808737c <__kernel_rem_pio2+0x74>
 808734e:	442c      	add	r4, r5
 8087350:	3401      	adds	r4, #1
 8087352:	ae22      	add	r6, sp, #136	; 0x88
 8087354:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 8087356:	e008      	b.n	808736a <__kernel_rem_pio2+0x62>
 8087358:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 808735c:	f001 f884 	bl	8088468 <__aeabi_i2d>
 8087360:	3501      	adds	r5, #1
 8087362:	42a5      	cmp	r5, r4
 8087364:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8087368:	d008      	beq.n	808737c <__kernel_rem_pio2+0x74>
 808736a:	2d00      	cmp	r5, #0
 808736c:	daf4      	bge.n	8087358 <__kernel_rem_pio2+0x50>
 808736e:	3501      	adds	r5, #1
 8087370:	2000      	movs	r0, #0
 8087372:	2100      	movs	r1, #0
 8087374:	42a5      	cmp	r5, r4
 8087376:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 808737a:	d1f6      	bne.n	808736a <__kernel_rem_pio2+0x62>
 808737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808737e:	2b00      	cmp	r3, #0
 8087380:	db31      	blt.n	80873e6 <__kernel_rem_pio2+0xde>
 8087382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8087384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8087386:	a974      	add	r1, sp, #464	; 0x1d0
 8087388:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 808738c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8087390:	9a02      	ldr	r2, [sp, #8]
 8087392:	a924      	add	r1, sp, #144	; 0x90
 8087394:	00db      	lsls	r3, r3, #3
 8087396:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 808739a:	9301      	str	r3, [sp, #4]
 808739c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80873a0:	9b02      	ldr	r3, [sp, #8]
 80873a2:	2b00      	cmp	r3, #0
 80873a4:	f2c0 8190 	blt.w	80876c8 <__kernel_rem_pio2+0x3c0>
 80873a8:	464c      	mov	r4, r9
 80873aa:	9b04      	ldr	r3, [sp, #16]
 80873ac:	2600      	movs	r6, #0
 80873ae:	f1a3 0508 	sub.w	r5, r3, #8
 80873b2:	9b01      	ldr	r3, [sp, #4]
 80873b4:	2700      	movs	r7, #0
 80873b6:	eb09 0803 	add.w	r8, r9, r3
 80873ba:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80873be:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80873c2:	f001 f8b7 	bl	8088534 <__aeabi_dmul>
 80873c6:	4602      	mov	r2, r0
 80873c8:	460b      	mov	r3, r1
 80873ca:	4630      	mov	r0, r6
 80873cc:	4639      	mov	r1, r7
 80873ce:	f000 feff 	bl	80881d0 <__adddf3>
 80873d2:	4544      	cmp	r4, r8
 80873d4:	4606      	mov	r6, r0
 80873d6:	460f      	mov	r7, r1
 80873d8:	d1ef      	bne.n	80873ba <__kernel_rem_pio2+0xb2>
 80873da:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80873de:	45da      	cmp	sl, fp
 80873e0:	f109 0908 	add.w	r9, r9, #8
 80873e4:	d1dc      	bne.n	80873a0 <__kernel_rem_pio2+0x98>
 80873e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80873e8:	a910      	add	r1, sp, #64	; 0x40
 80873ea:	461d      	mov	r5, r3
 80873ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80873f0:	3b02      	subs	r3, #2
 80873f2:	009b      	lsls	r3, r3, #2
 80873f4:	1d1a      	adds	r2, r3, #4
 80873f6:	440a      	add	r2, r1
 80873f8:	440b      	add	r3, r1
 80873fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80873fc:	930e      	str	r3, [sp, #56]	; 0x38
 80873fe:	ab9c      	add	r3, sp, #624	; 0x270
 8087400:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8087404:	2d00      	cmp	r5, #0
 8087406:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 808740a:	dd2b      	ble.n	8087464 <__kernel_rem_pio2+0x15c>
 808740c:	ab9c      	add	r3, sp, #624	; 0x270
 808740e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 8087412:	3ca8      	subs	r4, #168	; 0xa8
 8087414:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8087418:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 808741c:	2200      	movs	r2, #0
 808741e:	4b38      	ldr	r3, [pc, #224]	; (8087500 <__kernel_rem_pio2+0x1f8>)
 8087420:	4630      	mov	r0, r6
 8087422:	4639      	mov	r1, r7
 8087424:	f001 f886 	bl	8088534 <__aeabi_dmul>
 8087428:	f001 fb34 	bl	8088a94 <__aeabi_d2iz>
 808742c:	f001 f81c 	bl	8088468 <__aeabi_i2d>
 8087430:	2200      	movs	r2, #0
 8087432:	4b34      	ldr	r3, [pc, #208]	; (8087504 <__kernel_rem_pio2+0x1fc>)
 8087434:	4680      	mov	r8, r0
 8087436:	4689      	mov	r9, r1
 8087438:	f001 f87c 	bl	8088534 <__aeabi_dmul>
 808743c:	4602      	mov	r2, r0
 808743e:	460b      	mov	r3, r1
 8087440:	4630      	mov	r0, r6
 8087442:	4639      	mov	r1, r7
 8087444:	f000 fec2 	bl	80881cc <__aeabi_dsub>
 8087448:	f001 fb24 	bl	8088a94 <__aeabi_d2iz>
 808744c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8087450:	f84a 0f04 	str.w	r0, [sl, #4]!
 8087454:	4649      	mov	r1, r9
 8087456:	4640      	mov	r0, r8
 8087458:	f000 feba 	bl	80881d0 <__adddf3>
 808745c:	455c      	cmp	r4, fp
 808745e:	4606      	mov	r6, r0
 8087460:	460f      	mov	r7, r1
 8087462:	d1db      	bne.n	808741c <__kernel_rem_pio2+0x114>
 8087464:	9c08      	ldr	r4, [sp, #32]
 8087466:	4630      	mov	r0, r6
 8087468:	4639      	mov	r1, r7
 808746a:	4622      	mov	r2, r4
 808746c:	f000 fe30 	bl	80880d0 <scalbn>
 8087470:	2200      	movs	r2, #0
 8087472:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8087476:	4606      	mov	r6, r0
 8087478:	460f      	mov	r7, r1
 808747a:	f001 f85b 	bl	8088534 <__aeabi_dmul>
 808747e:	f000 fd9b 	bl	8087fb8 <floor>
 8087482:	2200      	movs	r2, #0
 8087484:	4b20      	ldr	r3, [pc, #128]	; (8087508 <__kernel_rem_pio2+0x200>)
 8087486:	f001 f855 	bl	8088534 <__aeabi_dmul>
 808748a:	4602      	mov	r2, r0
 808748c:	460b      	mov	r3, r1
 808748e:	4630      	mov	r0, r6
 8087490:	4639      	mov	r1, r7
 8087492:	f000 fe9b 	bl	80881cc <__aeabi_dsub>
 8087496:	460f      	mov	r7, r1
 8087498:	4606      	mov	r6, r0
 808749a:	f001 fafb 	bl	8088a94 <__aeabi_d2iz>
 808749e:	4681      	mov	r9, r0
 80874a0:	f000 ffe2 	bl	8088468 <__aeabi_i2d>
 80874a4:	4602      	mov	r2, r0
 80874a6:	460b      	mov	r3, r1
 80874a8:	4630      	mov	r0, r6
 80874aa:	4639      	mov	r1, r7
 80874ac:	f000 fe8e 	bl	80881cc <__aeabi_dsub>
 80874b0:	2c00      	cmp	r4, #0
 80874b2:	4606      	mov	r6, r0
 80874b4:	460f      	mov	r7, r1
 80874b6:	f340 80ee 	ble.w	8087696 <__kernel_rem_pio2+0x38e>
 80874ba:	1e68      	subs	r0, r5, #1
 80874bc:	ab10      	add	r3, sp, #64	; 0x40
 80874be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80874c2:	f1c4 0218 	rsb	r2, r4, #24
 80874c6:	fa43 f102 	asr.w	r1, r3, r2
 80874ca:	fa01 f202 	lsl.w	r2, r1, r2
 80874ce:	1a9b      	subs	r3, r3, r2
 80874d0:	f1c4 0817 	rsb	r8, r4, #23
 80874d4:	aa10      	add	r2, sp, #64	; 0x40
 80874d6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80874da:	4489      	add	r9, r1
 80874dc:	fa43 f808 	asr.w	r8, r3, r8
 80874e0:	f1b8 0f00 	cmp.w	r8, #0
 80874e4:	dd3d      	ble.n	8087562 <__kernel_rem_pio2+0x25a>
 80874e6:	2d00      	cmp	r5, #0
 80874e8:	f109 0901 	add.w	r9, r9, #1
 80874ec:	f340 82d5 	ble.w	8087a9a <__kernel_rem_pio2+0x792>
 80874f0:	2200      	movs	r2, #0
 80874f2:	4614      	mov	r4, r2
 80874f4:	a90f      	add	r1, sp, #60	; 0x3c
 80874f6:	e011      	b.n	808751c <__kernel_rem_pio2+0x214>
 80874f8:	2aaaaaab 	.word	0x2aaaaaab
 80874fc:	0808bd7c 	.word	0x0808bd7c
 8087500:	3e700000 	.word	0x3e700000
 8087504:	41700000 	.word	0x41700000
 8087508:	40200000 	.word	0x40200000
 808750c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8087510:	b10b      	cbz	r3, 8087516 <__kernel_rem_pio2+0x20e>
 8087512:	6008      	str	r0, [r1, #0]
 8087514:	2401      	movs	r4, #1
 8087516:	3201      	adds	r2, #1
 8087518:	4295      	cmp	r5, r2
 808751a:	dd0d      	ble.n	8087538 <__kernel_rem_pio2+0x230>
 808751c:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8087520:	2c00      	cmp	r4, #0
 8087522:	d0f3      	beq.n	808750c <__kernel_rem_pio2+0x204>
 8087524:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8087528:	3201      	adds	r2, #1
 808752a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 808752e:	4295      	cmp	r5, r2
 8087530:	600b      	str	r3, [r1, #0]
 8087532:	f04f 0401 	mov.w	r4, #1
 8087536:	dcf1      	bgt.n	808751c <__kernel_rem_pio2+0x214>
 8087538:	9b08      	ldr	r3, [sp, #32]
 808753a:	2b00      	cmp	r3, #0
 808753c:	dd0d      	ble.n	808755a <__kernel_rem_pio2+0x252>
 808753e:	2b01      	cmp	r3, #1
 8087540:	f000 80b1 	beq.w	80876a6 <__kernel_rem_pio2+0x39e>
 8087544:	2b02      	cmp	r3, #2
 8087546:	d108      	bne.n	808755a <__kernel_rem_pio2+0x252>
 8087548:	1e6a      	subs	r2, r5, #1
 808754a:	ab10      	add	r3, sp, #64	; 0x40
 808754c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8087550:	a910      	add	r1, sp, #64	; 0x40
 8087552:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8087556:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 808755a:	f1b8 0f02 	cmp.w	r8, #2
 808755e:	f000 8081 	beq.w	8087664 <__kernel_rem_pio2+0x35c>
 8087562:	2200      	movs	r2, #0
 8087564:	2300      	movs	r3, #0
 8087566:	4630      	mov	r0, r6
 8087568:	4639      	mov	r1, r7
 808756a:	f001 fa4b 	bl	8088a04 <__aeabi_dcmpeq>
 808756e:	2800      	cmp	r0, #0
 8087570:	f000 825d 	beq.w	8087a2e <__kernel_rem_pio2+0x726>
 8087574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087576:	f105 3bff 	add.w	fp, r5, #4294967295
 808757a:	455b      	cmp	r3, fp
 808757c:	dc10      	bgt.n	80875a0 <__kernel_rem_pio2+0x298>
 808757e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8087582:	aa10      	add	r2, sp, #64	; 0x40
 8087584:	3b01      	subs	r3, #1
 8087586:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8087588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808758c:	2200      	movs	r2, #0
 808758e:	f853 1904 	ldr.w	r1, [r3], #-4
 8087592:	4283      	cmp	r3, r0
 8087594:	ea42 0201 	orr.w	r2, r2, r1
 8087598:	d1f9      	bne.n	808758e <__kernel_rem_pio2+0x286>
 808759a:	2a00      	cmp	r2, #0
 808759c:	f040 80b1 	bne.w	8087702 <__kernel_rem_pio2+0x3fa>
 80875a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80875a2:	aa10      	add	r2, sp, #64	; 0x40
 80875a4:	3b01      	subs	r3, #1
 80875a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80875aa:	2b00      	cmp	r3, #0
 80875ac:	f040 8273 	bne.w	8087a96 <__kernel_rem_pio2+0x78e>
 80875b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80875b2:	2301      	movs	r3, #1
 80875b4:	f852 1904 	ldr.w	r1, [r2], #-4
 80875b8:	3301      	adds	r3, #1
 80875ba:	2900      	cmp	r1, #0
 80875bc:	d0fa      	beq.n	80875b4 <__kernel_rem_pio2+0x2ac>
 80875be:	18e9      	adds	r1, r5, r3
 80875c0:	1c6a      	adds	r2, r5, #1
 80875c2:	428a      	cmp	r2, r1
 80875c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80875c6:	dc4b      	bgt.n	8087660 <__kernel_rem_pio2+0x358>
 80875c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80875ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80875cc:	1851      	adds	r1, r2, r1
 80875ce:	00db      	lsls	r3, r3, #3
 80875d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80875d4:	9305      	str	r3, [sp, #20]
 80875d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80875d8:	4405      	add	r5, r0
 80875da:	3901      	subs	r1, #1
 80875dc:	00e8      	lsls	r0, r5, #3
 80875de:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80875e2:	ab24      	add	r3, sp, #144	; 0x90
 80875e4:	00d2      	lsls	r2, r2, #3
 80875e6:	eb03 0b00 	add.w	fp, r3, r0
 80875ea:	ab74      	add	r3, sp, #464	; 0x1d0
 80875ec:	4413      	add	r3, r2
 80875ee:	9301      	str	r3, [sp, #4]
 80875f0:	f1a2 0308 	sub.w	r3, r2, #8
 80875f4:	9006      	str	r0, [sp, #24]
 80875f6:	9307      	str	r3, [sp, #28]
 80875f8:	f04f 0900 	mov.w	r9, #0
 80875fc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8087600:	f000 ff32 	bl	8088468 <__aeabi_i2d>
 8087604:	9b02      	ldr	r3, [sp, #8]
 8087606:	e8eb 0102 	strd	r0, r1, [fp], #8
 808760a:	2b00      	cmp	r3, #0
 808760c:	f04f 0600 	mov.w	r6, #0
 8087610:	f04f 0700 	mov.w	r7, #0
 8087614:	db1b      	blt.n	808764e <__kernel_rem_pio2+0x346>
 8087616:	9b06      	ldr	r3, [sp, #24]
 8087618:	eb03 0409 	add.w	r4, r3, r9
 808761c:	9b07      	ldr	r3, [sp, #28]
 808761e:	eb09 0803 	add.w	r8, r9, r3
 8087622:	ab24      	add	r3, sp, #144	; 0x90
 8087624:	441c      	add	r4, r3
 8087626:	4498      	add	r8, r3
 8087628:	9b04      	ldr	r3, [sp, #16]
 808762a:	f1a3 0508 	sub.w	r5, r3, #8
 808762e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8087632:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8087636:	f000 ff7d 	bl	8088534 <__aeabi_dmul>
 808763a:	4602      	mov	r2, r0
 808763c:	460b      	mov	r3, r1
 808763e:	4630      	mov	r0, r6
 8087640:	4639      	mov	r1, r7
 8087642:	f000 fdc5 	bl	80881d0 <__adddf3>
 8087646:	4544      	cmp	r4, r8
 8087648:	4606      	mov	r6, r0
 808764a:	460f      	mov	r7, r1
 808764c:	d1ef      	bne.n	808762e <__kernel_rem_pio2+0x326>
 808764e:	9b01      	ldr	r3, [sp, #4]
 8087650:	f109 0908 	add.w	r9, r9, #8
 8087654:	e8e3 6702 	strd	r6, r7, [r3], #8
 8087658:	9301      	str	r3, [sp, #4]
 808765a:	9b05      	ldr	r3, [sp, #20]
 808765c:	4599      	cmp	r9, r3
 808765e:	d1cd      	bne.n	80875fc <__kernel_rem_pio2+0x2f4>
 8087660:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8087662:	e6cc      	b.n	80873fe <__kernel_rem_pio2+0xf6>
 8087664:	4632      	mov	r2, r6
 8087666:	463b      	mov	r3, r7
 8087668:	2000      	movs	r0, #0
 808766a:	49b1      	ldr	r1, [pc, #708]	; (8087930 <__kernel_rem_pio2+0x628>)
 808766c:	f000 fdae 	bl	80881cc <__aeabi_dsub>
 8087670:	4606      	mov	r6, r0
 8087672:	460f      	mov	r7, r1
 8087674:	2c00      	cmp	r4, #0
 8087676:	f43f af74 	beq.w	8087562 <__kernel_rem_pio2+0x25a>
 808767a:	9a08      	ldr	r2, [sp, #32]
 808767c:	2000      	movs	r0, #0
 808767e:	49ac      	ldr	r1, [pc, #688]	; (8087930 <__kernel_rem_pio2+0x628>)
 8087680:	f000 fd26 	bl	80880d0 <scalbn>
 8087684:	4602      	mov	r2, r0
 8087686:	460b      	mov	r3, r1
 8087688:	4630      	mov	r0, r6
 808768a:	4639      	mov	r1, r7
 808768c:	f000 fd9e 	bl	80881cc <__aeabi_dsub>
 8087690:	4606      	mov	r6, r0
 8087692:	460f      	mov	r7, r1
 8087694:	e765      	b.n	8087562 <__kernel_rem_pio2+0x25a>
 8087696:	d110      	bne.n	80876ba <__kernel_rem_pio2+0x3b2>
 8087698:	1e6b      	subs	r3, r5, #1
 808769a:	aa10      	add	r2, sp, #64	; 0x40
 808769c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80876a0:	ea4f 58e3 	mov.w	r8, r3, asr #23
 80876a4:	e71c      	b.n	80874e0 <__kernel_rem_pio2+0x1d8>
 80876a6:	1e6a      	subs	r2, r5, #1
 80876a8:	ab10      	add	r3, sp, #64	; 0x40
 80876aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80876ae:	a910      	add	r1, sp, #64	; 0x40
 80876b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80876b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80876b8:	e74f      	b.n	808755a <__kernel_rem_pio2+0x252>
 80876ba:	2200      	movs	r2, #0
 80876bc:	4b9d      	ldr	r3, [pc, #628]	; (8087934 <__kernel_rem_pio2+0x62c>)
 80876be:	f001 f9bf 	bl	8088a40 <__aeabi_dcmpge>
 80876c2:	b958      	cbnz	r0, 80876dc <__kernel_rem_pio2+0x3d4>
 80876c4:	4680      	mov	r8, r0
 80876c6:	e74c      	b.n	8087562 <__kernel_rem_pio2+0x25a>
 80876c8:	2600      	movs	r6, #0
 80876ca:	2700      	movs	r7, #0
 80876cc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80876d0:	45da      	cmp	sl, fp
 80876d2:	f109 0908 	add.w	r9, r9, #8
 80876d6:	f47f ae63 	bne.w	80873a0 <__kernel_rem_pio2+0x98>
 80876da:	e684      	b.n	80873e6 <__kernel_rem_pio2+0xde>
 80876dc:	2d00      	cmp	r5, #0
 80876de:	f109 0901 	add.w	r9, r9, #1
 80876e2:	bfc8      	it	gt
 80876e4:	f04f 0802 	movgt.w	r8, #2
 80876e8:	f73f af02 	bgt.w	80874f0 <__kernel_rem_pio2+0x1e8>
 80876ec:	4632      	mov	r2, r6
 80876ee:	463b      	mov	r3, r7
 80876f0:	2000      	movs	r0, #0
 80876f2:	498f      	ldr	r1, [pc, #572]	; (8087930 <__kernel_rem_pio2+0x628>)
 80876f4:	f000 fd6a 	bl	80881cc <__aeabi_dsub>
 80876f8:	f04f 0802 	mov.w	r8, #2
 80876fc:	4606      	mov	r6, r0
 80876fe:	460f      	mov	r7, r1
 8087700:	e72f      	b.n	8087562 <__kernel_rem_pio2+0x25a>
 8087702:	9a08      	ldr	r2, [sp, #32]
 8087704:	ab10      	add	r3, sp, #64	; 0x40
 8087706:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 808770a:	3a18      	subs	r2, #24
 808770c:	f8cd 9014 	str.w	r9, [sp, #20]
 8087710:	f8cd 8004 	str.w	r8, [sp, #4]
 8087714:	9208      	str	r2, [sp, #32]
 8087716:	b96b      	cbnz	r3, 8087734 <__kernel_rem_pio2+0x42c>
 8087718:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 808771c:	3b01      	subs	r3, #1
 808771e:	a910      	add	r1, sp, #64	; 0x40
 8087720:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8087724:	f853 1904 	ldr.w	r1, [r3], #-4
 8087728:	f10b 3bff 	add.w	fp, fp, #4294967295
 808772c:	3a18      	subs	r2, #24
 808772e:	2900      	cmp	r1, #0
 8087730:	d0f8      	beq.n	8087724 <__kernel_rem_pio2+0x41c>
 8087732:	9208      	str	r2, [sp, #32]
 8087734:	9a08      	ldr	r2, [sp, #32]
 8087736:	2000      	movs	r0, #0
 8087738:	497d      	ldr	r1, [pc, #500]	; (8087930 <__kernel_rem_pio2+0x628>)
 808773a:	f000 fcc9 	bl	80880d0 <scalbn>
 808773e:	f1bb 0f00 	cmp.w	fp, #0
 8087742:	4604      	mov	r4, r0
 8087744:	460d      	mov	r5, r1
 8087746:	f2c0 81b8 	blt.w	8087aba <__kernel_rem_pio2+0x7b2>
 808774a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 808774e:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 8087752:	aa10      	add	r2, sp, #64	; 0x40
 8087754:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 8087758:	eb08 0903 	add.w	r9, r8, r3
 808775c:	9304      	str	r3, [sp, #16]
 808775e:	3604      	adds	r6, #4
 8087760:	f109 0708 	add.w	r7, r9, #8
 8087764:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8087768:	f000 fe7e 	bl	8088468 <__aeabi_i2d>
 808776c:	4622      	mov	r2, r4
 808776e:	462b      	mov	r3, r5
 8087770:	f000 fee0 	bl	8088534 <__aeabi_dmul>
 8087774:	2200      	movs	r2, #0
 8087776:	e967 0102 	strd	r0, r1, [r7, #-8]!
 808777a:	4b6f      	ldr	r3, [pc, #444]	; (8087938 <__kernel_rem_pio2+0x630>)
 808777c:	4620      	mov	r0, r4
 808777e:	4629      	mov	r1, r5
 8087780:	f000 fed8 	bl	8088534 <__aeabi_dmul>
 8087784:	45b8      	cmp	r8, r7
 8087786:	4604      	mov	r4, r0
 8087788:	460d      	mov	r5, r1
 808778a:	d1eb      	bne.n	8087764 <__kernel_rem_pio2+0x45c>
 808778c:	464b      	mov	r3, r9
 808778e:	f8cd b018 	str.w	fp, [sp, #24]
 8087792:	469b      	mov	fp, r3
 8087794:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8087798:	f8cd a008 	str.w	sl, [sp, #8]
 808779c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80877a0:	f04f 0900 	mov.w	r9, #0
 80877a4:	f1ba 0f00 	cmp.w	sl, #0
 80877a8:	f2c0 8128 	blt.w	80879fc <__kernel_rem_pio2+0x6f4>
 80877ac:	a35e      	add	r3, pc, #376	; (adr r3, 8087928 <__kernel_rem_pio2+0x620>)
 80877ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80877b2:	f8df 8188 	ldr.w	r8, [pc, #392]	; 808793c <__kernel_rem_pio2+0x634>
 80877b6:	465d      	mov	r5, fp
 80877b8:	2600      	movs	r6, #0
 80877ba:	2700      	movs	r7, #0
 80877bc:	2400      	movs	r4, #0
 80877be:	e003      	b.n	80877c8 <__kernel_rem_pio2+0x4c0>
 80877c0:	45a1      	cmp	r9, r4
 80877c2:	db10      	blt.n	80877e6 <__kernel_rem_pio2+0x4de>
 80877c4:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80877c8:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80877cc:	f000 feb2 	bl	8088534 <__aeabi_dmul>
 80877d0:	4602      	mov	r2, r0
 80877d2:	460b      	mov	r3, r1
 80877d4:	4630      	mov	r0, r6
 80877d6:	4639      	mov	r1, r7
 80877d8:	f000 fcfa 	bl	80881d0 <__adddf3>
 80877dc:	3401      	adds	r4, #1
 80877de:	45a2      	cmp	sl, r4
 80877e0:	4606      	mov	r6, r0
 80877e2:	460f      	mov	r7, r1
 80877e4:	daec      	bge.n	80877c0 <__kernel_rem_pio2+0x4b8>
 80877e6:	9b02      	ldr	r3, [sp, #8]
 80877e8:	f1ab 0b08 	sub.w	fp, fp, #8
 80877ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80877f0:	e9c3 6700 	strd	r6, r7, [r3]
 80877f4:	ab72      	add	r3, sp, #456	; 0x1c8
 80877f6:	455b      	cmp	r3, fp
 80877f8:	f109 0901 	add.w	r9, r9, #1
 80877fc:	d1d2      	bne.n	80877a4 <__kernel_rem_pio2+0x49c>
 80877fe:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8087800:	f8dd b018 	ldr.w	fp, [sp, #24]
 8087804:	f8dd a008 	ldr.w	sl, [sp, #8]
 8087808:	2b03      	cmp	r3, #3
 808780a:	f200 8083 	bhi.w	8087914 <__kernel_rem_pio2+0x60c>
 808780e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8087812:	00d3      	.short	0x00d3
 8087814:	00970097 	.word	0x00970097
 8087818:	0004      	.short	0x0004
 808781a:	f1bb 0f00 	cmp.w	fp, #0
 808781e:	f340 8156 	ble.w	8087ace <__kernel_rem_pio2+0x7c6>
 8087822:	9b04      	ldr	r3, [sp, #16]
 8087824:	f8cd b008 	str.w	fp, [sp, #8]
 8087828:	4453      	add	r3, sl
 808782a:	4698      	mov	r8, r3
 808782c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8087830:	46d3      	mov	fp, sl
 8087832:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 8087836:	4632      	mov	r2, r6
 8087838:	463b      	mov	r3, r7
 808783a:	4648      	mov	r0, r9
 808783c:	4651      	mov	r1, sl
 808783e:	f000 fcc7 	bl	80881d0 <__adddf3>
 8087842:	4604      	mov	r4, r0
 8087844:	460d      	mov	r5, r1
 8087846:	4602      	mov	r2, r0
 8087848:	460b      	mov	r3, r1
 808784a:	4648      	mov	r0, r9
 808784c:	4651      	mov	r1, sl
 808784e:	f000 fcbd 	bl	80881cc <__aeabi_dsub>
 8087852:	4632      	mov	r2, r6
 8087854:	463b      	mov	r3, r7
 8087856:	f000 fcbb 	bl	80881d0 <__adddf3>
 808785a:	e9c8 0100 	strd	r0, r1, [r8]
 808785e:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8087862:	45c3      	cmp	fp, r8
 8087864:	4626      	mov	r6, r4
 8087866:	462f      	mov	r7, r5
 8087868:	d1e3      	bne.n	8087832 <__kernel_rem_pio2+0x52a>
 808786a:	46da      	mov	sl, fp
 808786c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8087870:	f1bb 0f01 	cmp.w	fp, #1
 8087874:	f340 812b 	ble.w	8087ace <__kernel_rem_pio2+0x7c6>
 8087878:	9b04      	ldr	r3, [sp, #16]
 808787a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 808787e:	4453      	add	r3, sl
 8087880:	4698      	mov	r8, r3
 8087882:	e9d3 6700 	ldrd	r6, r7, [r3]
 8087886:	4699      	mov	r9, r3
 8087888:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 808788c:	4630      	mov	r0, r6
 808788e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8087892:	461a      	mov	r2, r3
 8087894:	4639      	mov	r1, r7
 8087896:	4623      	mov	r3, r4
 8087898:	f000 fc9a 	bl	80881d0 <__adddf3>
 808789c:	4604      	mov	r4, r0
 808789e:	460d      	mov	r5, r1
 80878a0:	4602      	mov	r2, r0
 80878a2:	460b      	mov	r3, r1
 80878a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80878a8:	f000 fc90 	bl	80881cc <__aeabi_dsub>
 80878ac:	4632      	mov	r2, r6
 80878ae:	463b      	mov	r3, r7
 80878b0:	f000 fc8e 	bl	80881d0 <__adddf3>
 80878b4:	e9c9 0100 	strd	r0, r1, [r9]
 80878b8:	e969 4502 	strd	r4, r5, [r9, #-8]!
 80878bc:	45cb      	cmp	fp, r9
 80878be:	4626      	mov	r6, r4
 80878c0:	462f      	mov	r7, r5
 80878c2:	d1e1      	bne.n	8087888 <__kernel_rem_pio2+0x580>
 80878c4:	2300      	movs	r3, #0
 80878c6:	461d      	mov	r5, r3
 80878c8:	f108 0808 	add.w	r8, r8, #8
 80878cc:	ac50      	add	r4, sp, #320	; 0x140
 80878ce:	4618      	mov	r0, r3
 80878d0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80878d4:	4629      	mov	r1, r5
 80878d6:	f000 fc7b 	bl	80881d0 <__adddf3>
 80878da:	4544      	cmp	r4, r8
 80878dc:	4603      	mov	r3, r0
 80878de:	460d      	mov	r5, r1
 80878e0:	d1f5      	bne.n	80878ce <__kernel_rem_pio2+0x5c6>
 80878e2:	9a01      	ldr	r2, [sp, #4]
 80878e4:	2a00      	cmp	r2, #0
 80878e6:	f000 80da 	beq.w	8087a9e <__kernel_rem_pio2+0x796>
 80878ea:	f8da 4004 	ldr.w	r4, [sl, #4]
 80878ee:	f8da 200c 	ldr.w	r2, [sl, #12]
 80878f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80878f4:	f8da 1000 	ldr.w	r1, [sl]
 80878f8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80878fc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8087900:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8087904:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8087908:	617d      	str	r5, [r7, #20]
 808790a:	613b      	str	r3, [r7, #16]
 808790c:	607c      	str	r4, [r7, #4]
 808790e:	60fa      	str	r2, [r7, #12]
 8087910:	6039      	str	r1, [r7, #0]
 8087912:	60b8      	str	r0, [r7, #8]
 8087914:	9b05      	ldr	r3, [sp, #20]
 8087916:	f003 0007 	and.w	r0, r3, #7
 808791a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 808791e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087922:	bf00      	nop
 8087924:	f3af 8000 	nop.w
 8087928:	40000000 	.word	0x40000000
 808792c:	3ff921fb 	.word	0x3ff921fb
 8087930:	3ff00000 	.word	0x3ff00000
 8087934:	3fe00000 	.word	0x3fe00000
 8087938:	3e700000 	.word	0x3e700000
 808793c:	0808bd90 	.word	0x0808bd90
 8087940:	2400      	movs	r4, #0
 8087942:	4621      	mov	r1, r4
 8087944:	9d04      	ldr	r5, [sp, #16]
 8087946:	3508      	adds	r5, #8
 8087948:	4455      	add	r5, sl
 808794a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 808794e:	4620      	mov	r0, r4
 8087950:	f000 fc3e 	bl	80881d0 <__adddf3>
 8087954:	4555      	cmp	r5, sl
 8087956:	4604      	mov	r4, r0
 8087958:	d1f7      	bne.n	808794a <__kernel_rem_pio2+0x642>
 808795a:	9b01      	ldr	r3, [sp, #4]
 808795c:	2b00      	cmp	r3, #0
 808795e:	d050      	beq.n	8087a02 <__kernel_rem_pio2+0x6fa>
 8087960:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8087962:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8087966:	460b      	mov	r3, r1
 8087968:	e9da 0100 	ldrd	r0, r1, [sl]
 808796c:	e887 0030 	stmia.w	r7, {r4, r5}
 8087970:	4622      	mov	r2, r4
 8087972:	f000 fc2b 	bl	80881cc <__aeabi_dsub>
 8087976:	f1bb 0f00 	cmp.w	fp, #0
 808797a:	4603      	mov	r3, r0
 808797c:	460d      	mov	r5, r1
 808797e:	dd0d      	ble.n	808799c <__kernel_rem_pio2+0x694>
 8087980:	2401      	movs	r4, #1
 8087982:	4618      	mov	r0, r3
 8087984:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 8087988:	4629      	mov	r1, r5
 808798a:	f000 fc21 	bl	80881d0 <__adddf3>
 808798e:	3401      	adds	r4, #1
 8087990:	45a3      	cmp	fp, r4
 8087992:	4603      	mov	r3, r0
 8087994:	460d      	mov	r5, r1
 8087996:	daf4      	bge.n	8087982 <__kernel_rem_pio2+0x67a>
 8087998:	9a01      	ldr	r2, [sp, #4]
 808799a:	b10a      	cbz	r2, 80879a0 <__kernel_rem_pio2+0x698>
 808799c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80879a0:	4618      	mov	r0, r3
 80879a2:	4629      	mov	r1, r5
 80879a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80879a6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80879aa:	9b05      	ldr	r3, [sp, #20]
 80879ac:	f003 0007 	and.w	r0, r3, #7
 80879b0:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80879b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80879b8:	2300      	movs	r3, #0
 80879ba:	461c      	mov	r4, r3
 80879bc:	9a04      	ldr	r2, [sp, #16]
 80879be:	3208      	adds	r2, #8
 80879c0:	4492      	add	sl, r2
 80879c2:	4618      	mov	r0, r3
 80879c4:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80879c8:	4621      	mov	r1, r4
 80879ca:	f000 fc01 	bl	80881d0 <__adddf3>
 80879ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80879d2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80879d6:	4603      	mov	r3, r0
 80879d8:	460c      	mov	r4, r1
 80879da:	d1f2      	bne.n	80879c2 <__kernel_rem_pio2+0x6ba>
 80879dc:	9a01      	ldr	r2, [sp, #4]
 80879de:	b10a      	cbz	r2, 80879e4 <__kernel_rem_pio2+0x6dc>
 80879e0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80879e4:	4618      	mov	r0, r3
 80879e6:	4621      	mov	r1, r4
 80879e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80879ea:	e9c3 0100 	strd	r0, r1, [r3]
 80879ee:	9b05      	ldr	r3, [sp, #20]
 80879f0:	f003 0007 	and.w	r0, r3, #7
 80879f4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80879f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80879fc:	2600      	movs	r6, #0
 80879fe:	2700      	movs	r7, #0
 8087a00:	e6f1      	b.n	80877e6 <__kernel_rem_pio2+0x4de>
 8087a02:	4626      	mov	r6, r4
 8087a04:	460f      	mov	r7, r1
 8087a06:	4622      	mov	r2, r4
 8087a08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8087a0a:	460b      	mov	r3, r1
 8087a0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8087a10:	e9c4 6700 	strd	r6, r7, [r4]
 8087a14:	f000 fbda 	bl	80881cc <__aeabi_dsub>
 8087a18:	f1bb 0f00 	cmp.w	fp, #0
 8087a1c:	4603      	mov	r3, r0
 8087a1e:	460d      	mov	r5, r1
 8087a20:	dcae      	bgt.n	8087980 <__kernel_rem_pio2+0x678>
 8087a22:	4618      	mov	r0, r3
 8087a24:	4629      	mov	r1, r5
 8087a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087a28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8087a2c:	e7bd      	b.n	80879aa <__kernel_rem_pio2+0x6a2>
 8087a2e:	9b08      	ldr	r3, [sp, #32]
 8087a30:	4630      	mov	r0, r6
 8087a32:	425a      	negs	r2, r3
 8087a34:	4639      	mov	r1, r7
 8087a36:	f8cd 9014 	str.w	r9, [sp, #20]
 8087a3a:	f8cd 8004 	str.w	r8, [sp, #4]
 8087a3e:	f000 fb47 	bl	80880d0 <scalbn>
 8087a42:	2200      	movs	r2, #0
 8087a44:	4b2c      	ldr	r3, [pc, #176]	; (8087af8 <__kernel_rem_pio2+0x7f0>)
 8087a46:	4606      	mov	r6, r0
 8087a48:	460f      	mov	r7, r1
 8087a4a:	f000 fff9 	bl	8088a40 <__aeabi_dcmpge>
 8087a4e:	2800      	cmp	r0, #0
 8087a50:	d040      	beq.n	8087ad4 <__kernel_rem_pio2+0x7cc>
 8087a52:	2200      	movs	r2, #0
 8087a54:	4b29      	ldr	r3, [pc, #164]	; (8087afc <__kernel_rem_pio2+0x7f4>)
 8087a56:	4630      	mov	r0, r6
 8087a58:	4639      	mov	r1, r7
 8087a5a:	f000 fd6b 	bl	8088534 <__aeabi_dmul>
 8087a5e:	f001 f819 	bl	8088a94 <__aeabi_d2iz>
 8087a62:	4604      	mov	r4, r0
 8087a64:	f000 fd00 	bl	8088468 <__aeabi_i2d>
 8087a68:	2200      	movs	r2, #0
 8087a6a:	4b23      	ldr	r3, [pc, #140]	; (8087af8 <__kernel_rem_pio2+0x7f0>)
 8087a6c:	f000 fd62 	bl	8088534 <__aeabi_dmul>
 8087a70:	460b      	mov	r3, r1
 8087a72:	4602      	mov	r2, r0
 8087a74:	4639      	mov	r1, r7
 8087a76:	4630      	mov	r0, r6
 8087a78:	f000 fba8 	bl	80881cc <__aeabi_dsub>
 8087a7c:	f001 f80a 	bl	8088a94 <__aeabi_d2iz>
 8087a80:	9b08      	ldr	r3, [sp, #32]
 8087a82:	f105 0b01 	add.w	fp, r5, #1
 8087a86:	3318      	adds	r3, #24
 8087a88:	9308      	str	r3, [sp, #32]
 8087a8a:	ab10      	add	r3, sp, #64	; 0x40
 8087a8c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8087a90:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 8087a94:	e64e      	b.n	8087734 <__kernel_rem_pio2+0x42c>
 8087a96:	2301      	movs	r3, #1
 8087a98:	e591      	b.n	80875be <__kernel_rem_pio2+0x2b6>
 8087a9a:	2400      	movs	r4, #0
 8087a9c:	e54c      	b.n	8087538 <__kernel_rem_pio2+0x230>
 8087a9e:	4618      	mov	r0, r3
 8087aa0:	e9da 6700 	ldrd	r6, r7, [sl]
 8087aa4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8087aa8:	4629      	mov	r1, r5
 8087aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8087aac:	e9c5 6700 	strd	r6, r7, [r5]
 8087ab0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8087ab4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8087ab8:	e72c      	b.n	8087914 <__kernel_rem_pio2+0x60c>
 8087aba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8087abc:	2b03      	cmp	r3, #3
 8087abe:	f63f af29 	bhi.w	8087914 <__kernel_rem_pio2+0x60c>
 8087ac2:	e8df f003 	tbb	[pc, r3]
 8087ac6:	1015      	.short	0x1015
 8087ac8:	0210      	.short	0x0210
 8087aca:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8087ace:	2300      	movs	r3, #0
 8087ad0:	461d      	mov	r5, r3
 8087ad2:	e706      	b.n	80878e2 <__kernel_rem_pio2+0x5da>
 8087ad4:	4630      	mov	r0, r6
 8087ad6:	4639      	mov	r1, r7
 8087ad8:	f000 ffdc 	bl	8088a94 <__aeabi_d2iz>
 8087adc:	ab10      	add	r3, sp, #64	; 0x40
 8087ade:	46ab      	mov	fp, r5
 8087ae0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8087ae4:	e626      	b.n	8087734 <__kernel_rem_pio2+0x42c>
 8087ae6:	2400      	movs	r4, #0
 8087ae8:	4621      	mov	r1, r4
 8087aea:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8087aee:	e734      	b.n	808795a <__kernel_rem_pio2+0x652>
 8087af0:	2300      	movs	r3, #0
 8087af2:	461c      	mov	r4, r3
 8087af4:	e772      	b.n	80879dc <__kernel_rem_pio2+0x6d4>
 8087af6:	bf00      	nop
 8087af8:	41700000 	.word	0x41700000
 8087afc:	3e700000 	.word	0x3e700000

08087b00 <__kernel_sin>:
 8087b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087b04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8087b08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8087b0c:	b085      	sub	sp, #20
 8087b0e:	460c      	mov	r4, r1
 8087b10:	4690      	mov	r8, r2
 8087b12:	4699      	mov	r9, r3
 8087b14:	4605      	mov	r5, r0
 8087b16:	da04      	bge.n	8087b22 <__kernel_sin+0x22>
 8087b18:	f000 ffbc 	bl	8088a94 <__aeabi_d2iz>
 8087b1c:	2800      	cmp	r0, #0
 8087b1e:	f000 8085 	beq.w	8087c2c <__kernel_sin+0x12c>
 8087b22:	462a      	mov	r2, r5
 8087b24:	4623      	mov	r3, r4
 8087b26:	4628      	mov	r0, r5
 8087b28:	4621      	mov	r1, r4
 8087b2a:	f000 fd03 	bl	8088534 <__aeabi_dmul>
 8087b2e:	4606      	mov	r6, r0
 8087b30:	460f      	mov	r7, r1
 8087b32:	4602      	mov	r2, r0
 8087b34:	460b      	mov	r3, r1
 8087b36:	4628      	mov	r0, r5
 8087b38:	4621      	mov	r1, r4
 8087b3a:	f000 fcfb 	bl	8088534 <__aeabi_dmul>
 8087b3e:	a33e      	add	r3, pc, #248	; (adr r3, 8087c38 <__kernel_sin+0x138>)
 8087b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087b44:	4682      	mov	sl, r0
 8087b46:	468b      	mov	fp, r1
 8087b48:	4630      	mov	r0, r6
 8087b4a:	4639      	mov	r1, r7
 8087b4c:	f000 fcf2 	bl	8088534 <__aeabi_dmul>
 8087b50:	a33b      	add	r3, pc, #236	; (adr r3, 8087c40 <__kernel_sin+0x140>)
 8087b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087b56:	f000 fb39 	bl	80881cc <__aeabi_dsub>
 8087b5a:	4632      	mov	r2, r6
 8087b5c:	463b      	mov	r3, r7
 8087b5e:	f000 fce9 	bl	8088534 <__aeabi_dmul>
 8087b62:	a339      	add	r3, pc, #228	; (adr r3, 8087c48 <__kernel_sin+0x148>)
 8087b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087b68:	f000 fb32 	bl	80881d0 <__adddf3>
 8087b6c:	4632      	mov	r2, r6
 8087b6e:	463b      	mov	r3, r7
 8087b70:	f000 fce0 	bl	8088534 <__aeabi_dmul>
 8087b74:	a336      	add	r3, pc, #216	; (adr r3, 8087c50 <__kernel_sin+0x150>)
 8087b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087b7a:	f000 fb27 	bl	80881cc <__aeabi_dsub>
 8087b7e:	4632      	mov	r2, r6
 8087b80:	463b      	mov	r3, r7
 8087b82:	f000 fcd7 	bl	8088534 <__aeabi_dmul>
 8087b86:	a334      	add	r3, pc, #208	; (adr r3, 8087c58 <__kernel_sin+0x158>)
 8087b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087b8c:	f000 fb20 	bl	80881d0 <__adddf3>
 8087b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8087b92:	e9cd 0100 	strd	r0, r1, [sp]
 8087b96:	b39b      	cbz	r3, 8087c00 <__kernel_sin+0x100>
 8087b98:	2200      	movs	r2, #0
 8087b9a:	4b33      	ldr	r3, [pc, #204]	; (8087c68 <__kernel_sin+0x168>)
 8087b9c:	4640      	mov	r0, r8
 8087b9e:	4649      	mov	r1, r9
 8087ba0:	f000 fcc8 	bl	8088534 <__aeabi_dmul>
 8087ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8087ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8087bac:	4650      	mov	r0, sl
 8087bae:	4659      	mov	r1, fp
 8087bb0:	f000 fcc0 	bl	8088534 <__aeabi_dmul>
 8087bb4:	4602      	mov	r2, r0
 8087bb6:	460b      	mov	r3, r1
 8087bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8087bbc:	f000 fb06 	bl	80881cc <__aeabi_dsub>
 8087bc0:	4632      	mov	r2, r6
 8087bc2:	463b      	mov	r3, r7
 8087bc4:	f000 fcb6 	bl	8088534 <__aeabi_dmul>
 8087bc8:	4642      	mov	r2, r8
 8087bca:	464b      	mov	r3, r9
 8087bcc:	f000 fafe 	bl	80881cc <__aeabi_dsub>
 8087bd0:	a323      	add	r3, pc, #140	; (adr r3, 8087c60 <__kernel_sin+0x160>)
 8087bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087bd6:	4606      	mov	r6, r0
 8087bd8:	460f      	mov	r7, r1
 8087bda:	4650      	mov	r0, sl
 8087bdc:	4659      	mov	r1, fp
 8087bde:	f000 fca9 	bl	8088534 <__aeabi_dmul>
 8087be2:	4602      	mov	r2, r0
 8087be4:	460b      	mov	r3, r1
 8087be6:	4630      	mov	r0, r6
 8087be8:	4639      	mov	r1, r7
 8087bea:	f000 faf1 	bl	80881d0 <__adddf3>
 8087bee:	4602      	mov	r2, r0
 8087bf0:	460b      	mov	r3, r1
 8087bf2:	4628      	mov	r0, r5
 8087bf4:	4621      	mov	r1, r4
 8087bf6:	f000 fae9 	bl	80881cc <__aeabi_dsub>
 8087bfa:	b005      	add	sp, #20
 8087bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087c00:	4602      	mov	r2, r0
 8087c02:	460b      	mov	r3, r1
 8087c04:	4630      	mov	r0, r6
 8087c06:	4639      	mov	r1, r7
 8087c08:	f000 fc94 	bl	8088534 <__aeabi_dmul>
 8087c0c:	a314      	add	r3, pc, #80	; (adr r3, 8087c60 <__kernel_sin+0x160>)
 8087c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087c12:	f000 fadb 	bl	80881cc <__aeabi_dsub>
 8087c16:	4652      	mov	r2, sl
 8087c18:	465b      	mov	r3, fp
 8087c1a:	f000 fc8b 	bl	8088534 <__aeabi_dmul>
 8087c1e:	462a      	mov	r2, r5
 8087c20:	4623      	mov	r3, r4
 8087c22:	f000 fad5 	bl	80881d0 <__adddf3>
 8087c26:	b005      	add	sp, #20
 8087c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087c2c:	4628      	mov	r0, r5
 8087c2e:	4621      	mov	r1, r4
 8087c30:	b005      	add	sp, #20
 8087c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087c36:	bf00      	nop
 8087c38:	5acfd57c 	.word	0x5acfd57c
 8087c3c:	3de5d93a 	.word	0x3de5d93a
 8087c40:	8a2b9ceb 	.word	0x8a2b9ceb
 8087c44:	3e5ae5e6 	.word	0x3e5ae5e6
 8087c48:	57b1fe7d 	.word	0x57b1fe7d
 8087c4c:	3ec71de3 	.word	0x3ec71de3
 8087c50:	19c161d5 	.word	0x19c161d5
 8087c54:	3f2a01a0 	.word	0x3f2a01a0
 8087c58:	1110f8a6 	.word	0x1110f8a6
 8087c5c:	3f811111 	.word	0x3f811111
 8087c60:	55555549 	.word	0x55555549
 8087c64:	3fc55555 	.word	0x3fc55555
 8087c68:	3fe00000 	.word	0x3fe00000
 8087c6c:	00000000 	.word	0x00000000

08087c70 <atan>:
 8087c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087c74:	4bc0      	ldr	r3, [pc, #768]	; (8087f78 <atan+0x308>)
 8087c76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8087c7a:	429e      	cmp	r6, r3
 8087c7c:	460d      	mov	r5, r1
 8087c7e:	468a      	mov	sl, r1
 8087c80:	4604      	mov	r4, r0
 8087c82:	dd0f      	ble.n	8087ca4 <atan+0x34>
 8087c84:	4bbd      	ldr	r3, [pc, #756]	; (8087f7c <atan+0x30c>)
 8087c86:	429e      	cmp	r6, r3
 8087c88:	f300 80b2 	bgt.w	8087df0 <atan+0x180>
 8087c8c:	f000 80ad 	beq.w	8087dea <atan+0x17a>
 8087c90:	4bbb      	ldr	r3, [pc, #748]	; (8087f80 <atan+0x310>)
 8087c92:	49bc      	ldr	r1, [pc, #752]	; (8087f84 <atan+0x314>)
 8087c94:	4cbc      	ldr	r4, [pc, #752]	; (8087f88 <atan+0x318>)
 8087c96:	f1ba 0f00 	cmp.w	sl, #0
 8087c9a:	bfc8      	it	gt
 8087c9c:	4619      	movgt	r1, r3
 8087c9e:	4620      	mov	r0, r4
 8087ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087ca4:	4bb9      	ldr	r3, [pc, #740]	; (8087f8c <atan+0x31c>)
 8087ca6:	429e      	cmp	r6, r3
 8087ca8:	f300 80bc 	bgt.w	8087e24 <atan+0x1b4>
 8087cac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8087cb0:	429e      	cmp	r6, r3
 8087cb2:	f340 80a7 	ble.w	8087e04 <atan+0x194>
 8087cb6:	f04f 3bff 	mov.w	fp, #4294967295
 8087cba:	4622      	mov	r2, r4
 8087cbc:	462b      	mov	r3, r5
 8087cbe:	4620      	mov	r0, r4
 8087cc0:	4629      	mov	r1, r5
 8087cc2:	f000 fc37 	bl	8088534 <__aeabi_dmul>
 8087cc6:	4602      	mov	r2, r0
 8087cc8:	460b      	mov	r3, r1
 8087cca:	4680      	mov	r8, r0
 8087ccc:	4689      	mov	r9, r1
 8087cce:	f000 fc31 	bl	8088534 <__aeabi_dmul>
 8087cd2:	a391      	add	r3, pc, #580	; (adr r3, 8087f18 <atan+0x2a8>)
 8087cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087cd8:	4606      	mov	r6, r0
 8087cda:	460f      	mov	r7, r1
 8087cdc:	f000 fc2a 	bl	8088534 <__aeabi_dmul>
 8087ce0:	a38f      	add	r3, pc, #572	; (adr r3, 8087f20 <atan+0x2b0>)
 8087ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087ce6:	f000 fa73 	bl	80881d0 <__adddf3>
 8087cea:	4632      	mov	r2, r6
 8087cec:	463b      	mov	r3, r7
 8087cee:	f000 fc21 	bl	8088534 <__aeabi_dmul>
 8087cf2:	a38d      	add	r3, pc, #564	; (adr r3, 8087f28 <atan+0x2b8>)
 8087cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087cf8:	f000 fa6a 	bl	80881d0 <__adddf3>
 8087cfc:	4632      	mov	r2, r6
 8087cfe:	463b      	mov	r3, r7
 8087d00:	f000 fc18 	bl	8088534 <__aeabi_dmul>
 8087d04:	a38a      	add	r3, pc, #552	; (adr r3, 8087f30 <atan+0x2c0>)
 8087d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d0a:	f000 fa61 	bl	80881d0 <__adddf3>
 8087d0e:	4632      	mov	r2, r6
 8087d10:	463b      	mov	r3, r7
 8087d12:	f000 fc0f 	bl	8088534 <__aeabi_dmul>
 8087d16:	a388      	add	r3, pc, #544	; (adr r3, 8087f38 <atan+0x2c8>)
 8087d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d1c:	f000 fa58 	bl	80881d0 <__adddf3>
 8087d20:	4632      	mov	r2, r6
 8087d22:	463b      	mov	r3, r7
 8087d24:	f000 fc06 	bl	8088534 <__aeabi_dmul>
 8087d28:	a385      	add	r3, pc, #532	; (adr r3, 8087f40 <atan+0x2d0>)
 8087d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d2e:	f000 fa4f 	bl	80881d0 <__adddf3>
 8087d32:	4642      	mov	r2, r8
 8087d34:	464b      	mov	r3, r9
 8087d36:	f000 fbfd 	bl	8088534 <__aeabi_dmul>
 8087d3a:	a383      	add	r3, pc, #524	; (adr r3, 8087f48 <atan+0x2d8>)
 8087d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d40:	4680      	mov	r8, r0
 8087d42:	4689      	mov	r9, r1
 8087d44:	4630      	mov	r0, r6
 8087d46:	4639      	mov	r1, r7
 8087d48:	f000 fbf4 	bl	8088534 <__aeabi_dmul>
 8087d4c:	a380      	add	r3, pc, #512	; (adr r3, 8087f50 <atan+0x2e0>)
 8087d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d52:	f000 fa3b 	bl	80881cc <__aeabi_dsub>
 8087d56:	4632      	mov	r2, r6
 8087d58:	463b      	mov	r3, r7
 8087d5a:	f000 fbeb 	bl	8088534 <__aeabi_dmul>
 8087d5e:	a37e      	add	r3, pc, #504	; (adr r3, 8087f58 <atan+0x2e8>)
 8087d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d64:	f000 fa32 	bl	80881cc <__aeabi_dsub>
 8087d68:	4632      	mov	r2, r6
 8087d6a:	463b      	mov	r3, r7
 8087d6c:	f000 fbe2 	bl	8088534 <__aeabi_dmul>
 8087d70:	a37b      	add	r3, pc, #492	; (adr r3, 8087f60 <atan+0x2f0>)
 8087d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d76:	f000 fa29 	bl	80881cc <__aeabi_dsub>
 8087d7a:	4632      	mov	r2, r6
 8087d7c:	463b      	mov	r3, r7
 8087d7e:	f000 fbd9 	bl	8088534 <__aeabi_dmul>
 8087d82:	a379      	add	r3, pc, #484	; (adr r3, 8087f68 <atan+0x2f8>)
 8087d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087d88:	f000 fa20 	bl	80881cc <__aeabi_dsub>
 8087d8c:	4632      	mov	r2, r6
 8087d8e:	463b      	mov	r3, r7
 8087d90:	f000 fbd0 	bl	8088534 <__aeabi_dmul>
 8087d94:	f1bb 3fff 	cmp.w	fp, #4294967295
 8087d98:	4602      	mov	r2, r0
 8087d9a:	460b      	mov	r3, r1
 8087d9c:	d069      	beq.n	8087e72 <atan+0x202>
 8087d9e:	4640      	mov	r0, r8
 8087da0:	4649      	mov	r1, r9
 8087da2:	f000 fa15 	bl	80881d0 <__adddf3>
 8087da6:	4622      	mov	r2, r4
 8087da8:	462b      	mov	r3, r5
 8087daa:	f000 fbc3 	bl	8088534 <__aeabi_dmul>
 8087dae:	4e78      	ldr	r6, [pc, #480]	; (8087f90 <atan+0x320>)
 8087db0:	4b78      	ldr	r3, [pc, #480]	; (8087f94 <atan+0x324>)
 8087db2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8087db6:	445e      	add	r6, fp
 8087db8:	449b      	add	fp, r3
 8087dba:	e9db 2300 	ldrd	r2, r3, [fp]
 8087dbe:	f000 fa05 	bl	80881cc <__aeabi_dsub>
 8087dc2:	4622      	mov	r2, r4
 8087dc4:	462b      	mov	r3, r5
 8087dc6:	f000 fa01 	bl	80881cc <__aeabi_dsub>
 8087dca:	4602      	mov	r2, r0
 8087dcc:	460b      	mov	r3, r1
 8087dce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8087dd2:	f000 f9fb 	bl	80881cc <__aeabi_dsub>
 8087dd6:	f1ba 0f00 	cmp.w	sl, #0
 8087dda:	4604      	mov	r4, r0
 8087ddc:	f6bf af5f 	bge.w	8087c9e <atan+0x2e>
 8087de0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8087de4:	4620      	mov	r0, r4
 8087de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087dea:	2800      	cmp	r0, #0
 8087dec:	f43f af50 	beq.w	8087c90 <atan+0x20>
 8087df0:	4622      	mov	r2, r4
 8087df2:	4620      	mov	r0, r4
 8087df4:	462b      	mov	r3, r5
 8087df6:	4629      	mov	r1, r5
 8087df8:	f000 f9ea 	bl	80881d0 <__adddf3>
 8087dfc:	4604      	mov	r4, r0
 8087dfe:	4620      	mov	r0, r4
 8087e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087e04:	a35a      	add	r3, pc, #360	; (adr r3, 8087f70 <atan+0x300>)
 8087e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087e0a:	f000 f9e1 	bl	80881d0 <__adddf3>
 8087e0e:	2200      	movs	r2, #0
 8087e10:	4b61      	ldr	r3, [pc, #388]	; (8087f98 <atan+0x328>)
 8087e12:	f000 fe1f 	bl	8088a54 <__aeabi_dcmpgt>
 8087e16:	2800      	cmp	r0, #0
 8087e18:	f43f af4d 	beq.w	8087cb6 <atan+0x46>
 8087e1c:	4629      	mov	r1, r5
 8087e1e:	4620      	mov	r0, r4
 8087e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087e24:	f000 f8c2 	bl	8087fac <fabs>
 8087e28:	4b5c      	ldr	r3, [pc, #368]	; (8087f9c <atan+0x32c>)
 8087e2a:	4604      	mov	r4, r0
 8087e2c:	429e      	cmp	r6, r3
 8087e2e:	460d      	mov	r5, r1
 8087e30:	dc2f      	bgt.n	8087e92 <atan+0x222>
 8087e32:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8087e36:	429e      	cmp	r6, r3
 8087e38:	dc54      	bgt.n	8087ee4 <atan+0x274>
 8087e3a:	4602      	mov	r2, r0
 8087e3c:	460b      	mov	r3, r1
 8087e3e:	f000 f9c7 	bl	80881d0 <__adddf3>
 8087e42:	2200      	movs	r2, #0
 8087e44:	4b54      	ldr	r3, [pc, #336]	; (8087f98 <atan+0x328>)
 8087e46:	f000 f9c1 	bl	80881cc <__aeabi_dsub>
 8087e4a:	2200      	movs	r2, #0
 8087e4c:	4606      	mov	r6, r0
 8087e4e:	460f      	mov	r7, r1
 8087e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8087e54:	4620      	mov	r0, r4
 8087e56:	4629      	mov	r1, r5
 8087e58:	f000 f9ba 	bl	80881d0 <__adddf3>
 8087e5c:	4602      	mov	r2, r0
 8087e5e:	460b      	mov	r3, r1
 8087e60:	4630      	mov	r0, r6
 8087e62:	4639      	mov	r1, r7
 8087e64:	f000 fc90 	bl	8088788 <__aeabi_ddiv>
 8087e68:	f04f 0b00 	mov.w	fp, #0
 8087e6c:	4604      	mov	r4, r0
 8087e6e:	460d      	mov	r5, r1
 8087e70:	e723      	b.n	8087cba <atan+0x4a>
 8087e72:	4640      	mov	r0, r8
 8087e74:	4649      	mov	r1, r9
 8087e76:	f000 f9ab 	bl	80881d0 <__adddf3>
 8087e7a:	4622      	mov	r2, r4
 8087e7c:	462b      	mov	r3, r5
 8087e7e:	f000 fb59 	bl	8088534 <__aeabi_dmul>
 8087e82:	4602      	mov	r2, r0
 8087e84:	460b      	mov	r3, r1
 8087e86:	4620      	mov	r0, r4
 8087e88:	4629      	mov	r1, r5
 8087e8a:	f000 f99f 	bl	80881cc <__aeabi_dsub>
 8087e8e:	4604      	mov	r4, r0
 8087e90:	e705      	b.n	8087c9e <atan+0x2e>
 8087e92:	4b43      	ldr	r3, [pc, #268]	; (8087fa0 <atan+0x330>)
 8087e94:	429e      	cmp	r6, r3
 8087e96:	dc1a      	bgt.n	8087ece <atan+0x25e>
 8087e98:	2200      	movs	r2, #0
 8087e9a:	4b42      	ldr	r3, [pc, #264]	; (8087fa4 <atan+0x334>)
 8087e9c:	f000 f996 	bl	80881cc <__aeabi_dsub>
 8087ea0:	2200      	movs	r2, #0
 8087ea2:	4606      	mov	r6, r0
 8087ea4:	460f      	mov	r7, r1
 8087ea6:	4b3f      	ldr	r3, [pc, #252]	; (8087fa4 <atan+0x334>)
 8087ea8:	4620      	mov	r0, r4
 8087eaa:	4629      	mov	r1, r5
 8087eac:	f000 fb42 	bl	8088534 <__aeabi_dmul>
 8087eb0:	2200      	movs	r2, #0
 8087eb2:	4b39      	ldr	r3, [pc, #228]	; (8087f98 <atan+0x328>)
 8087eb4:	f000 f98c 	bl	80881d0 <__adddf3>
 8087eb8:	4602      	mov	r2, r0
 8087eba:	460b      	mov	r3, r1
 8087ebc:	4630      	mov	r0, r6
 8087ebe:	4639      	mov	r1, r7
 8087ec0:	f000 fc62 	bl	8088788 <__aeabi_ddiv>
 8087ec4:	f04f 0b02 	mov.w	fp, #2
 8087ec8:	4604      	mov	r4, r0
 8087eca:	460d      	mov	r5, r1
 8087ecc:	e6f5      	b.n	8087cba <atan+0x4a>
 8087ece:	4602      	mov	r2, r0
 8087ed0:	460b      	mov	r3, r1
 8087ed2:	2000      	movs	r0, #0
 8087ed4:	4934      	ldr	r1, [pc, #208]	; (8087fa8 <atan+0x338>)
 8087ed6:	f000 fc57 	bl	8088788 <__aeabi_ddiv>
 8087eda:	f04f 0b03 	mov.w	fp, #3
 8087ede:	4604      	mov	r4, r0
 8087ee0:	460d      	mov	r5, r1
 8087ee2:	e6ea      	b.n	8087cba <atan+0x4a>
 8087ee4:	2200      	movs	r2, #0
 8087ee6:	4b2c      	ldr	r3, [pc, #176]	; (8087f98 <atan+0x328>)
 8087ee8:	f000 f970 	bl	80881cc <__aeabi_dsub>
 8087eec:	2200      	movs	r2, #0
 8087eee:	4606      	mov	r6, r0
 8087ef0:	460f      	mov	r7, r1
 8087ef2:	4b29      	ldr	r3, [pc, #164]	; (8087f98 <atan+0x328>)
 8087ef4:	4620      	mov	r0, r4
 8087ef6:	4629      	mov	r1, r5
 8087ef8:	f000 f96a 	bl	80881d0 <__adddf3>
 8087efc:	4602      	mov	r2, r0
 8087efe:	460b      	mov	r3, r1
 8087f00:	4630      	mov	r0, r6
 8087f02:	4639      	mov	r1, r7
 8087f04:	f000 fc40 	bl	8088788 <__aeabi_ddiv>
 8087f08:	f04f 0b01 	mov.w	fp, #1
 8087f0c:	4604      	mov	r4, r0
 8087f0e:	460d      	mov	r5, r1
 8087f10:	e6d3      	b.n	8087cba <atan+0x4a>
 8087f12:	bf00      	nop
 8087f14:	f3af 8000 	nop.w
 8087f18:	e322da11 	.word	0xe322da11
 8087f1c:	3f90ad3a 	.word	0x3f90ad3a
 8087f20:	24760deb 	.word	0x24760deb
 8087f24:	3fa97b4b 	.word	0x3fa97b4b
 8087f28:	a0d03d51 	.word	0xa0d03d51
 8087f2c:	3fb10d66 	.word	0x3fb10d66
 8087f30:	c54c206e 	.word	0xc54c206e
 8087f34:	3fb745cd 	.word	0x3fb745cd
 8087f38:	920083ff 	.word	0x920083ff
 8087f3c:	3fc24924 	.word	0x3fc24924
 8087f40:	5555550d 	.word	0x5555550d
 8087f44:	3fd55555 	.word	0x3fd55555
 8087f48:	2c6a6c2f 	.word	0x2c6a6c2f
 8087f4c:	bfa2b444 	.word	0xbfa2b444
 8087f50:	52defd9a 	.word	0x52defd9a
 8087f54:	3fadde2d 	.word	0x3fadde2d
 8087f58:	af749a6d 	.word	0xaf749a6d
 8087f5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8087f60:	fe231671 	.word	0xfe231671
 8087f64:	3fbc71c6 	.word	0x3fbc71c6
 8087f68:	9998ebc4 	.word	0x9998ebc4
 8087f6c:	3fc99999 	.word	0x3fc99999
 8087f70:	8800759c 	.word	0x8800759c
 8087f74:	7e37e43c 	.word	0x7e37e43c
 8087f78:	440fffff 	.word	0x440fffff
 8087f7c:	7ff00000 	.word	0x7ff00000
 8087f80:	3ff921fb 	.word	0x3ff921fb
 8087f84:	bff921fb 	.word	0xbff921fb
 8087f88:	54442d18 	.word	0x54442d18
 8087f8c:	3fdbffff 	.word	0x3fdbffff
 8087f90:	0808bdf0 	.word	0x0808bdf0
 8087f94:	0808bdd0 	.word	0x0808bdd0
 8087f98:	3ff00000 	.word	0x3ff00000
 8087f9c:	3ff2ffff 	.word	0x3ff2ffff
 8087fa0:	40037fff 	.word	0x40037fff
 8087fa4:	3ff80000 	.word	0x3ff80000
 8087fa8:	bff00000 	.word	0xbff00000

08087fac <fabs>:
 8087fac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8087fb0:	4770      	bx	lr
 8087fb2:	bf00      	nop
 8087fb4:	0000      	movs	r0, r0
	...

08087fb8 <floor>:
 8087fb8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8087fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087fc0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8087fc4:	2e13      	cmp	r6, #19
 8087fc6:	460b      	mov	r3, r1
 8087fc8:	4604      	mov	r4, r0
 8087fca:	460d      	mov	r5, r1
 8087fcc:	4688      	mov	r8, r1
 8087fce:	4607      	mov	r7, r0
 8087fd0:	dc1c      	bgt.n	808800c <floor+0x54>
 8087fd2:	2e00      	cmp	r6, #0
 8087fd4:	db3f      	blt.n	8088056 <floor+0x9e>
 8087fd6:	4a3a      	ldr	r2, [pc, #232]	; (80880c0 <floor+0x108>)
 8087fd8:	4686      	mov	lr, r0
 8087fda:	fa42 f906 	asr.w	r9, r2, r6
 8087fde:	ea01 0209 	and.w	r2, r1, r9
 8087fe2:	4302      	orrs	r2, r0
 8087fe4:	d017      	beq.n	8088016 <floor+0x5e>
 8087fe6:	a334      	add	r3, pc, #208	; (adr r3, 80880b8 <floor+0x100>)
 8087fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8087fec:	f000 f8f0 	bl	80881d0 <__adddf3>
 8087ff0:	2200      	movs	r2, #0
 8087ff2:	2300      	movs	r3, #0
 8087ff4:	f000 fd2e 	bl	8088a54 <__aeabi_dcmpgt>
 8087ff8:	b120      	cbz	r0, 8088004 <floor+0x4c>
 8087ffa:	2d00      	cmp	r5, #0
 8087ffc:	db40      	blt.n	8088080 <floor+0xc8>
 8087ffe:	ea28 0509 	bic.w	r5, r8, r9
 8088002:	2700      	movs	r7, #0
 8088004:	4638      	mov	r0, r7
 8088006:	4629      	mov	r1, r5
 8088008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808800c:	2e33      	cmp	r6, #51	; 0x33
 808800e:	dd06      	ble.n	808801e <floor+0x66>
 8088010:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8088014:	d02f      	beq.n	8088076 <floor+0xbe>
 8088016:	4620      	mov	r0, r4
 8088018:	4619      	mov	r1, r3
 808801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808801e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8088022:	f04f 39ff 	mov.w	r9, #4294967295
 8088026:	fa29 f902 	lsr.w	r9, r9, r2
 808802a:	ea10 0f09 	tst.w	r0, r9
 808802e:	d0f2      	beq.n	8088016 <floor+0x5e>
 8088030:	a321      	add	r3, pc, #132	; (adr r3, 80880b8 <floor+0x100>)
 8088032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088036:	f000 f8cb 	bl	80881d0 <__adddf3>
 808803a:	2200      	movs	r2, #0
 808803c:	2300      	movs	r3, #0
 808803e:	f000 fd09 	bl	8088a54 <__aeabi_dcmpgt>
 8088042:	2800      	cmp	r0, #0
 8088044:	d0de      	beq.n	8088004 <floor+0x4c>
 8088046:	2d00      	cmp	r5, #0
 8088048:	db20      	blt.n	808808c <floor+0xd4>
 808804a:	4645      	mov	r5, r8
 808804c:	ea27 0709 	bic.w	r7, r7, r9
 8088050:	4638      	mov	r0, r7
 8088052:	4629      	mov	r1, r5
 8088054:	e7d8      	b.n	8088008 <floor+0x50>
 8088056:	a318      	add	r3, pc, #96	; (adr r3, 80880b8 <floor+0x100>)
 8088058:	e9d3 2300 	ldrd	r2, r3, [r3]
 808805c:	f000 f8b8 	bl	80881d0 <__adddf3>
 8088060:	2200      	movs	r2, #0
 8088062:	2300      	movs	r3, #0
 8088064:	f000 fcf6 	bl	8088a54 <__aeabi_dcmpgt>
 8088068:	2800      	cmp	r0, #0
 808806a:	d0cb      	beq.n	8088004 <floor+0x4c>
 808806c:	2d00      	cmp	r5, #0
 808806e:	db18      	blt.n	80880a2 <floor+0xea>
 8088070:	2700      	movs	r7, #0
 8088072:	463d      	mov	r5, r7
 8088074:	e7c6      	b.n	8088004 <floor+0x4c>
 8088076:	4602      	mov	r2, r0
 8088078:	460b      	mov	r3, r1
 808807a:	f000 f8a9 	bl	80881d0 <__adddf3>
 808807e:	e7cc      	b.n	808801a <floor+0x62>
 8088080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8088084:	fa43 f606 	asr.w	r6, r3, r6
 8088088:	44b0      	add	r8, r6
 808808a:	e7b8      	b.n	8087ffe <floor+0x46>
 808808c:	2e14      	cmp	r6, #20
 808808e:	d010      	beq.n	80880b2 <floor+0xfa>
 8088090:	2301      	movs	r3, #1
 8088092:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8088096:	fa03 f606 	lsl.w	r6, r3, r6
 808809a:	1937      	adds	r7, r6, r4
 808809c:	bf28      	it	cs
 808809e:	4498      	addcs	r8, r3
 80880a0:	e7d3      	b.n	808804a <floor+0x92>
 80880a2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80880a6:	4b07      	ldr	r3, [pc, #28]	; (80880c4 <floor+0x10c>)
 80880a8:	4322      	orrs	r2, r4
 80880aa:	bf18      	it	ne
 80880ac:	461d      	movne	r5, r3
 80880ae:	2700      	movs	r7, #0
 80880b0:	e7a8      	b.n	8088004 <floor+0x4c>
 80880b2:	f105 0801 	add.w	r8, r5, #1
 80880b6:	e7c8      	b.n	808804a <floor+0x92>
 80880b8:	8800759c 	.word	0x8800759c
 80880bc:	7e37e43c 	.word	0x7e37e43c
 80880c0:	000fffff 	.word	0x000fffff
 80880c4:	bff00000 	.word	0xbff00000

080880c8 <matherr>:
 80880c8:	2000      	movs	r0, #0
 80880ca:	4770      	bx	lr
 80880cc:	0000      	movs	r0, r0
	...

080880d0 <scalbn>:
 80880d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80880d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80880d6:	4604      	mov	r4, r0
 80880d8:	460d      	mov	r5, r1
 80880da:	460b      	mov	r3, r1
 80880dc:	4617      	mov	r7, r2
 80880de:	bb06      	cbnz	r6, 8088122 <scalbn+0x52>
 80880e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80880e4:	4303      	orrs	r3, r0
 80880e6:	d025      	beq.n	8088134 <scalbn+0x64>
 80880e8:	2200      	movs	r2, #0
 80880ea:	4b2f      	ldr	r3, [pc, #188]	; (80881a8 <scalbn+0xd8>)
 80880ec:	f000 fa22 	bl	8088534 <__aeabi_dmul>
 80880f0:	4a2e      	ldr	r2, [pc, #184]	; (80881ac <scalbn+0xdc>)
 80880f2:	4604      	mov	r4, r0
 80880f4:	4297      	cmp	r7, r2
 80880f6:	460d      	mov	r5, r1
 80880f8:	460b      	mov	r3, r1
 80880fa:	db2a      	blt.n	8088152 <scalbn+0x82>
 80880fc:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8088100:	3e36      	subs	r6, #54	; 0x36
 8088102:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8088106:	443e      	add	r6, r7
 8088108:	4296      	cmp	r6, r2
 808810a:	dc28      	bgt.n	808815e <scalbn+0x8e>
 808810c:	2e00      	cmp	r6, #0
 808810e:	dd12      	ble.n	8088136 <scalbn+0x66>
 8088110:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8088114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8088118:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 808811c:	4620      	mov	r0, r4
 808811e:	4629      	mov	r1, r5
 8088120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088122:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8088126:	4296      	cmp	r6, r2
 8088128:	d1eb      	bne.n	8088102 <scalbn+0x32>
 808812a:	4602      	mov	r2, r0
 808812c:	460b      	mov	r3, r1
 808812e:	f000 f84f 	bl	80881d0 <__adddf3>
 8088132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088136:	f116 0f35 	cmn.w	r6, #53	; 0x35
 808813a:	da1d      	bge.n	8088178 <scalbn+0xa8>
 808813c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8088140:	429f      	cmp	r7, r3
 8088142:	dc0c      	bgt.n	808815e <scalbn+0x8e>
 8088144:	a114      	add	r1, pc, #80	; (adr r1, 8088198 <scalbn+0xc8>)
 8088146:	e9d1 0100 	ldrd	r0, r1, [r1]
 808814a:	4622      	mov	r2, r4
 808814c:	462b      	mov	r3, r5
 808814e:	f000 f831 	bl	80881b4 <copysign>
 8088152:	a311      	add	r3, pc, #68	; (adr r3, 8088198 <scalbn+0xc8>)
 8088154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088158:	f000 f9ec 	bl	8088534 <__aeabi_dmul>
 808815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808815e:	4622      	mov	r2, r4
 8088160:	a10f      	add	r1, pc, #60	; (adr r1, 80881a0 <scalbn+0xd0>)
 8088162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8088166:	462b      	mov	r3, r5
 8088168:	f000 f824 	bl	80881b4 <copysign>
 808816c:	a30c      	add	r3, pc, #48	; (adr r3, 80881a0 <scalbn+0xd0>)
 808816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088172:	f000 f9df 	bl	8088534 <__aeabi_dmul>
 8088176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088178:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 808817c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8088180:	3636      	adds	r6, #54	; 0x36
 8088182:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8088186:	4620      	mov	r0, r4
 8088188:	4629      	mov	r1, r5
 808818a:	2200      	movs	r2, #0
 808818c:	4b08      	ldr	r3, [pc, #32]	; (80881b0 <scalbn+0xe0>)
 808818e:	f000 f9d1 	bl	8088534 <__aeabi_dmul>
 8088192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088194:	f3af 8000 	nop.w
 8088198:	c2f8f359 	.word	0xc2f8f359
 808819c:	01a56e1f 	.word	0x01a56e1f
 80881a0:	8800759c 	.word	0x8800759c
 80881a4:	7e37e43c 	.word	0x7e37e43c
 80881a8:	43500000 	.word	0x43500000
 80881ac:	ffff3cb0 	.word	0xffff3cb0
 80881b0:	3c900000 	.word	0x3c900000

080881b4 <copysign>:
 80881b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80881b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80881bc:	ea42 0103 	orr.w	r1, r2, r3
 80881c0:	4770      	bx	lr
 80881c2:	bf00      	nop

080881c4 <__aeabi_drsub>:
 80881c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80881c8:	e002      	b.n	80881d0 <__adddf3>
 80881ca:	bf00      	nop

080881cc <__aeabi_dsub>:
 80881cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080881d0 <__adddf3>:
 80881d0:	b530      	push	{r4, r5, lr}
 80881d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80881d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80881da:	ea94 0f05 	teq	r4, r5
 80881de:	bf08      	it	eq
 80881e0:	ea90 0f02 	teqeq	r0, r2
 80881e4:	bf1f      	itttt	ne
 80881e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80881ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80881ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80881f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80881f6:	f000 80e2 	beq.w	80883be <__adddf3+0x1ee>
 80881fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80881fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8088202:	bfb8      	it	lt
 8088204:	426d      	neglt	r5, r5
 8088206:	dd0c      	ble.n	8088222 <__adddf3+0x52>
 8088208:	442c      	add	r4, r5
 808820a:	ea80 0202 	eor.w	r2, r0, r2
 808820e:	ea81 0303 	eor.w	r3, r1, r3
 8088212:	ea82 0000 	eor.w	r0, r2, r0
 8088216:	ea83 0101 	eor.w	r1, r3, r1
 808821a:	ea80 0202 	eor.w	r2, r0, r2
 808821e:	ea81 0303 	eor.w	r3, r1, r3
 8088222:	2d36      	cmp	r5, #54	; 0x36
 8088224:	bf88      	it	hi
 8088226:	bd30      	pophi	{r4, r5, pc}
 8088228:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808822c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8088230:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8088234:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8088238:	d002      	beq.n	8088240 <__adddf3+0x70>
 808823a:	4240      	negs	r0, r0
 808823c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088240:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8088244:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8088248:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808824c:	d002      	beq.n	8088254 <__adddf3+0x84>
 808824e:	4252      	negs	r2, r2
 8088250:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8088254:	ea94 0f05 	teq	r4, r5
 8088258:	f000 80a7 	beq.w	80883aa <__adddf3+0x1da>
 808825c:	f1a4 0401 	sub.w	r4, r4, #1
 8088260:	f1d5 0e20 	rsbs	lr, r5, #32
 8088264:	db0d      	blt.n	8088282 <__adddf3+0xb2>
 8088266:	fa02 fc0e 	lsl.w	ip, r2, lr
 808826a:	fa22 f205 	lsr.w	r2, r2, r5
 808826e:	1880      	adds	r0, r0, r2
 8088270:	f141 0100 	adc.w	r1, r1, #0
 8088274:	fa03 f20e 	lsl.w	r2, r3, lr
 8088278:	1880      	adds	r0, r0, r2
 808827a:	fa43 f305 	asr.w	r3, r3, r5
 808827e:	4159      	adcs	r1, r3
 8088280:	e00e      	b.n	80882a0 <__adddf3+0xd0>
 8088282:	f1a5 0520 	sub.w	r5, r5, #32
 8088286:	f10e 0e20 	add.w	lr, lr, #32
 808828a:	2a01      	cmp	r2, #1
 808828c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8088290:	bf28      	it	cs
 8088292:	f04c 0c02 	orrcs.w	ip, ip, #2
 8088296:	fa43 f305 	asr.w	r3, r3, r5
 808829a:	18c0      	adds	r0, r0, r3
 808829c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80882a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80882a4:	d507      	bpl.n	80882b6 <__adddf3+0xe6>
 80882a6:	f04f 0e00 	mov.w	lr, #0
 80882aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80882ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80882b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80882b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80882ba:	d31b      	bcc.n	80882f4 <__adddf3+0x124>
 80882bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80882c0:	d30c      	bcc.n	80882dc <__adddf3+0x10c>
 80882c2:	0849      	lsrs	r1, r1, #1
 80882c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80882c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80882cc:	f104 0401 	add.w	r4, r4, #1
 80882d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80882d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80882d8:	f080 809a 	bcs.w	8088410 <__adddf3+0x240>
 80882dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80882e0:	bf08      	it	eq
 80882e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80882e6:	f150 0000 	adcs.w	r0, r0, #0
 80882ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80882ee:	ea41 0105 	orr.w	r1, r1, r5
 80882f2:	bd30      	pop	{r4, r5, pc}
 80882f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80882f8:	4140      	adcs	r0, r0
 80882fa:	eb41 0101 	adc.w	r1, r1, r1
 80882fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8088302:	f1a4 0401 	sub.w	r4, r4, #1
 8088306:	d1e9      	bne.n	80882dc <__adddf3+0x10c>
 8088308:	f091 0f00 	teq	r1, #0
 808830c:	bf04      	itt	eq
 808830e:	4601      	moveq	r1, r0
 8088310:	2000      	moveq	r0, #0
 8088312:	fab1 f381 	clz	r3, r1
 8088316:	bf08      	it	eq
 8088318:	3320      	addeq	r3, #32
 808831a:	f1a3 030b 	sub.w	r3, r3, #11
 808831e:	f1b3 0220 	subs.w	r2, r3, #32
 8088322:	da0c      	bge.n	808833e <__adddf3+0x16e>
 8088324:	320c      	adds	r2, #12
 8088326:	dd08      	ble.n	808833a <__adddf3+0x16a>
 8088328:	f102 0c14 	add.w	ip, r2, #20
 808832c:	f1c2 020c 	rsb	r2, r2, #12
 8088330:	fa01 f00c 	lsl.w	r0, r1, ip
 8088334:	fa21 f102 	lsr.w	r1, r1, r2
 8088338:	e00c      	b.n	8088354 <__adddf3+0x184>
 808833a:	f102 0214 	add.w	r2, r2, #20
 808833e:	bfd8      	it	le
 8088340:	f1c2 0c20 	rsble	ip, r2, #32
 8088344:	fa01 f102 	lsl.w	r1, r1, r2
 8088348:	fa20 fc0c 	lsr.w	ip, r0, ip
 808834c:	bfdc      	itt	le
 808834e:	ea41 010c 	orrle.w	r1, r1, ip
 8088352:	4090      	lslle	r0, r2
 8088354:	1ae4      	subs	r4, r4, r3
 8088356:	bfa2      	ittt	ge
 8088358:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808835c:	4329      	orrge	r1, r5
 808835e:	bd30      	popge	{r4, r5, pc}
 8088360:	ea6f 0404 	mvn.w	r4, r4
 8088364:	3c1f      	subs	r4, #31
 8088366:	da1c      	bge.n	80883a2 <__adddf3+0x1d2>
 8088368:	340c      	adds	r4, #12
 808836a:	dc0e      	bgt.n	808838a <__adddf3+0x1ba>
 808836c:	f104 0414 	add.w	r4, r4, #20
 8088370:	f1c4 0220 	rsb	r2, r4, #32
 8088374:	fa20 f004 	lsr.w	r0, r0, r4
 8088378:	fa01 f302 	lsl.w	r3, r1, r2
 808837c:	ea40 0003 	orr.w	r0, r0, r3
 8088380:	fa21 f304 	lsr.w	r3, r1, r4
 8088384:	ea45 0103 	orr.w	r1, r5, r3
 8088388:	bd30      	pop	{r4, r5, pc}
 808838a:	f1c4 040c 	rsb	r4, r4, #12
 808838e:	f1c4 0220 	rsb	r2, r4, #32
 8088392:	fa20 f002 	lsr.w	r0, r0, r2
 8088396:	fa01 f304 	lsl.w	r3, r1, r4
 808839a:	ea40 0003 	orr.w	r0, r0, r3
 808839e:	4629      	mov	r1, r5
 80883a0:	bd30      	pop	{r4, r5, pc}
 80883a2:	fa21 f004 	lsr.w	r0, r1, r4
 80883a6:	4629      	mov	r1, r5
 80883a8:	bd30      	pop	{r4, r5, pc}
 80883aa:	f094 0f00 	teq	r4, #0
 80883ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80883b2:	bf06      	itte	eq
 80883b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80883b8:	3401      	addeq	r4, #1
 80883ba:	3d01      	subne	r5, #1
 80883bc:	e74e      	b.n	808825c <__adddf3+0x8c>
 80883be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80883c2:	bf18      	it	ne
 80883c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80883c8:	d029      	beq.n	808841e <__adddf3+0x24e>
 80883ca:	ea94 0f05 	teq	r4, r5
 80883ce:	bf08      	it	eq
 80883d0:	ea90 0f02 	teqeq	r0, r2
 80883d4:	d005      	beq.n	80883e2 <__adddf3+0x212>
 80883d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80883da:	bf04      	itt	eq
 80883dc:	4619      	moveq	r1, r3
 80883de:	4610      	moveq	r0, r2
 80883e0:	bd30      	pop	{r4, r5, pc}
 80883e2:	ea91 0f03 	teq	r1, r3
 80883e6:	bf1e      	ittt	ne
 80883e8:	2100      	movne	r1, #0
 80883ea:	2000      	movne	r0, #0
 80883ec:	bd30      	popne	{r4, r5, pc}
 80883ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80883f2:	d105      	bne.n	8088400 <__adddf3+0x230>
 80883f4:	0040      	lsls	r0, r0, #1
 80883f6:	4149      	adcs	r1, r1
 80883f8:	bf28      	it	cs
 80883fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80883fe:	bd30      	pop	{r4, r5, pc}
 8088400:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8088404:	bf3c      	itt	cc
 8088406:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808840a:	bd30      	popcc	{r4, r5, pc}
 808840c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8088410:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8088414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088418:	f04f 0000 	mov.w	r0, #0
 808841c:	bd30      	pop	{r4, r5, pc}
 808841e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8088422:	bf1a      	itte	ne
 8088424:	4619      	movne	r1, r3
 8088426:	4610      	movne	r0, r2
 8088428:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808842c:	bf1c      	itt	ne
 808842e:	460b      	movne	r3, r1
 8088430:	4602      	movne	r2, r0
 8088432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088436:	bf06      	itte	eq
 8088438:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808843c:	ea91 0f03 	teqeq	r1, r3
 8088440:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8088444:	bd30      	pop	{r4, r5, pc}
 8088446:	bf00      	nop

08088448 <__aeabi_ui2d>:
 8088448:	f090 0f00 	teq	r0, #0
 808844c:	bf04      	itt	eq
 808844e:	2100      	moveq	r1, #0
 8088450:	4770      	bxeq	lr
 8088452:	b530      	push	{r4, r5, lr}
 8088454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808845c:	f04f 0500 	mov.w	r5, #0
 8088460:	f04f 0100 	mov.w	r1, #0
 8088464:	e750      	b.n	8088308 <__adddf3+0x138>
 8088466:	bf00      	nop

08088468 <__aeabi_i2d>:
 8088468:	f090 0f00 	teq	r0, #0
 808846c:	bf04      	itt	eq
 808846e:	2100      	moveq	r1, #0
 8088470:	4770      	bxeq	lr
 8088472:	b530      	push	{r4, r5, lr}
 8088474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8088478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808847c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8088480:	bf48      	it	mi
 8088482:	4240      	negmi	r0, r0
 8088484:	f04f 0100 	mov.w	r1, #0
 8088488:	e73e      	b.n	8088308 <__adddf3+0x138>
 808848a:	bf00      	nop

0808848c <__aeabi_f2d>:
 808848c:	0042      	lsls	r2, r0, #1
 808848e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8088492:	ea4f 0131 	mov.w	r1, r1, rrx
 8088496:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808849a:	bf1f      	itttt	ne
 808849c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80884a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80884a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80884a8:	4770      	bxne	lr
 80884aa:	f092 0f00 	teq	r2, #0
 80884ae:	bf14      	ite	ne
 80884b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80884b4:	4770      	bxeq	lr
 80884b6:	b530      	push	{r4, r5, lr}
 80884b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80884bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80884c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80884c4:	e720      	b.n	8088308 <__adddf3+0x138>
 80884c6:	bf00      	nop

080884c8 <__aeabi_ul2d>:
 80884c8:	ea50 0201 	orrs.w	r2, r0, r1
 80884cc:	bf08      	it	eq
 80884ce:	4770      	bxeq	lr
 80884d0:	b530      	push	{r4, r5, lr}
 80884d2:	f04f 0500 	mov.w	r5, #0
 80884d6:	e00a      	b.n	80884ee <__aeabi_l2d+0x16>

080884d8 <__aeabi_l2d>:
 80884d8:	ea50 0201 	orrs.w	r2, r0, r1
 80884dc:	bf08      	it	eq
 80884de:	4770      	bxeq	lr
 80884e0:	b530      	push	{r4, r5, lr}
 80884e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80884e6:	d502      	bpl.n	80884ee <__aeabi_l2d+0x16>
 80884e8:	4240      	negs	r0, r0
 80884ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80884ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80884f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80884f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80884fa:	f43f aedc 	beq.w	80882b6 <__adddf3+0xe6>
 80884fe:	f04f 0203 	mov.w	r2, #3
 8088502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8088506:	bf18      	it	ne
 8088508:	3203      	addne	r2, #3
 808850a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808850e:	bf18      	it	ne
 8088510:	3203      	addne	r2, #3
 8088512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8088516:	f1c2 0320 	rsb	r3, r2, #32
 808851a:	fa00 fc03 	lsl.w	ip, r0, r3
 808851e:	fa20 f002 	lsr.w	r0, r0, r2
 8088522:	fa01 fe03 	lsl.w	lr, r1, r3
 8088526:	ea40 000e 	orr.w	r0, r0, lr
 808852a:	fa21 f102 	lsr.w	r1, r1, r2
 808852e:	4414      	add	r4, r2
 8088530:	e6c1      	b.n	80882b6 <__adddf3+0xe6>
 8088532:	bf00      	nop

08088534 <__aeabi_dmul>:
 8088534:	b570      	push	{r4, r5, r6, lr}
 8088536:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808853a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808853e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088542:	bf1d      	ittte	ne
 8088544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8088548:	ea94 0f0c 	teqne	r4, ip
 808854c:	ea95 0f0c 	teqne	r5, ip
 8088550:	f000 f8de 	bleq	8088710 <__aeabi_dmul+0x1dc>
 8088554:	442c      	add	r4, r5
 8088556:	ea81 0603 	eor.w	r6, r1, r3
 808855a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808855e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8088562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8088566:	bf18      	it	ne
 8088568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808856c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8088574:	d038      	beq.n	80885e8 <__aeabi_dmul+0xb4>
 8088576:	fba0 ce02 	umull	ip, lr, r0, r2
 808857a:	f04f 0500 	mov.w	r5, #0
 808857e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8088582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8088586:	fbe0 e503 	umlal	lr, r5, r0, r3
 808858a:	f04f 0600 	mov.w	r6, #0
 808858e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8088592:	f09c 0f00 	teq	ip, #0
 8088596:	bf18      	it	ne
 8088598:	f04e 0e01 	orrne.w	lr, lr, #1
 808859c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80885a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80885a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80885a8:	d204      	bcs.n	80885b4 <__aeabi_dmul+0x80>
 80885aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80885ae:	416d      	adcs	r5, r5
 80885b0:	eb46 0606 	adc.w	r6, r6, r6
 80885b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80885b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80885bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80885c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80885c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80885c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80885cc:	bf88      	it	hi
 80885ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80885d2:	d81e      	bhi.n	8088612 <__aeabi_dmul+0xde>
 80885d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80885d8:	bf08      	it	eq
 80885da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80885de:	f150 0000 	adcs.w	r0, r0, #0
 80885e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80885e6:	bd70      	pop	{r4, r5, r6, pc}
 80885e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80885ec:	ea46 0101 	orr.w	r1, r6, r1
 80885f0:	ea40 0002 	orr.w	r0, r0, r2
 80885f4:	ea81 0103 	eor.w	r1, r1, r3
 80885f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80885fc:	bfc2      	ittt	gt
 80885fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8088602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8088606:	bd70      	popgt	{r4, r5, r6, pc}
 8088608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808860c:	f04f 0e00 	mov.w	lr, #0
 8088610:	3c01      	subs	r4, #1
 8088612:	f300 80ab 	bgt.w	808876c <__aeabi_dmul+0x238>
 8088616:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808861a:	bfde      	ittt	le
 808861c:	2000      	movle	r0, #0
 808861e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8088622:	bd70      	pople	{r4, r5, r6, pc}
 8088624:	f1c4 0400 	rsb	r4, r4, #0
 8088628:	3c20      	subs	r4, #32
 808862a:	da35      	bge.n	8088698 <__aeabi_dmul+0x164>
 808862c:	340c      	adds	r4, #12
 808862e:	dc1b      	bgt.n	8088668 <__aeabi_dmul+0x134>
 8088630:	f104 0414 	add.w	r4, r4, #20
 8088634:	f1c4 0520 	rsb	r5, r4, #32
 8088638:	fa00 f305 	lsl.w	r3, r0, r5
 808863c:	fa20 f004 	lsr.w	r0, r0, r4
 8088640:	fa01 f205 	lsl.w	r2, r1, r5
 8088644:	ea40 0002 	orr.w	r0, r0, r2
 8088648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808864c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8088650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088654:	fa21 f604 	lsr.w	r6, r1, r4
 8088658:	eb42 0106 	adc.w	r1, r2, r6
 808865c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088660:	bf08      	it	eq
 8088662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088666:	bd70      	pop	{r4, r5, r6, pc}
 8088668:	f1c4 040c 	rsb	r4, r4, #12
 808866c:	f1c4 0520 	rsb	r5, r4, #32
 8088670:	fa00 f304 	lsl.w	r3, r0, r4
 8088674:	fa20 f005 	lsr.w	r0, r0, r5
 8088678:	fa01 f204 	lsl.w	r2, r1, r4
 808867c:	ea40 0002 	orr.w	r0, r0, r2
 8088680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8088688:	f141 0100 	adc.w	r1, r1, #0
 808868c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8088690:	bf08      	it	eq
 8088692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8088696:	bd70      	pop	{r4, r5, r6, pc}
 8088698:	f1c4 0520 	rsb	r5, r4, #32
 808869c:	fa00 f205 	lsl.w	r2, r0, r5
 80886a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80886a4:	fa20 f304 	lsr.w	r3, r0, r4
 80886a8:	fa01 f205 	lsl.w	r2, r1, r5
 80886ac:	ea43 0302 	orr.w	r3, r3, r2
 80886b0:	fa21 f004 	lsr.w	r0, r1, r4
 80886b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80886b8:	fa21 f204 	lsr.w	r2, r1, r4
 80886bc:	ea20 0002 	bic.w	r0, r0, r2
 80886c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80886c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80886c8:	bf08      	it	eq
 80886ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80886ce:	bd70      	pop	{r4, r5, r6, pc}
 80886d0:	f094 0f00 	teq	r4, #0
 80886d4:	d10f      	bne.n	80886f6 <__aeabi_dmul+0x1c2>
 80886d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80886da:	0040      	lsls	r0, r0, #1
 80886dc:	eb41 0101 	adc.w	r1, r1, r1
 80886e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80886e4:	bf08      	it	eq
 80886e6:	3c01      	subeq	r4, #1
 80886e8:	d0f7      	beq.n	80886da <__aeabi_dmul+0x1a6>
 80886ea:	ea41 0106 	orr.w	r1, r1, r6
 80886ee:	f095 0f00 	teq	r5, #0
 80886f2:	bf18      	it	ne
 80886f4:	4770      	bxne	lr
 80886f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80886fa:	0052      	lsls	r2, r2, #1
 80886fc:	eb43 0303 	adc.w	r3, r3, r3
 8088700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8088704:	bf08      	it	eq
 8088706:	3d01      	subeq	r5, #1
 8088708:	d0f7      	beq.n	80886fa <__aeabi_dmul+0x1c6>
 808870a:	ea43 0306 	orr.w	r3, r3, r6
 808870e:	4770      	bx	lr
 8088710:	ea94 0f0c 	teq	r4, ip
 8088714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8088718:	bf18      	it	ne
 808871a:	ea95 0f0c 	teqne	r5, ip
 808871e:	d00c      	beq.n	808873a <__aeabi_dmul+0x206>
 8088720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8088724:	bf18      	it	ne
 8088726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808872a:	d1d1      	bne.n	80886d0 <__aeabi_dmul+0x19c>
 808872c:	ea81 0103 	eor.w	r1, r1, r3
 8088730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088734:	f04f 0000 	mov.w	r0, #0
 8088738:	bd70      	pop	{r4, r5, r6, pc}
 808873a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808873e:	bf06      	itte	eq
 8088740:	4610      	moveq	r0, r2
 8088742:	4619      	moveq	r1, r3
 8088744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088748:	d019      	beq.n	808877e <__aeabi_dmul+0x24a>
 808874a:	ea94 0f0c 	teq	r4, ip
 808874e:	d102      	bne.n	8088756 <__aeabi_dmul+0x222>
 8088750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8088754:	d113      	bne.n	808877e <__aeabi_dmul+0x24a>
 8088756:	ea95 0f0c 	teq	r5, ip
 808875a:	d105      	bne.n	8088768 <__aeabi_dmul+0x234>
 808875c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8088760:	bf1c      	itt	ne
 8088762:	4610      	movne	r0, r2
 8088764:	4619      	movne	r1, r3
 8088766:	d10a      	bne.n	808877e <__aeabi_dmul+0x24a>
 8088768:	ea81 0103 	eor.w	r1, r1, r3
 808876c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8088770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8088778:	f04f 0000 	mov.w	r0, #0
 808877c:	bd70      	pop	{r4, r5, r6, pc}
 808877e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8088782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8088786:	bd70      	pop	{r4, r5, r6, pc}

08088788 <__aeabi_ddiv>:
 8088788:	b570      	push	{r4, r5, r6, lr}
 808878a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808878e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8088792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8088796:	bf1d      	ittte	ne
 8088798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808879c:	ea94 0f0c 	teqne	r4, ip
 80887a0:	ea95 0f0c 	teqne	r5, ip
 80887a4:	f000 f8a7 	bleq	80888f6 <__aeabi_ddiv+0x16e>
 80887a8:	eba4 0405 	sub.w	r4, r4, r5
 80887ac:	ea81 0e03 	eor.w	lr, r1, r3
 80887b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80887b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80887b8:	f000 8088 	beq.w	80888cc <__aeabi_ddiv+0x144>
 80887bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80887c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80887c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80887c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80887cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80887d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80887d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80887d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80887dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80887e0:	429d      	cmp	r5, r3
 80887e2:	bf08      	it	eq
 80887e4:	4296      	cmpeq	r6, r2
 80887e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80887ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80887ee:	d202      	bcs.n	80887f6 <__aeabi_ddiv+0x6e>
 80887f0:	085b      	lsrs	r3, r3, #1
 80887f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80887f6:	1ab6      	subs	r6, r6, r2
 80887f8:	eb65 0503 	sbc.w	r5, r5, r3
 80887fc:	085b      	lsrs	r3, r3, #1
 80887fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8088802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8088806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808880a:	ebb6 0e02 	subs.w	lr, r6, r2
 808880e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088812:	bf22      	ittt	cs
 8088814:	1ab6      	subcs	r6, r6, r2
 8088816:	4675      	movcs	r5, lr
 8088818:	ea40 000c 	orrcs.w	r0, r0, ip
 808881c:	085b      	lsrs	r3, r3, #1
 808881e:	ea4f 0232 	mov.w	r2, r2, rrx
 8088822:	ebb6 0e02 	subs.w	lr, r6, r2
 8088826:	eb75 0e03 	sbcs.w	lr, r5, r3
 808882a:	bf22      	ittt	cs
 808882c:	1ab6      	subcs	r6, r6, r2
 808882e:	4675      	movcs	r5, lr
 8088830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088834:	085b      	lsrs	r3, r3, #1
 8088836:	ea4f 0232 	mov.w	r2, r2, rrx
 808883a:	ebb6 0e02 	subs.w	lr, r6, r2
 808883e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8088842:	bf22      	ittt	cs
 8088844:	1ab6      	subcs	r6, r6, r2
 8088846:	4675      	movcs	r5, lr
 8088848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808884c:	085b      	lsrs	r3, r3, #1
 808884e:	ea4f 0232 	mov.w	r2, r2, rrx
 8088852:	ebb6 0e02 	subs.w	lr, r6, r2
 8088856:	eb75 0e03 	sbcs.w	lr, r5, r3
 808885a:	bf22      	ittt	cs
 808885c:	1ab6      	subcs	r6, r6, r2
 808885e:	4675      	movcs	r5, lr
 8088860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088864:	ea55 0e06 	orrs.w	lr, r5, r6
 8088868:	d018      	beq.n	808889c <__aeabi_ddiv+0x114>
 808886a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808886e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8088872:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8088876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808887a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808887e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8088882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8088886:	d1c0      	bne.n	808880a <__aeabi_ddiv+0x82>
 8088888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808888c:	d10b      	bne.n	80888a6 <__aeabi_ddiv+0x11e>
 808888e:	ea41 0100 	orr.w	r1, r1, r0
 8088892:	f04f 0000 	mov.w	r0, #0
 8088896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808889a:	e7b6      	b.n	808880a <__aeabi_ddiv+0x82>
 808889c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80888a0:	bf04      	itt	eq
 80888a2:	4301      	orreq	r1, r0
 80888a4:	2000      	moveq	r0, #0
 80888a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80888aa:	bf88      	it	hi
 80888ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80888b0:	f63f aeaf 	bhi.w	8088612 <__aeabi_dmul+0xde>
 80888b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80888b8:	bf04      	itt	eq
 80888ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80888be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80888c2:	f150 0000 	adcs.w	r0, r0, #0
 80888c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80888ca:	bd70      	pop	{r4, r5, r6, pc}
 80888cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80888d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80888d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80888d8:	bfc2      	ittt	gt
 80888da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80888de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80888e2:	bd70      	popgt	{r4, r5, r6, pc}
 80888e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80888e8:	f04f 0e00 	mov.w	lr, #0
 80888ec:	3c01      	subs	r4, #1
 80888ee:	e690      	b.n	8088612 <__aeabi_dmul+0xde>
 80888f0:	ea45 0e06 	orr.w	lr, r5, r6
 80888f4:	e68d      	b.n	8088612 <__aeabi_dmul+0xde>
 80888f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80888fa:	ea94 0f0c 	teq	r4, ip
 80888fe:	bf08      	it	eq
 8088900:	ea95 0f0c 	teqeq	r5, ip
 8088904:	f43f af3b 	beq.w	808877e <__aeabi_dmul+0x24a>
 8088908:	ea94 0f0c 	teq	r4, ip
 808890c:	d10a      	bne.n	8088924 <__aeabi_ddiv+0x19c>
 808890e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8088912:	f47f af34 	bne.w	808877e <__aeabi_dmul+0x24a>
 8088916:	ea95 0f0c 	teq	r5, ip
 808891a:	f47f af25 	bne.w	8088768 <__aeabi_dmul+0x234>
 808891e:	4610      	mov	r0, r2
 8088920:	4619      	mov	r1, r3
 8088922:	e72c      	b.n	808877e <__aeabi_dmul+0x24a>
 8088924:	ea95 0f0c 	teq	r5, ip
 8088928:	d106      	bne.n	8088938 <__aeabi_ddiv+0x1b0>
 808892a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808892e:	f43f aefd 	beq.w	808872c <__aeabi_dmul+0x1f8>
 8088932:	4610      	mov	r0, r2
 8088934:	4619      	mov	r1, r3
 8088936:	e722      	b.n	808877e <__aeabi_dmul+0x24a>
 8088938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808893c:	bf18      	it	ne
 808893e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8088942:	f47f aec5 	bne.w	80886d0 <__aeabi_dmul+0x19c>
 8088946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808894a:	f47f af0d 	bne.w	8088768 <__aeabi_dmul+0x234>
 808894e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8088952:	f47f aeeb 	bne.w	808872c <__aeabi_dmul+0x1f8>
 8088956:	e712      	b.n	808877e <__aeabi_dmul+0x24a>

08088958 <__gedf2>:
 8088958:	f04f 3cff 	mov.w	ip, #4294967295
 808895c:	e006      	b.n	808896c <__cmpdf2+0x4>
 808895e:	bf00      	nop

08088960 <__ledf2>:
 8088960:	f04f 0c01 	mov.w	ip, #1
 8088964:	e002      	b.n	808896c <__cmpdf2+0x4>
 8088966:	bf00      	nop

08088968 <__cmpdf2>:
 8088968:	f04f 0c01 	mov.w	ip, #1
 808896c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8088970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808897c:	bf18      	it	ne
 808897e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8088982:	d01b      	beq.n	80889bc <__cmpdf2+0x54>
 8088984:	b001      	add	sp, #4
 8088986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808898a:	bf0c      	ite	eq
 808898c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8088990:	ea91 0f03 	teqne	r1, r3
 8088994:	bf02      	ittt	eq
 8088996:	ea90 0f02 	teqeq	r0, r2
 808899a:	2000      	moveq	r0, #0
 808899c:	4770      	bxeq	lr
 808899e:	f110 0f00 	cmn.w	r0, #0
 80889a2:	ea91 0f03 	teq	r1, r3
 80889a6:	bf58      	it	pl
 80889a8:	4299      	cmppl	r1, r3
 80889aa:	bf08      	it	eq
 80889ac:	4290      	cmpeq	r0, r2
 80889ae:	bf2c      	ite	cs
 80889b0:	17d8      	asrcs	r0, r3, #31
 80889b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80889b6:	f040 0001 	orr.w	r0, r0, #1
 80889ba:	4770      	bx	lr
 80889bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80889c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80889c4:	d102      	bne.n	80889cc <__cmpdf2+0x64>
 80889c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80889ca:	d107      	bne.n	80889dc <__cmpdf2+0x74>
 80889cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80889d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80889d4:	d1d6      	bne.n	8088984 <__cmpdf2+0x1c>
 80889d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80889da:	d0d3      	beq.n	8088984 <__cmpdf2+0x1c>
 80889dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80889e0:	4770      	bx	lr
 80889e2:	bf00      	nop

080889e4 <__aeabi_cdrcmple>:
 80889e4:	4684      	mov	ip, r0
 80889e6:	4610      	mov	r0, r2
 80889e8:	4662      	mov	r2, ip
 80889ea:	468c      	mov	ip, r1
 80889ec:	4619      	mov	r1, r3
 80889ee:	4663      	mov	r3, ip
 80889f0:	e000      	b.n	80889f4 <__aeabi_cdcmpeq>
 80889f2:	bf00      	nop

080889f4 <__aeabi_cdcmpeq>:
 80889f4:	b501      	push	{r0, lr}
 80889f6:	f7ff ffb7 	bl	8088968 <__cmpdf2>
 80889fa:	2800      	cmp	r0, #0
 80889fc:	bf48      	it	mi
 80889fe:	f110 0f00 	cmnmi.w	r0, #0
 8088a02:	bd01      	pop	{r0, pc}

08088a04 <__aeabi_dcmpeq>:
 8088a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088a08:	f7ff fff4 	bl	80889f4 <__aeabi_cdcmpeq>
 8088a0c:	bf0c      	ite	eq
 8088a0e:	2001      	moveq	r0, #1
 8088a10:	2000      	movne	r0, #0
 8088a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8088a16:	bf00      	nop

08088a18 <__aeabi_dcmplt>:
 8088a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088a1c:	f7ff ffea 	bl	80889f4 <__aeabi_cdcmpeq>
 8088a20:	bf34      	ite	cc
 8088a22:	2001      	movcc	r0, #1
 8088a24:	2000      	movcs	r0, #0
 8088a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8088a2a:	bf00      	nop

08088a2c <__aeabi_dcmple>:
 8088a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088a30:	f7ff ffe0 	bl	80889f4 <__aeabi_cdcmpeq>
 8088a34:	bf94      	ite	ls
 8088a36:	2001      	movls	r0, #1
 8088a38:	2000      	movhi	r0, #0
 8088a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8088a3e:	bf00      	nop

08088a40 <__aeabi_dcmpge>:
 8088a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088a44:	f7ff ffce 	bl	80889e4 <__aeabi_cdrcmple>
 8088a48:	bf94      	ite	ls
 8088a4a:	2001      	movls	r0, #1
 8088a4c:	2000      	movhi	r0, #0
 8088a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8088a52:	bf00      	nop

08088a54 <__aeabi_dcmpgt>:
 8088a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8088a58:	f7ff ffc4 	bl	80889e4 <__aeabi_cdrcmple>
 8088a5c:	bf34      	ite	cc
 8088a5e:	2001      	movcc	r0, #1
 8088a60:	2000      	movcs	r0, #0
 8088a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8088a66:	bf00      	nop

08088a68 <__aeabi_dcmpun>:
 8088a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8088a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088a70:	d102      	bne.n	8088a78 <__aeabi_dcmpun+0x10>
 8088a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8088a76:	d10a      	bne.n	8088a8e <__aeabi_dcmpun+0x26>
 8088a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8088a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8088a80:	d102      	bne.n	8088a88 <__aeabi_dcmpun+0x20>
 8088a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8088a86:	d102      	bne.n	8088a8e <__aeabi_dcmpun+0x26>
 8088a88:	f04f 0000 	mov.w	r0, #0
 8088a8c:	4770      	bx	lr
 8088a8e:	f04f 0001 	mov.w	r0, #1
 8088a92:	4770      	bx	lr

08088a94 <__aeabi_d2iz>:
 8088a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8088a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8088a9c:	d215      	bcs.n	8088aca <__aeabi_d2iz+0x36>
 8088a9e:	d511      	bpl.n	8088ac4 <__aeabi_d2iz+0x30>
 8088aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8088aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8088aa8:	d912      	bls.n	8088ad0 <__aeabi_d2iz+0x3c>
 8088aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8088aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8088ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8088ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8088aba:	fa23 f002 	lsr.w	r0, r3, r2
 8088abe:	bf18      	it	ne
 8088ac0:	4240      	negne	r0, r0
 8088ac2:	4770      	bx	lr
 8088ac4:	f04f 0000 	mov.w	r0, #0
 8088ac8:	4770      	bx	lr
 8088aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8088ace:	d105      	bne.n	8088adc <__aeabi_d2iz+0x48>
 8088ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8088ad4:	bf08      	it	eq
 8088ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8088ada:	4770      	bx	lr
 8088adc:	f04f 0000 	mov.w	r0, #0
 8088ae0:	4770      	bx	lr
 8088ae2:	bf00      	nop

08088ae4 <__aeabi_d2f>:
 8088ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8088ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8088aec:	bf24      	itt	cs
 8088aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8088af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8088af6:	d90d      	bls.n	8088b14 <__aeabi_d2f+0x30>
 8088af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8088b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8088b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8088b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8088b0c:	bf08      	it	eq
 8088b0e:	f020 0001 	biceq.w	r0, r0, #1
 8088b12:	4770      	bx	lr
 8088b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8088b18:	d121      	bne.n	8088b5e <__aeabi_d2f+0x7a>
 8088b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8088b1e:	bfbc      	itt	lt
 8088b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8088b24:	4770      	bxlt	lr
 8088b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8088b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8088b2e:	f1c2 0218 	rsb	r2, r2, #24
 8088b32:	f1c2 0c20 	rsb	ip, r2, #32
 8088b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8088b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8088b3e:	bf18      	it	ne
 8088b40:	f040 0001 	orrne.w	r0, r0, #1
 8088b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8088b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8088b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8088b50:	ea40 000c 	orr.w	r0, r0, ip
 8088b54:	fa23 f302 	lsr.w	r3, r3, r2
 8088b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8088b5c:	e7cc      	b.n	8088af8 <__aeabi_d2f+0x14>
 8088b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8088b62:	d107      	bne.n	8088b74 <__aeabi_d2f+0x90>
 8088b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8088b68:	bf1e      	ittt	ne
 8088b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8088b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8088b72:	4770      	bxne	lr
 8088b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8088b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088b80:	4770      	bx	lr
 8088b82:	bf00      	nop

08088b84 <__aeabi_frsub>:
 8088b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8088b88:	e002      	b.n	8088b90 <__addsf3>
 8088b8a:	bf00      	nop

08088b8c <__aeabi_fsub>:
 8088b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08088b90 <__addsf3>:
 8088b90:	0042      	lsls	r2, r0, #1
 8088b92:	bf1f      	itttt	ne
 8088b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8088b98:	ea92 0f03 	teqne	r2, r3
 8088b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8088ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088ba4:	d06a      	beq.n	8088c7c <__addsf3+0xec>
 8088ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8088baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8088bae:	bfc1      	itttt	gt
 8088bb0:	18d2      	addgt	r2, r2, r3
 8088bb2:	4041      	eorgt	r1, r0
 8088bb4:	4048      	eorgt	r0, r1
 8088bb6:	4041      	eorgt	r1, r0
 8088bb8:	bfb8      	it	lt
 8088bba:	425b      	neglt	r3, r3
 8088bbc:	2b19      	cmp	r3, #25
 8088bbe:	bf88      	it	hi
 8088bc0:	4770      	bxhi	lr
 8088bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8088bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8088bce:	bf18      	it	ne
 8088bd0:	4240      	negne	r0, r0
 8088bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8088bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8088bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8088bde:	bf18      	it	ne
 8088be0:	4249      	negne	r1, r1
 8088be2:	ea92 0f03 	teq	r2, r3
 8088be6:	d03f      	beq.n	8088c68 <__addsf3+0xd8>
 8088be8:	f1a2 0201 	sub.w	r2, r2, #1
 8088bec:	fa41 fc03 	asr.w	ip, r1, r3
 8088bf0:	eb10 000c 	adds.w	r0, r0, ip
 8088bf4:	f1c3 0320 	rsb	r3, r3, #32
 8088bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8088bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088c00:	d502      	bpl.n	8088c08 <__addsf3+0x78>
 8088c02:	4249      	negs	r1, r1
 8088c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8088c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8088c0c:	d313      	bcc.n	8088c36 <__addsf3+0xa6>
 8088c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8088c12:	d306      	bcc.n	8088c22 <__addsf3+0x92>
 8088c14:	0840      	lsrs	r0, r0, #1
 8088c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8088c1a:	f102 0201 	add.w	r2, r2, #1
 8088c1e:	2afe      	cmp	r2, #254	; 0xfe
 8088c20:	d251      	bcs.n	8088cc6 <__addsf3+0x136>
 8088c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8088c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088c2a:	bf08      	it	eq
 8088c2c:	f020 0001 	biceq.w	r0, r0, #1
 8088c30:	ea40 0003 	orr.w	r0, r0, r3
 8088c34:	4770      	bx	lr
 8088c36:	0049      	lsls	r1, r1, #1
 8088c38:	eb40 0000 	adc.w	r0, r0, r0
 8088c3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8088c40:	f1a2 0201 	sub.w	r2, r2, #1
 8088c44:	d1ed      	bne.n	8088c22 <__addsf3+0x92>
 8088c46:	fab0 fc80 	clz	ip, r0
 8088c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8088c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8088c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8088c56:	bfaa      	itet	ge
 8088c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8088c5c:	4252      	neglt	r2, r2
 8088c5e:	4318      	orrge	r0, r3
 8088c60:	bfbc      	itt	lt
 8088c62:	40d0      	lsrlt	r0, r2
 8088c64:	4318      	orrlt	r0, r3
 8088c66:	4770      	bx	lr
 8088c68:	f092 0f00 	teq	r2, #0
 8088c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8088c70:	bf06      	itte	eq
 8088c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8088c76:	3201      	addeq	r2, #1
 8088c78:	3b01      	subne	r3, #1
 8088c7a:	e7b5      	b.n	8088be8 <__addsf3+0x58>
 8088c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8088c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8088c84:	bf18      	it	ne
 8088c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8088c8a:	d021      	beq.n	8088cd0 <__addsf3+0x140>
 8088c8c:	ea92 0f03 	teq	r2, r3
 8088c90:	d004      	beq.n	8088c9c <__addsf3+0x10c>
 8088c92:	f092 0f00 	teq	r2, #0
 8088c96:	bf08      	it	eq
 8088c98:	4608      	moveq	r0, r1
 8088c9a:	4770      	bx	lr
 8088c9c:	ea90 0f01 	teq	r0, r1
 8088ca0:	bf1c      	itt	ne
 8088ca2:	2000      	movne	r0, #0
 8088ca4:	4770      	bxne	lr
 8088ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8088caa:	d104      	bne.n	8088cb6 <__addsf3+0x126>
 8088cac:	0040      	lsls	r0, r0, #1
 8088cae:	bf28      	it	cs
 8088cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8088cb4:	4770      	bx	lr
 8088cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8088cba:	bf3c      	itt	cc
 8088cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8088cc0:	4770      	bxcc	lr
 8088cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8088cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8088cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088cce:	4770      	bx	lr
 8088cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8088cd4:	bf16      	itet	ne
 8088cd6:	4608      	movne	r0, r1
 8088cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8088cdc:	4601      	movne	r1, r0
 8088cde:	0242      	lsls	r2, r0, #9
 8088ce0:	bf06      	itte	eq
 8088ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8088ce6:	ea90 0f01 	teqeq	r0, r1
 8088cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8088cee:	4770      	bx	lr

08088cf0 <__aeabi_ui2f>:
 8088cf0:	f04f 0300 	mov.w	r3, #0
 8088cf4:	e004      	b.n	8088d00 <__aeabi_i2f+0x8>
 8088cf6:	bf00      	nop

08088cf8 <__aeabi_i2f>:
 8088cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8088cfc:	bf48      	it	mi
 8088cfe:	4240      	negmi	r0, r0
 8088d00:	ea5f 0c00 	movs.w	ip, r0
 8088d04:	bf08      	it	eq
 8088d06:	4770      	bxeq	lr
 8088d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8088d0c:	4601      	mov	r1, r0
 8088d0e:	f04f 0000 	mov.w	r0, #0
 8088d12:	e01c      	b.n	8088d4e <__aeabi_l2f+0x2a>

08088d14 <__aeabi_ul2f>:
 8088d14:	ea50 0201 	orrs.w	r2, r0, r1
 8088d18:	bf08      	it	eq
 8088d1a:	4770      	bxeq	lr
 8088d1c:	f04f 0300 	mov.w	r3, #0
 8088d20:	e00a      	b.n	8088d38 <__aeabi_l2f+0x14>
 8088d22:	bf00      	nop

08088d24 <__aeabi_l2f>:
 8088d24:	ea50 0201 	orrs.w	r2, r0, r1
 8088d28:	bf08      	it	eq
 8088d2a:	4770      	bxeq	lr
 8088d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8088d30:	d502      	bpl.n	8088d38 <__aeabi_l2f+0x14>
 8088d32:	4240      	negs	r0, r0
 8088d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8088d38:	ea5f 0c01 	movs.w	ip, r1
 8088d3c:	bf02      	ittt	eq
 8088d3e:	4684      	moveq	ip, r0
 8088d40:	4601      	moveq	r1, r0
 8088d42:	2000      	moveq	r0, #0
 8088d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8088d48:	bf08      	it	eq
 8088d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8088d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8088d52:	fabc f28c 	clz	r2, ip
 8088d56:	3a08      	subs	r2, #8
 8088d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8088d5c:	db10      	blt.n	8088d80 <__aeabi_l2f+0x5c>
 8088d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8088d62:	4463      	add	r3, ip
 8088d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8088d68:	f1c2 0220 	rsb	r2, r2, #32
 8088d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8088d70:	fa20 f202 	lsr.w	r2, r0, r2
 8088d74:	eb43 0002 	adc.w	r0, r3, r2
 8088d78:	bf08      	it	eq
 8088d7a:	f020 0001 	biceq.w	r0, r0, #1
 8088d7e:	4770      	bx	lr
 8088d80:	f102 0220 	add.w	r2, r2, #32
 8088d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8088d88:	f1c2 0220 	rsb	r2, r2, #32
 8088d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8088d90:	fa21 f202 	lsr.w	r2, r1, r2
 8088d94:	eb43 0002 	adc.w	r0, r3, r2
 8088d98:	bf08      	it	eq
 8088d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088d9e:	4770      	bx	lr

08088da0 <__aeabi_fmul>:
 8088da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088da8:	bf1e      	ittt	ne
 8088daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088dae:	ea92 0f0c 	teqne	r2, ip
 8088db2:	ea93 0f0c 	teqne	r3, ip
 8088db6:	d06f      	beq.n	8088e98 <__aeabi_fmul+0xf8>
 8088db8:	441a      	add	r2, r3
 8088dba:	ea80 0c01 	eor.w	ip, r0, r1
 8088dbe:	0240      	lsls	r0, r0, #9
 8088dc0:	bf18      	it	ne
 8088dc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8088dc6:	d01e      	beq.n	8088e06 <__aeabi_fmul+0x66>
 8088dc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8088dcc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8088dd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8088dd4:	fba0 3101 	umull	r3, r1, r0, r1
 8088dd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088ddc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8088de0:	bf3e      	ittt	cc
 8088de2:	0049      	lslcc	r1, r1, #1
 8088de4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8088de8:	005b      	lslcc	r3, r3, #1
 8088dea:	ea40 0001 	orr.w	r0, r0, r1
 8088dee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8088df2:	2afd      	cmp	r2, #253	; 0xfd
 8088df4:	d81d      	bhi.n	8088e32 <__aeabi_fmul+0x92>
 8088df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088dfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088dfe:	bf08      	it	eq
 8088e00:	f020 0001 	biceq.w	r0, r0, #1
 8088e04:	4770      	bx	lr
 8088e06:	f090 0f00 	teq	r0, #0
 8088e0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088e0e:	bf08      	it	eq
 8088e10:	0249      	lsleq	r1, r1, #9
 8088e12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088e16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8088e1a:	3a7f      	subs	r2, #127	; 0x7f
 8088e1c:	bfc2      	ittt	gt
 8088e1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088e22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088e26:	4770      	bxgt	lr
 8088e28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088e2c:	f04f 0300 	mov.w	r3, #0
 8088e30:	3a01      	subs	r2, #1
 8088e32:	dc5d      	bgt.n	8088ef0 <__aeabi_fmul+0x150>
 8088e34:	f112 0f19 	cmn.w	r2, #25
 8088e38:	bfdc      	itt	le
 8088e3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8088e3e:	4770      	bxle	lr
 8088e40:	f1c2 0200 	rsb	r2, r2, #0
 8088e44:	0041      	lsls	r1, r0, #1
 8088e46:	fa21 f102 	lsr.w	r1, r1, r2
 8088e4a:	f1c2 0220 	rsb	r2, r2, #32
 8088e4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8088e52:	ea5f 0031 	movs.w	r0, r1, rrx
 8088e56:	f140 0000 	adc.w	r0, r0, #0
 8088e5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8088e5e:	bf08      	it	eq
 8088e60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8088e64:	4770      	bx	lr
 8088e66:	f092 0f00 	teq	r2, #0
 8088e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088e6e:	bf02      	ittt	eq
 8088e70:	0040      	lsleq	r0, r0, #1
 8088e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088e76:	3a01      	subeq	r2, #1
 8088e78:	d0f9      	beq.n	8088e6e <__aeabi_fmul+0xce>
 8088e7a:	ea40 000c 	orr.w	r0, r0, ip
 8088e7e:	f093 0f00 	teq	r3, #0
 8088e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088e86:	bf02      	ittt	eq
 8088e88:	0049      	lsleq	r1, r1, #1
 8088e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088e8e:	3b01      	subeq	r3, #1
 8088e90:	d0f9      	beq.n	8088e86 <__aeabi_fmul+0xe6>
 8088e92:	ea41 010c 	orr.w	r1, r1, ip
 8088e96:	e78f      	b.n	8088db8 <__aeabi_fmul+0x18>
 8088e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088e9c:	ea92 0f0c 	teq	r2, ip
 8088ea0:	bf18      	it	ne
 8088ea2:	ea93 0f0c 	teqne	r3, ip
 8088ea6:	d00a      	beq.n	8088ebe <__aeabi_fmul+0x11e>
 8088ea8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8088eac:	bf18      	it	ne
 8088eae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8088eb2:	d1d8      	bne.n	8088e66 <__aeabi_fmul+0xc6>
 8088eb4:	ea80 0001 	eor.w	r0, r0, r1
 8088eb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088ebc:	4770      	bx	lr
 8088ebe:	f090 0f00 	teq	r0, #0
 8088ec2:	bf17      	itett	ne
 8088ec4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8088ec8:	4608      	moveq	r0, r1
 8088eca:	f091 0f00 	teqne	r1, #0
 8088ece:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8088ed2:	d014      	beq.n	8088efe <__aeabi_fmul+0x15e>
 8088ed4:	ea92 0f0c 	teq	r2, ip
 8088ed8:	d101      	bne.n	8088ede <__aeabi_fmul+0x13e>
 8088eda:	0242      	lsls	r2, r0, #9
 8088edc:	d10f      	bne.n	8088efe <__aeabi_fmul+0x15e>
 8088ede:	ea93 0f0c 	teq	r3, ip
 8088ee2:	d103      	bne.n	8088eec <__aeabi_fmul+0x14c>
 8088ee4:	024b      	lsls	r3, r1, #9
 8088ee6:	bf18      	it	ne
 8088ee8:	4608      	movne	r0, r1
 8088eea:	d108      	bne.n	8088efe <__aeabi_fmul+0x15e>
 8088eec:	ea80 0001 	eor.w	r0, r0, r1
 8088ef0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8088ef4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088ef8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088efc:	4770      	bx	lr
 8088efe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8088f02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8088f06:	4770      	bx	lr

08088f08 <__aeabi_fdiv>:
 8088f08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8088f0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8088f10:	bf1e      	ittt	ne
 8088f12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8088f16:	ea92 0f0c 	teqne	r2, ip
 8088f1a:	ea93 0f0c 	teqne	r3, ip
 8088f1e:	d069      	beq.n	8088ff4 <__aeabi_fdiv+0xec>
 8088f20:	eba2 0203 	sub.w	r2, r2, r3
 8088f24:	ea80 0c01 	eor.w	ip, r0, r1
 8088f28:	0249      	lsls	r1, r1, #9
 8088f2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8088f2e:	d037      	beq.n	8088fa0 <__aeabi_fdiv+0x98>
 8088f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8088f34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8088f38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8088f3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8088f40:	428b      	cmp	r3, r1
 8088f42:	bf38      	it	cc
 8088f44:	005b      	lslcc	r3, r3, #1
 8088f46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8088f4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8088f4e:	428b      	cmp	r3, r1
 8088f50:	bf24      	itt	cs
 8088f52:	1a5b      	subcs	r3, r3, r1
 8088f54:	ea40 000c 	orrcs.w	r0, r0, ip
 8088f58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8088f5c:	bf24      	itt	cs
 8088f5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8088f62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8088f66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8088f6a:	bf24      	itt	cs
 8088f6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8088f70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8088f74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8088f78:	bf24      	itt	cs
 8088f7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8088f7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8088f82:	011b      	lsls	r3, r3, #4
 8088f84:	bf18      	it	ne
 8088f86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8088f8a:	d1e0      	bne.n	8088f4e <__aeabi_fdiv+0x46>
 8088f8c:	2afd      	cmp	r2, #253	; 0xfd
 8088f8e:	f63f af50 	bhi.w	8088e32 <__aeabi_fmul+0x92>
 8088f92:	428b      	cmp	r3, r1
 8088f94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8088f98:	bf08      	it	eq
 8088f9a:	f020 0001 	biceq.w	r0, r0, #1
 8088f9e:	4770      	bx	lr
 8088fa0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8088fa4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8088fa8:	327f      	adds	r2, #127	; 0x7f
 8088faa:	bfc2      	ittt	gt
 8088fac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8088fb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8088fb4:	4770      	bxgt	lr
 8088fb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8088fba:	f04f 0300 	mov.w	r3, #0
 8088fbe:	3a01      	subs	r2, #1
 8088fc0:	e737      	b.n	8088e32 <__aeabi_fmul+0x92>
 8088fc2:	f092 0f00 	teq	r2, #0
 8088fc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8088fca:	bf02      	ittt	eq
 8088fcc:	0040      	lsleq	r0, r0, #1
 8088fce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8088fd2:	3a01      	subeq	r2, #1
 8088fd4:	d0f9      	beq.n	8088fca <__aeabi_fdiv+0xc2>
 8088fd6:	ea40 000c 	orr.w	r0, r0, ip
 8088fda:	f093 0f00 	teq	r3, #0
 8088fde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8088fe2:	bf02      	ittt	eq
 8088fe4:	0049      	lsleq	r1, r1, #1
 8088fe6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8088fea:	3b01      	subeq	r3, #1
 8088fec:	d0f9      	beq.n	8088fe2 <__aeabi_fdiv+0xda>
 8088fee:	ea41 010c 	orr.w	r1, r1, ip
 8088ff2:	e795      	b.n	8088f20 <__aeabi_fdiv+0x18>
 8088ff4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8088ff8:	ea92 0f0c 	teq	r2, ip
 8088ffc:	d108      	bne.n	8089010 <__aeabi_fdiv+0x108>
 8088ffe:	0242      	lsls	r2, r0, #9
 8089000:	f47f af7d 	bne.w	8088efe <__aeabi_fmul+0x15e>
 8089004:	ea93 0f0c 	teq	r3, ip
 8089008:	f47f af70 	bne.w	8088eec <__aeabi_fmul+0x14c>
 808900c:	4608      	mov	r0, r1
 808900e:	e776      	b.n	8088efe <__aeabi_fmul+0x15e>
 8089010:	ea93 0f0c 	teq	r3, ip
 8089014:	d104      	bne.n	8089020 <__aeabi_fdiv+0x118>
 8089016:	024b      	lsls	r3, r1, #9
 8089018:	f43f af4c 	beq.w	8088eb4 <__aeabi_fmul+0x114>
 808901c:	4608      	mov	r0, r1
 808901e:	e76e      	b.n	8088efe <__aeabi_fmul+0x15e>
 8089020:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8089024:	bf18      	it	ne
 8089026:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808902a:	d1ca      	bne.n	8088fc2 <__aeabi_fdiv+0xba>
 808902c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8089030:	f47f af5c 	bne.w	8088eec <__aeabi_fmul+0x14c>
 8089034:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8089038:	f47f af3c 	bne.w	8088eb4 <__aeabi_fmul+0x114>
 808903c:	e75f      	b.n	8088efe <__aeabi_fmul+0x15e>
 808903e:	bf00      	nop

08089040 <__gesf2>:
 8089040:	f04f 3cff 	mov.w	ip, #4294967295
 8089044:	e006      	b.n	8089054 <__cmpsf2+0x4>
 8089046:	bf00      	nop

08089048 <__lesf2>:
 8089048:	f04f 0c01 	mov.w	ip, #1
 808904c:	e002      	b.n	8089054 <__cmpsf2+0x4>
 808904e:	bf00      	nop

08089050 <__cmpsf2>:
 8089050:	f04f 0c01 	mov.w	ip, #1
 8089054:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089058:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808905c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8089060:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089064:	bf18      	it	ne
 8089066:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808906a:	d011      	beq.n	8089090 <__cmpsf2+0x40>
 808906c:	b001      	add	sp, #4
 808906e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8089072:	bf18      	it	ne
 8089074:	ea90 0f01 	teqne	r0, r1
 8089078:	bf58      	it	pl
 808907a:	ebb2 0003 	subspl.w	r0, r2, r3
 808907e:	bf88      	it	hi
 8089080:	17c8      	asrhi	r0, r1, #31
 8089082:	bf38      	it	cc
 8089084:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8089088:	bf18      	it	ne
 808908a:	f040 0001 	orrne.w	r0, r0, #1
 808908e:	4770      	bx	lr
 8089090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8089094:	d102      	bne.n	808909c <__cmpsf2+0x4c>
 8089096:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808909a:	d105      	bne.n	80890a8 <__cmpsf2+0x58>
 808909c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80890a0:	d1e4      	bne.n	808906c <__cmpsf2+0x1c>
 80890a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80890a6:	d0e1      	beq.n	808906c <__cmpsf2+0x1c>
 80890a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80890ac:	4770      	bx	lr
 80890ae:	bf00      	nop

080890b0 <__aeabi_cfrcmple>:
 80890b0:	4684      	mov	ip, r0
 80890b2:	4608      	mov	r0, r1
 80890b4:	4661      	mov	r1, ip
 80890b6:	e7ff      	b.n	80890b8 <__aeabi_cfcmpeq>

080890b8 <__aeabi_cfcmpeq>:
 80890b8:	b50f      	push	{r0, r1, r2, r3, lr}
 80890ba:	f7ff ffc9 	bl	8089050 <__cmpsf2>
 80890be:	2800      	cmp	r0, #0
 80890c0:	bf48      	it	mi
 80890c2:	f110 0f00 	cmnmi.w	r0, #0
 80890c6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080890c8 <__aeabi_fcmpeq>:
 80890c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890cc:	f7ff fff4 	bl	80890b8 <__aeabi_cfcmpeq>
 80890d0:	bf0c      	ite	eq
 80890d2:	2001      	moveq	r0, #1
 80890d4:	2000      	movne	r0, #0
 80890d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80890da:	bf00      	nop

080890dc <__aeabi_fcmplt>:
 80890dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890e0:	f7ff ffea 	bl	80890b8 <__aeabi_cfcmpeq>
 80890e4:	bf34      	ite	cc
 80890e6:	2001      	movcc	r0, #1
 80890e8:	2000      	movcs	r0, #0
 80890ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80890ee:	bf00      	nop

080890f0 <__aeabi_fcmple>:
 80890f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80890f4:	f7ff ffe0 	bl	80890b8 <__aeabi_cfcmpeq>
 80890f8:	bf94      	ite	ls
 80890fa:	2001      	movls	r0, #1
 80890fc:	2000      	movhi	r0, #0
 80890fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8089102:	bf00      	nop

08089104 <__aeabi_fcmpge>:
 8089104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8089108:	f7ff ffd2 	bl	80890b0 <__aeabi_cfrcmple>
 808910c:	bf94      	ite	ls
 808910e:	2001      	movls	r0, #1
 8089110:	2000      	movhi	r0, #0
 8089112:	f85d fb08 	ldr.w	pc, [sp], #8
 8089116:	bf00      	nop

08089118 <__aeabi_fcmpgt>:
 8089118:	f84d ed08 	str.w	lr, [sp, #-8]!
 808911c:	f7ff ffc8 	bl	80890b0 <__aeabi_cfrcmple>
 8089120:	bf34      	ite	cc
 8089122:	2001      	movcc	r0, #1
 8089124:	2000      	movcs	r0, #0
 8089126:	f85d fb08 	ldr.w	pc, [sp], #8
 808912a:	bf00      	nop

0808912c <__aeabi_f2iz>:
 808912c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8089130:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8089134:	d30f      	bcc.n	8089156 <__aeabi_f2iz+0x2a>
 8089136:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808913a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808913e:	d90d      	bls.n	808915c <__aeabi_f2iz+0x30>
 8089140:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8089144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8089148:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808914c:	fa23 f002 	lsr.w	r0, r3, r2
 8089150:	bf18      	it	ne
 8089152:	4240      	negne	r0, r0
 8089154:	4770      	bx	lr
 8089156:	f04f 0000 	mov.w	r0, #0
 808915a:	4770      	bx	lr
 808915c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8089160:	d101      	bne.n	8089166 <__aeabi_f2iz+0x3a>
 8089162:	0242      	lsls	r2, r0, #9
 8089164:	d105      	bne.n	8089172 <__aeabi_f2iz+0x46>
 8089166:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808916a:	bf08      	it	eq
 808916c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8089170:	4770      	bx	lr
 8089172:	f04f 0000 	mov.w	r0, #0
 8089176:	4770      	bx	lr

08089178 <asctime>:
 8089178:	4b09      	ldr	r3, [pc, #36]	; (80891a0 <asctime+0x28>)
 808917a:	b570      	push	{r4, r5, r6, lr}
 808917c:	681c      	ldr	r4, [r3, #0]
 808917e:	4606      	mov	r6, r0
 8089180:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8089182:	b93d      	cbnz	r5, 8089194 <asctime+0x1c>
 8089184:	201a      	movs	r0, #26
 8089186:	f7fb fb33 	bl	80847f0 <malloc>
 808918a:	221a      	movs	r2, #26
 808918c:	6420      	str	r0, [r4, #64]	; 0x40
 808918e:	4629      	mov	r1, r5
 8089190:	f000 f964 	bl	808945c <memset>
 8089194:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8089196:	4630      	mov	r0, r6
 8089198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808919c:	f000 b802 	b.w	80891a4 <asctime_r>
 80891a0:	20000890 	.word	0x20000890

080891a4 <asctime_r>:
 80891a4:	b510      	push	{r4, lr}
 80891a6:	460c      	mov	r4, r1
 80891a8:	6941      	ldr	r1, [r0, #20]
 80891aa:	b086      	sub	sp, #24
 80891ac:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80891b0:	6903      	ldr	r3, [r0, #16]
 80891b2:	6982      	ldr	r2, [r0, #24]
 80891b4:	9104      	str	r1, [sp, #16]
 80891b6:	6801      	ldr	r1, [r0, #0]
 80891b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80891bc:	9103      	str	r1, [sp, #12]
 80891be:	6841      	ldr	r1, [r0, #4]
 80891c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80891c4:	9102      	str	r1, [sp, #8]
 80891c6:	6881      	ldr	r1, [r0, #8]
 80891c8:	9101      	str	r1, [sp, #4]
 80891ca:	68c1      	ldr	r1, [r0, #12]
 80891cc:	4620      	mov	r0, r4
 80891ce:	9100      	str	r1, [sp, #0]
 80891d0:	4904      	ldr	r1, [pc, #16]	; (80891e4 <asctime_r+0x40>)
 80891d2:	440b      	add	r3, r1
 80891d4:	4904      	ldr	r1, [pc, #16]	; (80891e8 <asctime_r+0x44>)
 80891d6:	440a      	add	r2, r1
 80891d8:	4904      	ldr	r1, [pc, #16]	; (80891ec <asctime_r+0x48>)
 80891da:	f7fb fb29 	bl	8084830 <siprintf>
 80891de:	4620      	mov	r0, r4
 80891e0:	b006      	add	sp, #24
 80891e2:	bd10      	pop	{r4, pc}
 80891e4:	0808be25 	.word	0x0808be25
 80891e8:	0808be10 	.word	0x0808be10
 80891ec:	0808be49 	.word	0x0808be49

080891f0 <atol>:
 80891f0:	220a      	movs	r2, #10
 80891f2:	2100      	movs	r1, #0
 80891f4:	f000 bf48 	b.w	808a088 <strtol>

080891f8 <__cxa_atexit>:
 80891f8:	b510      	push	{r4, lr}
 80891fa:	4c05      	ldr	r4, [pc, #20]	; (8089210 <__cxa_atexit+0x18>)
 80891fc:	4613      	mov	r3, r2
 80891fe:	b12c      	cbz	r4, 808920c <__cxa_atexit+0x14>
 8089200:	460a      	mov	r2, r1
 8089202:	4601      	mov	r1, r0
 8089204:	2002      	movs	r0, #2
 8089206:	f3af 8000 	nop.w
 808920a:	bd10      	pop	{r4, pc}
 808920c:	4620      	mov	r0, r4
 808920e:	bd10      	pop	{r4, pc}
 8089210:	00000000 	.word	0x00000000

08089214 <__errno>:
 8089214:	4b01      	ldr	r3, [pc, #4]	; (808921c <__errno+0x8>)
 8089216:	6818      	ldr	r0, [r3, #0]
 8089218:	4770      	bx	lr
 808921a:	bf00      	nop
 808921c:	20000890 	.word	0x20000890

08089220 <localtime>:
 8089220:	b538      	push	{r3, r4, r5, lr}
 8089222:	4b07      	ldr	r3, [pc, #28]	; (8089240 <localtime+0x20>)
 8089224:	4605      	mov	r5, r0
 8089226:	681c      	ldr	r4, [r3, #0]
 8089228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808922a:	b91b      	cbnz	r3, 8089234 <localtime+0x14>
 808922c:	2024      	movs	r0, #36	; 0x24
 808922e:	f7fb fadf 	bl	80847f0 <malloc>
 8089232:	63e0      	str	r0, [r4, #60]	; 0x3c
 8089234:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8089236:	4628      	mov	r0, r5
 8089238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808923c:	f000 b802 	b.w	8089244 <localtime_r>
 8089240:	20000890 	.word	0x20000890

08089244 <localtime_r>:
 8089244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089248:	460c      	mov	r4, r1
 808924a:	4680      	mov	r8, r0
 808924c:	f001 fa36 	bl	808a6bc <__gettzinfo>
 8089250:	4621      	mov	r1, r4
 8089252:	4607      	mov	r7, r0
 8089254:	4640      	mov	r0, r8
 8089256:	f001 fa35 	bl	808a6c4 <gmtime_r>
 808925a:	6946      	ldr	r6, [r0, #20]
 808925c:	4604      	mov	r4, r0
 808925e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8089262:	07b3      	lsls	r3, r6, #30
 8089264:	d105      	bne.n	8089272 <localtime_r+0x2e>
 8089266:	2264      	movs	r2, #100	; 0x64
 8089268:	fb96 f3f2 	sdiv	r3, r6, r2
 808926c:	fb02 6313 	mls	r3, r2, r3, r6
 8089270:	b94b      	cbnz	r3, 8089286 <localtime_r+0x42>
 8089272:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8089276:	fb96 f3f5 	sdiv	r3, r6, r5
 808927a:	fb05 6513 	mls	r5, r5, r3, r6
 808927e:	fab5 f385 	clz	r3, r5
 8089282:	095b      	lsrs	r3, r3, #5
 8089284:	e000      	b.n	8089288 <localtime_r+0x44>
 8089286:	2301      	movs	r3, #1
 8089288:	4a5f      	ldr	r2, [pc, #380]	; (8089408 <localtime_r+0x1c4>)
 808928a:	2530      	movs	r5, #48	; 0x30
 808928c:	fb05 2503 	mla	r5, r5, r3, r2
 8089290:	f001 f844 	bl	808a31c <__tz_lock>
 8089294:	f001 f844 	bl	808a320 <_tzset_unlocked>
 8089298:	4b5c      	ldr	r3, [pc, #368]	; (808940c <localtime_r+0x1c8>)
 808929a:	681b      	ldr	r3, [r3, #0]
 808929c:	b1f3      	cbz	r3, 80892dc <localtime_r+0x98>
 808929e:	687b      	ldr	r3, [r7, #4]
 80892a0:	429e      	cmp	r6, r3
 80892a2:	d105      	bne.n	80892b0 <localtime_r+0x6c>
 80892a4:	6839      	ldr	r1, [r7, #0]
 80892a6:	f8d8 3000 	ldr.w	r3, [r8]
 80892aa:	69fa      	ldr	r2, [r7, #28]
 80892ac:	b941      	cbnz	r1, 80892c0 <localtime_r+0x7c>
 80892ae:	e00a      	b.n	80892c6 <localtime_r+0x82>
 80892b0:	4630      	mov	r0, r6
 80892b2:	f000 ff8b 	bl	808a1cc <__tzcalc_limits>
 80892b6:	2800      	cmp	r0, #0
 80892b8:	d1f4      	bne.n	80892a4 <localtime_r+0x60>
 80892ba:	f04f 33ff 	mov.w	r3, #4294967295
 80892be:	e00d      	b.n	80892dc <localtime_r+0x98>
 80892c0:	4293      	cmp	r3, r2
 80892c2:	db08      	blt.n	80892d6 <localtime_r+0x92>
 80892c4:	e001      	b.n	80892ca <localtime_r+0x86>
 80892c6:	4293      	cmp	r3, r2
 80892c8:	da07      	bge.n	80892da <localtime_r+0x96>
 80892ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80892cc:	4293      	cmp	r3, r2
 80892ce:	bfac      	ite	ge
 80892d0:	2300      	movge	r3, #0
 80892d2:	2301      	movlt	r3, #1
 80892d4:	e002      	b.n	80892dc <localtime_r+0x98>
 80892d6:	2300      	movs	r3, #0
 80892d8:	e000      	b.n	80892dc <localtime_r+0x98>
 80892da:	2301      	movs	r3, #1
 80892dc:	6223      	str	r3, [r4, #32]
 80892de:	6a23      	ldr	r3, [r4, #32]
 80892e0:	203c      	movs	r0, #60	; 0x3c
 80892e2:	2b01      	cmp	r3, #1
 80892e4:	bf0c      	ite	eq
 80892e6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80892e8:	6a39      	ldrne	r1, [r7, #32]
 80892ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80892ee:	fb91 f6f3 	sdiv	r6, r1, r3
 80892f2:	fb03 1316 	mls	r3, r3, r6, r1
 80892f6:	fb93 f2f0 	sdiv	r2, r3, r0
 80892fa:	fb00 3012 	mls	r0, r0, r2, r3
 80892fe:	6861      	ldr	r1, [r4, #4]
 8089300:	6823      	ldr	r3, [r4, #0]
 8089302:	1a89      	subs	r1, r1, r2
 8089304:	68a2      	ldr	r2, [r4, #8]
 8089306:	1a1b      	subs	r3, r3, r0
 8089308:	1b92      	subs	r2, r2, r6
 808930a:	2b3b      	cmp	r3, #59	; 0x3b
 808930c:	6023      	str	r3, [r4, #0]
 808930e:	6061      	str	r1, [r4, #4]
 8089310:	60a2      	str	r2, [r4, #8]
 8089312:	dd03      	ble.n	808931c <localtime_r+0xd8>
 8089314:	3101      	adds	r1, #1
 8089316:	6061      	str	r1, [r4, #4]
 8089318:	3b3c      	subs	r3, #60	; 0x3c
 808931a:	e004      	b.n	8089326 <localtime_r+0xe2>
 808931c:	2b00      	cmp	r3, #0
 808931e:	da03      	bge.n	8089328 <localtime_r+0xe4>
 8089320:	3901      	subs	r1, #1
 8089322:	6061      	str	r1, [r4, #4]
 8089324:	333c      	adds	r3, #60	; 0x3c
 8089326:	6023      	str	r3, [r4, #0]
 8089328:	6863      	ldr	r3, [r4, #4]
 808932a:	2b3b      	cmp	r3, #59	; 0x3b
 808932c:	dd03      	ble.n	8089336 <localtime_r+0xf2>
 808932e:	3201      	adds	r2, #1
 8089330:	60a2      	str	r2, [r4, #8]
 8089332:	3b3c      	subs	r3, #60	; 0x3c
 8089334:	e004      	b.n	8089340 <localtime_r+0xfc>
 8089336:	2b00      	cmp	r3, #0
 8089338:	da03      	bge.n	8089342 <localtime_r+0xfe>
 808933a:	3a01      	subs	r2, #1
 808933c:	60a2      	str	r2, [r4, #8]
 808933e:	333c      	adds	r3, #60	; 0x3c
 8089340:	6063      	str	r3, [r4, #4]
 8089342:	68a3      	ldr	r3, [r4, #8]
 8089344:	2b17      	cmp	r3, #23
 8089346:	dd22      	ble.n	808938e <localtime_r+0x14a>
 8089348:	69e2      	ldr	r2, [r4, #28]
 808934a:	3b18      	subs	r3, #24
 808934c:	3201      	adds	r2, #1
 808934e:	61e2      	str	r2, [r4, #28]
 8089350:	69a2      	ldr	r2, [r4, #24]
 8089352:	60a3      	str	r3, [r4, #8]
 8089354:	3201      	adds	r2, #1
 8089356:	2a06      	cmp	r2, #6
 8089358:	bfc8      	it	gt
 808935a:	2200      	movgt	r2, #0
 808935c:	61a2      	str	r2, [r4, #24]
 808935e:	68e2      	ldr	r2, [r4, #12]
 8089360:	6923      	ldr	r3, [r4, #16]
 8089362:	3201      	adds	r2, #1
 8089364:	60e2      	str	r2, [r4, #12]
 8089366:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808936a:	428a      	cmp	r2, r1
 808936c:	dd46      	ble.n	80893fc <localtime_r+0x1b8>
 808936e:	3301      	adds	r3, #1
 8089370:	2b0c      	cmp	r3, #12
 8089372:	bf08      	it	eq
 8089374:	6963      	ldreq	r3, [r4, #20]
 8089376:	eba2 0201 	sub.w	r2, r2, r1
 808937a:	60e2      	str	r2, [r4, #12]
 808937c:	bf05      	ittet	eq
 808937e:	3301      	addeq	r3, #1
 8089380:	2200      	moveq	r2, #0
 8089382:	6123      	strne	r3, [r4, #16]
 8089384:	6122      	streq	r2, [r4, #16]
 8089386:	bf04      	itt	eq
 8089388:	6163      	streq	r3, [r4, #20]
 808938a:	61e2      	streq	r2, [r4, #28]
 808938c:	e036      	b.n	80893fc <localtime_r+0x1b8>
 808938e:	2b00      	cmp	r3, #0
 8089390:	da34      	bge.n	80893fc <localtime_r+0x1b8>
 8089392:	69e2      	ldr	r2, [r4, #28]
 8089394:	3318      	adds	r3, #24
 8089396:	3a01      	subs	r2, #1
 8089398:	61e2      	str	r2, [r4, #28]
 808939a:	69a2      	ldr	r2, [r4, #24]
 808939c:	60a3      	str	r3, [r4, #8]
 808939e:	3a01      	subs	r2, #1
 80893a0:	bf48      	it	mi
 80893a2:	2206      	movmi	r2, #6
 80893a4:	61a2      	str	r2, [r4, #24]
 80893a6:	68e2      	ldr	r2, [r4, #12]
 80893a8:	3a01      	subs	r2, #1
 80893aa:	60e2      	str	r2, [r4, #12]
 80893ac:	bb32      	cbnz	r2, 80893fc <localtime_r+0x1b8>
 80893ae:	6923      	ldr	r3, [r4, #16]
 80893b0:	3b01      	subs	r3, #1
 80893b2:	d401      	bmi.n	80893b8 <localtime_r+0x174>
 80893b4:	6123      	str	r3, [r4, #16]
 80893b6:	e01d      	b.n	80893f4 <localtime_r+0x1b0>
 80893b8:	230b      	movs	r3, #11
 80893ba:	6123      	str	r3, [r4, #16]
 80893bc:	6963      	ldr	r3, [r4, #20]
 80893be:	1e5a      	subs	r2, r3, #1
 80893c0:	f012 0f03 	tst.w	r2, #3
 80893c4:	6162      	str	r2, [r4, #20]
 80893c6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80893ca:	d105      	bne.n	80893d8 <localtime_r+0x194>
 80893cc:	2164      	movs	r1, #100	; 0x64
 80893ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80893d2:	fb01 3212 	mls	r2, r1, r2, r3
 80893d6:	b94a      	cbnz	r2, 80893ec <localtime_r+0x1a8>
 80893d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80893dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80893e0:	fb01 3312 	mls	r3, r1, r2, r3
 80893e4:	fab3 f383 	clz	r3, r3
 80893e8:	095b      	lsrs	r3, r3, #5
 80893ea:	e000      	b.n	80893ee <localtime_r+0x1aa>
 80893ec:	2301      	movs	r3, #1
 80893ee:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80893f2:	61e3      	str	r3, [r4, #28]
 80893f4:	6923      	ldr	r3, [r4, #16]
 80893f6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80893fa:	60e3      	str	r3, [r4, #12]
 80893fc:	f000 ff8f 	bl	808a31e <__tz_unlock>
 8089400:	4620      	mov	r0, r4
 8089402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089406:	bf00      	nop
 8089408:	0808bfd0 	.word	0x0808bfd0
 808940c:	20001458 	.word	0x20001458

08089410 <memcpy>:
 8089410:	b510      	push	{r4, lr}
 8089412:	1e43      	subs	r3, r0, #1
 8089414:	440a      	add	r2, r1
 8089416:	4291      	cmp	r1, r2
 8089418:	d004      	beq.n	8089424 <memcpy+0x14>
 808941a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808941e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8089422:	e7f8      	b.n	8089416 <memcpy+0x6>
 8089424:	bd10      	pop	{r4, pc}

08089426 <memmove>:
 8089426:	4288      	cmp	r0, r1
 8089428:	b510      	push	{r4, lr}
 808942a:	eb01 0302 	add.w	r3, r1, r2
 808942e:	d801      	bhi.n	8089434 <memmove+0xe>
 8089430:	1e42      	subs	r2, r0, #1
 8089432:	e00b      	b.n	808944c <memmove+0x26>
 8089434:	4298      	cmp	r0, r3
 8089436:	d2fb      	bcs.n	8089430 <memmove+0xa>
 8089438:	1881      	adds	r1, r0, r2
 808943a:	1ad2      	subs	r2, r2, r3
 808943c:	42d3      	cmn	r3, r2
 808943e:	d004      	beq.n	808944a <memmove+0x24>
 8089440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8089444:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8089448:	e7f8      	b.n	808943c <memmove+0x16>
 808944a:	bd10      	pop	{r4, pc}
 808944c:	4299      	cmp	r1, r3
 808944e:	d004      	beq.n	808945a <memmove+0x34>
 8089450:	f811 4b01 	ldrb.w	r4, [r1], #1
 8089454:	f802 4f01 	strb.w	r4, [r2, #1]!
 8089458:	e7f8      	b.n	808944c <memmove+0x26>
 808945a:	bd10      	pop	{r4, pc}

0808945c <memset>:
 808945c:	4603      	mov	r3, r0
 808945e:	4402      	add	r2, r0
 8089460:	4293      	cmp	r3, r2
 8089462:	d002      	beq.n	808946a <memset+0xe>
 8089464:	f803 1b01 	strb.w	r1, [r3], #1
 8089468:	e7fa      	b.n	8089460 <memset+0x4>
 808946a:	4770      	bx	lr

0808946c <srand>:
 808946c:	b538      	push	{r3, r4, r5, lr}
 808946e:	4b12      	ldr	r3, [pc, #72]	; (80894b8 <srand+0x4c>)
 8089470:	4605      	mov	r5, r0
 8089472:	681c      	ldr	r4, [r3, #0]
 8089474:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089476:	b9d3      	cbnz	r3, 80894ae <srand+0x42>
 8089478:	2018      	movs	r0, #24
 808947a:	f7fb f9b9 	bl	80847f0 <malloc>
 808947e:	f243 330e 	movw	r3, #13070	; 0x330e
 8089482:	63a0      	str	r0, [r4, #56]	; 0x38
 8089484:	8003      	strh	r3, [r0, #0]
 8089486:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808948a:	8043      	strh	r3, [r0, #2]
 808948c:	f241 2334 	movw	r3, #4660	; 0x1234
 8089490:	8083      	strh	r3, [r0, #4]
 8089492:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8089496:	80c3      	strh	r3, [r0, #6]
 8089498:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808949c:	8103      	strh	r3, [r0, #8]
 808949e:	2305      	movs	r3, #5
 80894a0:	8143      	strh	r3, [r0, #10]
 80894a2:	230b      	movs	r3, #11
 80894a4:	8183      	strh	r3, [r0, #12]
 80894a6:	2201      	movs	r2, #1
 80894a8:	2300      	movs	r3, #0
 80894aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80894ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80894b0:	2200      	movs	r2, #0
 80894b2:	611d      	str	r5, [r3, #16]
 80894b4:	615a      	str	r2, [r3, #20]
 80894b6:	bd38      	pop	{r3, r4, r5, pc}
 80894b8:	20000890 	.word	0x20000890

080894bc <strcmp>:
 80894bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80894c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80894c4:	2a01      	cmp	r2, #1
 80894c6:	bf28      	it	cs
 80894c8:	429a      	cmpcs	r2, r3
 80894ca:	d0f7      	beq.n	80894bc <strcmp>
 80894cc:	1ad0      	subs	r0, r2, r3
 80894ce:	4770      	bx	lr

080894d0 <strcpy>:
 80894d0:	4603      	mov	r3, r0
 80894d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80894d6:	f803 2b01 	strb.w	r2, [r3], #1
 80894da:	2a00      	cmp	r2, #0
 80894dc:	d1f9      	bne.n	80894d2 <strcpy+0x2>
 80894de:	4770      	bx	lr

080894e0 <strdup>:
 80894e0:	4b02      	ldr	r3, [pc, #8]	; (80894ec <strdup+0xc>)
 80894e2:	4601      	mov	r1, r0
 80894e4:	6818      	ldr	r0, [r3, #0]
 80894e6:	f000 b803 	b.w	80894f0 <_strdup_r>
 80894ea:	bf00      	nop
 80894ec:	20000890 	.word	0x20000890

080894f0 <_strdup_r>:
 80894f0:	b570      	push	{r4, r5, r6, lr}
 80894f2:	4606      	mov	r6, r0
 80894f4:	4608      	mov	r0, r1
 80894f6:	460c      	mov	r4, r1
 80894f8:	f000 fd22 	bl	8089f40 <strlen>
 80894fc:	1c45      	adds	r5, r0, #1
 80894fe:	4629      	mov	r1, r5
 8089500:	4630      	mov	r0, r6
 8089502:	f7fb f9c5 	bl	8084890 <_malloc_r>
 8089506:	4606      	mov	r6, r0
 8089508:	b118      	cbz	r0, 8089512 <_strdup_r+0x22>
 808950a:	462a      	mov	r2, r5
 808950c:	4621      	mov	r1, r4
 808950e:	f7ff ff7f 	bl	8089410 <memcpy>
 8089512:	4630      	mov	r0, r6
 8089514:	bd70      	pop	{r4, r5, r6, pc}

08089516 <iso_year_adjust>:
 8089516:	6941      	ldr	r1, [r0, #20]
 8089518:	b510      	push	{r4, lr}
 808951a:	078b      	lsls	r3, r1, #30
 808951c:	d10c      	bne.n	8089538 <iso_year_adjust+0x22>
 808951e:	f240 736c 	movw	r3, #1900	; 0x76c
 8089522:	2900      	cmp	r1, #0
 8089524:	bfa8      	it	ge
 8089526:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808952a:	440b      	add	r3, r1
 808952c:	2464      	movs	r4, #100	; 0x64
 808952e:	fb93 f2f4 	sdiv	r2, r3, r4
 8089532:	fb04 3312 	mls	r3, r4, r2, r3
 8089536:	b983      	cbnz	r3, 808955a <iso_year_adjust+0x44>
 8089538:	f240 736c 	movw	r3, #1900	; 0x76c
 808953c:	2900      	cmp	r1, #0
 808953e:	bfa8      	it	ge
 8089540:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8089544:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089548:	440b      	add	r3, r1
 808954a:	fb93 f1f2 	sdiv	r1, r3, r2
 808954e:	fb02 3311 	mls	r3, r2, r1, r3
 8089552:	fab3 f283 	clz	r2, r3
 8089556:	0952      	lsrs	r2, r2, #5
 8089558:	e000      	b.n	808955c <iso_year_adjust+0x46>
 808955a:	2201      	movs	r2, #1
 808955c:	6983      	ldr	r3, [r0, #24]
 808955e:	69c1      	ldr	r1, [r0, #28]
 8089560:	005b      	lsls	r3, r3, #1
 8089562:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8089566:	4413      	add	r3, r2
 8089568:	2b21      	cmp	r3, #33	; 0x21
 808956a:	dc0e      	bgt.n	808958a <iso_year_adjust+0x74>
 808956c:	2b20      	cmp	r3, #32
 808956e:	da2f      	bge.n	80895d0 <iso_year_adjust+0xba>
 8089570:	2b0d      	cmp	r3, #13
 8089572:	dc02      	bgt.n	808957a <iso_year_adjust+0x64>
 8089574:	2b0a      	cmp	r3, #10
 8089576:	db05      	blt.n	8089584 <iso_year_adjust+0x6e>
 8089578:	e02a      	b.n	80895d0 <iso_year_adjust+0xba>
 808957a:	2b10      	cmp	r3, #16
 808957c:	db26      	blt.n	80895cc <iso_year_adjust+0xb6>
 808957e:	2b11      	cmp	r3, #17
 8089580:	dd26      	ble.n	80895d0 <iso_year_adjust+0xba>
 8089582:	3b1c      	subs	r3, #28
 8089584:	2b01      	cmp	r3, #1
 8089586:	d923      	bls.n	80895d0 <iso_year_adjust+0xba>
 8089588:	e020      	b.n	80895cc <iso_year_adjust+0xb6>
 808958a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808958e:	4293      	cmp	r3, r2
 8089590:	dc0e      	bgt.n	80895b0 <iso_year_adjust+0x9a>
 8089592:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8089596:	4293      	cmp	r3, r2
 8089598:	da16      	bge.n	80895c8 <iso_year_adjust+0xb2>
 808959a:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808959e:	4293      	cmp	r3, r2
 80895a0:	d012      	beq.n	80895c8 <iso_year_adjust+0xb2>
 80895a2:	db13      	blt.n	80895cc <iso_year_adjust+0xb6>
 80895a4:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80895a8:	3b12      	subs	r3, #18
 80895aa:	2b02      	cmp	r3, #2
 80895ac:	d90c      	bls.n	80895c8 <iso_year_adjust+0xb2>
 80895ae:	e00d      	b.n	80895cc <iso_year_adjust+0xb6>
 80895b0:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80895b4:	4293      	cmp	r3, r2
 80895b6:	d007      	beq.n	80895c8 <iso_year_adjust+0xb2>
 80895b8:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80895bc:	4293      	cmp	r3, r2
 80895be:	d003      	beq.n	80895c8 <iso_year_adjust+0xb2>
 80895c0:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80895c4:	4293      	cmp	r3, r2
 80895c6:	d101      	bne.n	80895cc <iso_year_adjust+0xb6>
 80895c8:	2001      	movs	r0, #1
 80895ca:	bd10      	pop	{r4, pc}
 80895cc:	2000      	movs	r0, #0
 80895ce:	bd10      	pop	{r4, pc}
 80895d0:	f04f 30ff 	mov.w	r0, #4294967295
 80895d4:	bd10      	pop	{r4, pc}
	...

080895d8 <strftime>:
 80895d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80895dc:	460e      	mov	r6, r1
 80895de:	b093      	sub	sp, #76	; 0x4c
 80895e0:	461d      	mov	r5, r3
 80895e2:	4607      	mov	r7, r0
 80895e4:	4691      	mov	r9, r2
 80895e6:	f000 fde1 	bl	808a1ac <__get_current_time_locale>
 80895ea:	2300      	movs	r3, #0
 80895ec:	9306      	str	r3, [sp, #24]
 80895ee:	461c      	mov	r4, r3
 80895f0:	1e73      	subs	r3, r6, #1
 80895f2:	9003      	str	r0, [sp, #12]
 80895f4:	9302      	str	r3, [sp, #8]
 80895f6:	f899 3000 	ldrb.w	r3, [r9]
 80895fa:	2b00      	cmp	r3, #0
 80895fc:	f000 8492 	beq.w	8089f24 <strftime+0x94c>
 8089600:	2b25      	cmp	r3, #37	; 0x25
 8089602:	d008      	beq.n	8089616 <strftime+0x3e>
 8089604:	9a02      	ldr	r2, [sp, #8]
 8089606:	4294      	cmp	r4, r2
 8089608:	f080 8490 	bcs.w	8089f2c <strftime+0x954>
 808960c:	553b      	strb	r3, [r7, r4]
 808960e:	f109 0901 	add.w	r9, r9, #1
 8089612:	3401      	adds	r4, #1
 8089614:	e7ef      	b.n	80895f6 <strftime+0x1e>
 8089616:	f899 a001 	ldrb.w	sl, [r9, #1]
 808961a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808961e:	d007      	beq.n	8089630 <strftime+0x58>
 8089620:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089624:	d004      	beq.n	8089630 <strftime+0x58>
 8089626:	f109 0901 	add.w	r9, r9, #1
 808962a:	f04f 0a00 	mov.w	sl, #0
 808962e:	e001      	b.n	8089634 <strftime+0x5c>
 8089630:	f109 0902 	add.w	r9, r9, #2
 8089634:	f899 3000 	ldrb.w	r3, [r9]
 8089638:	3b31      	subs	r3, #49	; 0x31
 808963a:	2b08      	cmp	r3, #8
 808963c:	d808      	bhi.n	8089650 <strftime+0x78>
 808963e:	4648      	mov	r0, r9
 8089640:	220a      	movs	r2, #10
 8089642:	a90a      	add	r1, sp, #40	; 0x28
 8089644:	f000 fda8 	bl	808a198 <strtoul>
 8089648:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808964c:	4680      	mov	r8, r0
 808964e:	e001      	b.n	8089654 <strftime+0x7c>
 8089650:	f04f 0800 	mov.w	r8, #0
 8089654:	f899 3000 	ldrb.w	r3, [r9]
 8089658:	2b45      	cmp	r3, #69	; 0x45
 808965a:	d001      	beq.n	8089660 <strftime+0x88>
 808965c:	2b4f      	cmp	r3, #79	; 0x4f
 808965e:	d101      	bne.n	8089664 <strftime+0x8c>
 8089660:	f109 0901 	add.w	r9, r9, #1
 8089664:	f899 0000 	ldrb.w	r0, [r9]
 8089668:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808966c:	2b55      	cmp	r3, #85	; 0x55
 808966e:	f200 845d 	bhi.w	8089f2c <strftime+0x954>
 8089672:	e8df f013 	tbh	[pc, r3, lsl #1]
 8089676:	044a      	.short	0x044a
 8089678:	045b045b 	.word	0x045b045b
 808967c:	045b045b 	.word	0x045b045b
 8089680:	045b045b 	.word	0x045b045b
 8089684:	045b045b 	.word	0x045b045b
 8089688:	045b045b 	.word	0x045b045b
 808968c:	045b045b 	.word	0x045b045b
 8089690:	045b045b 	.word	0x045b045b
 8089694:	045b045b 	.word	0x045b045b
 8089698:	045b045b 	.word	0x045b045b
 808969c:	045b045b 	.word	0x045b045b
 80896a0:	045b045b 	.word	0x045b045b
 80896a4:	045b045b 	.word	0x045b045b
 80896a8:	045b045b 	.word	0x045b045b
 80896ac:	006f045b 	.word	0x006f045b
 80896b0:	00d400a1 	.word	0x00d400a1
 80896b4:	045b011a 	.word	0x045b011a
 80896b8:	01a0013f 	.word	0x01a0013f
 80896bc:	022d0226 	.word	0x022d0226
 80896c0:	045b045b 	.word	0x045b045b
 80896c4:	0260045b 	.word	0x0260045b
 80896c8:	045b045b 	.word	0x045b045b
 80896cc:	045b0268 	.word	0x045b0268
 80896d0:	031c0296 	.word	0x031c0296
 80896d4:	033a0324 	.word	0x033a0324
 80896d8:	03850342 	.word	0x03850342
 80896dc:	039f00c6 	.word	0x039f00c6
 80896e0:	045b041f 	.word	0x045b041f
 80896e4:	045b045b 	.word	0x045b045b
 80896e8:	045b045b 	.word	0x045b045b
 80896ec:	0056045b 	.word	0x0056045b
 80896f0:	00ba0089 	.word	0x00ba0089
 80896f4:	010c010c 	.word	0x010c010c
 80896f8:	0171045b 	.word	0x0171045b
 80896fc:	045b0089 	.word	0x045b0089
 8089700:	0226023d 	.word	0x0226023d
 8089704:	025d022d 	.word	0x025d022d
 8089708:	045b0262 	.word	0x045b0262
 808970c:	045b0268 	.word	0x045b0268
 8089710:	029b00be 	.word	0x029b00be
 8089714:	032d031e 	.word	0x032d031e
 8089718:	037e045b 	.word	0x037e045b
 808971c:	039100c2 	.word	0x039100c2
 8089720:	03e7      	.short	0x03e7
 8089722:	69ab      	ldr	r3, [r5, #24]
 8089724:	9a03      	ldr	r2, [sp, #12]
 8089726:	3318      	adds	r3, #24
 8089728:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808972c:	4640      	mov	r0, r8
 808972e:	f000 fc07 	bl	8089f40 <strlen>
 8089732:	f108 38ff 	add.w	r8, r8, #4294967295
 8089736:	193b      	adds	r3, r7, r4
 8089738:	4420      	add	r0, r4
 808973a:	4284      	cmp	r4, r0
 808973c:	f000 83eb 	beq.w	8089f16 <strftime+0x93e>
 8089740:	9a02      	ldr	r2, [sp, #8]
 8089742:	4294      	cmp	r4, r2
 8089744:	f080 83f2 	bcs.w	8089f2c <strftime+0x954>
 8089748:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808974c:	3401      	adds	r4, #1
 808974e:	f803 2b01 	strb.w	r2, [r3], #1
 8089752:	e7f2      	b.n	808973a <strftime+0x162>
 8089754:	69ab      	ldr	r3, [r5, #24]
 8089756:	9a03      	ldr	r2, [sp, #12]
 8089758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808975c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8089760:	4640      	mov	r0, r8
 8089762:	f000 fbed 	bl	8089f40 <strlen>
 8089766:	f108 38ff 	add.w	r8, r8, #4294967295
 808976a:	193b      	adds	r3, r7, r4
 808976c:	4420      	add	r0, r4
 808976e:	4284      	cmp	r4, r0
 8089770:	f000 83d1 	beq.w	8089f16 <strftime+0x93e>
 8089774:	9a02      	ldr	r2, [sp, #8]
 8089776:	4294      	cmp	r4, r2
 8089778:	f080 83d8 	bcs.w	8089f2c <strftime+0x954>
 808977c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8089780:	3401      	adds	r4, #1
 8089782:	f803 2b01 	strb.w	r2, [r3], #1
 8089786:	e7f2      	b.n	808976e <strftime+0x196>
 8089788:	692b      	ldr	r3, [r5, #16]
 808978a:	9a03      	ldr	r2, [sp, #12]
 808978c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8089790:	4640      	mov	r0, r8
 8089792:	f000 fbd5 	bl	8089f40 <strlen>
 8089796:	f108 38ff 	add.w	r8, r8, #4294967295
 808979a:	193b      	adds	r3, r7, r4
 808979c:	4420      	add	r0, r4
 808979e:	4284      	cmp	r4, r0
 80897a0:	f000 83b9 	beq.w	8089f16 <strftime+0x93e>
 80897a4:	9a02      	ldr	r2, [sp, #8]
 80897a6:	4294      	cmp	r4, r2
 80897a8:	f080 83c0 	bcs.w	8089f2c <strftime+0x954>
 80897ac:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80897b0:	3401      	adds	r4, #1
 80897b2:	f803 2b01 	strb.w	r2, [r3], #1
 80897b6:	e7f2      	b.n	808979e <strftime+0x1c6>
 80897b8:	692b      	ldr	r3, [r5, #16]
 80897ba:	9a03      	ldr	r2, [sp, #12]
 80897bc:	330c      	adds	r3, #12
 80897be:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80897c2:	4640      	mov	r0, r8
 80897c4:	f000 fbbc 	bl	8089f40 <strlen>
 80897c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80897cc:	193b      	adds	r3, r7, r4
 80897ce:	4420      	add	r0, r4
 80897d0:	4284      	cmp	r4, r0
 80897d2:	f000 83a0 	beq.w	8089f16 <strftime+0x93e>
 80897d6:	9a02      	ldr	r2, [sp, #8]
 80897d8:	4294      	cmp	r4, r2
 80897da:	f080 83a7 	bcs.w	8089f2c <strftime+0x954>
 80897de:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80897e2:	3401      	adds	r4, #1
 80897e4:	f803 2b01 	strb.w	r2, [r3], #1
 80897e8:	e7f2      	b.n	80897d0 <strftime+0x1f8>
 80897ea:	9b03      	ldr	r3, [sp, #12]
 80897ec:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80897f0:	e00a      	b.n	8089808 <strftime+0x230>
 80897f2:	9b03      	ldr	r3, [sp, #12]
 80897f4:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80897f8:	e006      	b.n	8089808 <strftime+0x230>
 80897fa:	9b03      	ldr	r3, [sp, #12]
 80897fc:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 8089800:	e002      	b.n	8089808 <strftime+0x230>
 8089802:	9b03      	ldr	r3, [sp, #12]
 8089804:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 8089808:	4640      	mov	r0, r8
 808980a:	f000 fb99 	bl	8089f40 <strlen>
 808980e:	f898 3000 	ldrb.w	r3, [r8]
 8089812:	2b00      	cmp	r3, #0
 8089814:	f000 837f 	beq.w	8089f16 <strftime+0x93e>
 8089818:	462b      	mov	r3, r5
 808981a:	4642      	mov	r2, r8
 808981c:	e093      	b.n	8089946 <strftime+0x36e>
 808981e:	49b6      	ldr	r1, [pc, #728]	; (8089af8 <strftime+0x520>)
 8089820:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8089824:	458b      	cmp	fp, r1
 8089826:	bfac      	ite	ge
 8089828:	2100      	movge	r1, #0
 808982a:	2101      	movlt	r1, #1
 808982c:	f1bb 0f00 	cmp.w	fp, #0
 8089830:	db04      	blt.n	808983c <strftime+0x264>
 8089832:	2064      	movs	r0, #100	; 0x64
 8089834:	fb9b f0f0 	sdiv	r0, fp, r0
 8089838:	3013      	adds	r0, #19
 808983a:	e008      	b.n	808984e <strftime+0x276>
 808983c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8089840:	9107      	str	r1, [sp, #28]
 8089842:	f000 fef3 	bl	808a62c <abs>
 8089846:	2364      	movs	r3, #100	; 0x64
 8089848:	fb90 f0f3 	sdiv	r0, r0, r3
 808984c:	9907      	ldr	r1, [sp, #28]
 808984e:	f1ba 0f00 	cmp.w	sl, #0
 8089852:	d008      	beq.n	8089866 <strftime+0x28e>
 8089854:	2863      	cmp	r0, #99	; 0x63
 8089856:	dd09      	ble.n	808986c <strftime+0x294>
 8089858:	4ba8      	ldr	r3, [pc, #672]	; (8089afc <strftime+0x524>)
 808985a:	4aa9      	ldr	r2, [pc, #676]	; (8089b00 <strftime+0x528>)
 808985c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089860:	bf18      	it	ne
 8089862:	4613      	movne	r3, r2
 8089864:	e003      	b.n	808986e <strftime+0x296>
 8089866:	4ba6      	ldr	r3, [pc, #664]	; (8089b00 <strftime+0x528>)
 8089868:	4aa6      	ldr	r2, [pc, #664]	; (8089b04 <strftime+0x52c>)
 808986a:	e001      	b.n	8089870 <strftime+0x298>
 808986c:	4ba4      	ldr	r3, [pc, #656]	; (8089b00 <strftime+0x528>)
 808986e:	4aa6      	ldr	r2, [pc, #664]	; (8089b08 <strftime+0x530>)
 8089870:	f1b8 0f01 	cmp.w	r8, #1
 8089874:	bf98      	it	ls
 8089876:	f04f 0802 	movls.w	r8, #2
 808987a:	ebc1 0108 	rsb	r1, r1, r8
 808987e:	9001      	str	r0, [sp, #4]
 8089880:	9100      	str	r1, [sp, #0]
 8089882:	489d      	ldr	r0, [pc, #628]	; (8089af8 <strftime+0x520>)
 8089884:	49a1      	ldr	r1, [pc, #644]	; (8089b0c <strftime+0x534>)
 8089886:	4583      	cmp	fp, r0
 8089888:	bfb8      	it	lt
 808988a:	460b      	movlt	r3, r1
 808988c:	e21d      	b.n	8089cca <strftime+0x6f2>
 808988e:	4aa0      	ldr	r2, [pc, #640]	; (8089b10 <strftime+0x538>)
 8089890:	49a0      	ldr	r1, [pc, #640]	; (8089b14 <strftime+0x53c>)
 8089892:	68eb      	ldr	r3, [r5, #12]
 8089894:	2864      	cmp	r0, #100	; 0x64
 8089896:	bf08      	it	eq
 8089898:	460a      	moveq	r2, r1
 808989a:	1b31      	subs	r1, r6, r4
 808989c:	1938      	adds	r0, r7, r4
 808989e:	f7fa ffdf 	bl	8084860 <sniprintf>
 80898a2:	2800      	cmp	r0, #0
 80898a4:	f280 8302 	bge.w	8089eac <strftime+0x8d4>
 80898a8:	e340      	b.n	8089f2c <strftime+0x954>
 80898aa:	6968      	ldr	r0, [r5, #20]
 80898ac:	692b      	ldr	r3, [r5, #16]
 80898ae:	2800      	cmp	r0, #0
 80898b0:	f103 0b01 	add.w	fp, r3, #1
 80898b4:	eb07 0804 	add.w	r8, r7, r4
 80898b8:	ebc4 0a06 	rsb	sl, r4, r6
 80898bc:	68eb      	ldr	r3, [r5, #12]
 80898be:	db05      	blt.n	80898cc <strftime+0x2f4>
 80898c0:	2264      	movs	r2, #100	; 0x64
 80898c2:	fb90 f1f2 	sdiv	r1, r0, r2
 80898c6:	fb02 0011 	mls	r0, r2, r1, r0
 80898ca:	e00a      	b.n	80898e2 <strftime+0x30a>
 80898cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80898d0:	9307      	str	r3, [sp, #28]
 80898d2:	f000 feab 	bl	808a62c <abs>
 80898d6:	2264      	movs	r2, #100	; 0x64
 80898d8:	fb90 f1f2 	sdiv	r1, r0, r2
 80898dc:	fb01 0012 	mls	r0, r1, r2, r0
 80898e0:	9b07      	ldr	r3, [sp, #28]
 80898e2:	9001      	str	r0, [sp, #4]
 80898e4:	9300      	str	r3, [sp, #0]
 80898e6:	4651      	mov	r1, sl
 80898e8:	465b      	mov	r3, fp
 80898ea:	4640      	mov	r0, r8
 80898ec:	4a8a      	ldr	r2, [pc, #552]	; (8089b18 <strftime+0x540>)
 80898ee:	f7fa ffb7 	bl	8084860 <sniprintf>
 80898f2:	e7d6      	b.n	80898a2 <strftime+0x2ca>
 80898f4:	2325      	movs	r3, #37	; 0x25
 80898f6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80898fa:	f1ba 0f00 	cmp.w	sl, #0
 80898fe:	d007      	beq.n	8089910 <strftime+0x338>
 8089900:	f1b8 0f05 	cmp.w	r8, #5
 8089904:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 8089908:	bf98      	it	ls
 808990a:	f04f 0806 	movls.w	r8, #6
 808990e:	e004      	b.n	808991a <strftime+0x342>
 8089910:	232b      	movs	r3, #43	; 0x2b
 8089912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8089916:	f04f 080a 	mov.w	r8, #10
 808991a:	f1b8 0306 	subs.w	r3, r8, #6
 808991e:	d102      	bne.n	8089926 <strftime+0x34e>
 8089920:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8089924:	e00a      	b.n	808993c <strftime+0x364>
 8089926:	4a7d      	ldr	r2, [pc, #500]	; (8089b1c <strftime+0x544>)
 8089928:	211e      	movs	r1, #30
 808992a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808992e:	f7fa ff97 	bl	8084860 <sniprintf>
 8089932:	2800      	cmp	r0, #0
 8089934:	ddf4      	ble.n	8089920 <strftime+0x348>
 8089936:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808993a:	4418      	add	r0, r3
 808993c:	4978      	ldr	r1, [pc, #480]	; (8089b20 <strftime+0x548>)
 808993e:	f7ff fdc7 	bl	80894d0 <strcpy>
 8089942:	462b      	mov	r3, r5
 8089944:	aa0a      	add	r2, sp, #40	; 0x28
 8089946:	1b31      	subs	r1, r6, r4
 8089948:	1938      	adds	r0, r7, r4
 808994a:	f7ff fe45 	bl	80895d8 <strftime>
 808994e:	2800      	cmp	r0, #0
 8089950:	f340 82ec 	ble.w	8089f2c <strftime+0x954>
 8089954:	4404      	add	r4, r0
 8089956:	e2de      	b.n	8089f16 <strftime+0x93e>
 8089958:	4628      	mov	r0, r5
 808995a:	f7ff fddc 	bl	8089516 <iso_year_adjust>
 808995e:	4680      	mov	r8, r0
 8089960:	6968      	ldr	r0, [r5, #20]
 8089962:	2800      	cmp	r0, #0
 8089964:	db05      	blt.n	8089972 <strftime+0x39a>
 8089966:	2264      	movs	r2, #100	; 0x64
 8089968:	fb90 f1f2 	sdiv	r1, r0, r2
 808996c:	fb02 0011 	mls	r0, r2, r1, r0
 8089970:	e008      	b.n	8089984 <strftime+0x3ac>
 8089972:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8089976:	f000 fe59 	bl	808a62c <abs>
 808997a:	2264      	movs	r2, #100	; 0x64
 808997c:	fb90 f3f2 	sdiv	r3, r0, r2
 8089980:	fb03 0012 	mls	r0, r3, r2, r0
 8089984:	f1b8 0f00 	cmp.w	r8, #0
 8089988:	da06      	bge.n	8089998 <strftime+0x3c0>
 808998a:	696a      	ldr	r2, [r5, #20]
 808998c:	4b65      	ldr	r3, [pc, #404]	; (8089b24 <strftime+0x54c>)
 808998e:	429a      	cmp	r2, r3
 8089990:	bfb8      	it	lt
 8089992:	f04f 0801 	movlt.w	r8, #1
 8089996:	e006      	b.n	80899a6 <strftime+0x3ce>
 8089998:	d005      	beq.n	80899a6 <strftime+0x3ce>
 808999a:	696a      	ldr	r2, [r5, #20]
 808999c:	4b56      	ldr	r3, [pc, #344]	; (8089af8 <strftime+0x520>)
 808999e:	429a      	cmp	r2, r3
 80899a0:	bfb8      	it	lt
 80899a2:	f04f 38ff 	movlt.w	r8, #4294967295
 80899a6:	2364      	movs	r3, #100	; 0x64
 80899a8:	4440      	add	r0, r8
 80899aa:	fb90 f2f3 	sdiv	r2, r0, r3
 80899ae:	fb03 0012 	mls	r0, r3, r2, r0
 80899b2:	4418      	add	r0, r3
 80899b4:	e1f8      	b.n	8089da8 <strftime+0x7d0>
 80899b6:	4b50      	ldr	r3, [pc, #320]	; (8089af8 <strftime+0x520>)
 80899b8:	6969      	ldr	r1, [r5, #20]
 80899ba:	4628      	mov	r0, r5
 80899bc:	4299      	cmp	r1, r3
 80899be:	bfac      	ite	ge
 80899c0:	2300      	movge	r3, #0
 80899c2:	2301      	movlt	r3, #1
 80899c4:	9108      	str	r1, [sp, #32]
 80899c6:	9307      	str	r3, [sp, #28]
 80899c8:	f7ff fda5 	bl	8089516 <iso_year_adjust>
 80899cc:	9908      	ldr	r1, [sp, #32]
 80899ce:	4683      	mov	fp, r0
 80899d0:	2900      	cmp	r1, #0
 80899d2:	db04      	blt.n	80899de <strftime+0x406>
 80899d4:	2364      	movs	r3, #100	; 0x64
 80899d6:	fb91 f3f3 	sdiv	r3, r1, r3
 80899da:	3313      	adds	r3, #19
 80899dc:	e008      	b.n	80899f0 <strftime+0x418>
 80899de:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80899e2:	9108      	str	r1, [sp, #32]
 80899e4:	f000 fe22 	bl	808a62c <abs>
 80899e8:	2364      	movs	r3, #100	; 0x64
 80899ea:	fb90 f3f3 	sdiv	r3, r0, r3
 80899ee:	9908      	ldr	r1, [sp, #32]
 80899f0:	6968      	ldr	r0, [r5, #20]
 80899f2:	2800      	cmp	r0, #0
 80899f4:	db06      	blt.n	8089a04 <strftime+0x42c>
 80899f6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80899fa:	fb90 fcfe 	sdiv	ip, r0, lr
 80899fe:	fb0e 001c 	mls	r0, lr, ip, r0
 8089a02:	e00d      	b.n	8089a20 <strftime+0x448>
 8089a04:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8089a08:	9109      	str	r1, [sp, #36]	; 0x24
 8089a0a:	9308      	str	r3, [sp, #32]
 8089a0c:	f000 fe0e 	bl	808a62c <abs>
 8089a10:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8089a14:	fb90 fcfe 	sdiv	ip, r0, lr
 8089a18:	fb0c 001e 	mls	r0, ip, lr, r0
 8089a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089a1e:	9b08      	ldr	r3, [sp, #32]
 8089a20:	f1bb 0f00 	cmp.w	fp, #0
 8089a24:	da08      	bge.n	8089a38 <strftime+0x460>
 8089a26:	6969      	ldr	r1, [r5, #20]
 8089a28:	4a3e      	ldr	r2, [pc, #248]	; (8089b24 <strftime+0x54c>)
 8089a2a:	4291      	cmp	r1, r2
 8089a2c:	da0a      	bge.n	8089a44 <strftime+0x46c>
 8089a2e:	f04f 0b01 	mov.w	fp, #1
 8089a32:	f8cd b01c 	str.w	fp, [sp, #28]
 8089a36:	e005      	b.n	8089a44 <strftime+0x46c>
 8089a38:	d004      	beq.n	8089a44 <strftime+0x46c>
 8089a3a:	4a2f      	ldr	r2, [pc, #188]	; (8089af8 <strftime+0x520>)
 8089a3c:	4291      	cmp	r1, r2
 8089a3e:	bfb8      	it	lt
 8089a40:	f04f 3bff 	movlt.w	fp, #4294967295
 8089a44:	eb0b 0200 	add.w	r2, fp, r0
 8089a48:	1c50      	adds	r0, r2, #1
 8089a4a:	d102      	bne.n	8089a52 <strftime+0x47a>
 8089a4c:	3b01      	subs	r3, #1
 8089a4e:	2263      	movs	r2, #99	; 0x63
 8089a50:	e003      	b.n	8089a5a <strftime+0x482>
 8089a52:	2a64      	cmp	r2, #100	; 0x64
 8089a54:	bf04      	itt	eq
 8089a56:	3301      	addeq	r3, #1
 8089a58:	2200      	moveq	r2, #0
 8089a5a:	2064      	movs	r0, #100	; 0x64
 8089a5c:	fb00 2303 	mla	r3, r0, r3, r2
 8089a60:	9a07      	ldr	r2, [sp, #28]
 8089a62:	b142      	cbz	r2, 8089a76 <strftime+0x49e>
 8089a64:	222d      	movs	r2, #45	; 0x2d
 8089a66:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8089a6a:	f1b8 0f00 	cmp.w	r8, #0
 8089a6e:	d013      	beq.n	8089a98 <strftime+0x4c0>
 8089a70:	f108 38ff 	add.w	r8, r8, #4294967295
 8089a74:	e010      	b.n	8089a98 <strftime+0x4c0>
 8089a76:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089a7a:	d110      	bne.n	8089a9e <strftime+0x4c6>
 8089a7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8089a80:	4293      	cmp	r3, r2
 8089a82:	d90c      	bls.n	8089a9e <strftime+0x4c6>
 8089a84:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8089a88:	f1b8 0f00 	cmp.w	r8, #0
 8089a8c:	d1f0      	bne.n	8089a70 <strftime+0x498>
 8089a8e:	aa12      	add	r2, sp, #72	; 0x48
 8089a90:	2125      	movs	r1, #37	; 0x25
 8089a92:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 8089a96:	e00a      	b.n	8089aae <strftime+0x4d6>
 8089a98:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8089a9c:	e000      	b.n	8089aa0 <strftime+0x4c8>
 8089a9e:	aa0a      	add	r2, sp, #40	; 0x28
 8089aa0:	2125      	movs	r1, #37	; 0x25
 8089aa2:	7011      	strb	r1, [r2, #0]
 8089aa4:	f1ba 0f00 	cmp.w	sl, #0
 8089aa8:	d101      	bne.n	8089aae <strftime+0x4d6>
 8089aaa:	1c50      	adds	r0, r2, #1
 8089aac:	e002      	b.n	8089ab4 <strftime+0x4dc>
 8089aae:	2130      	movs	r1, #48	; 0x30
 8089ab0:	1c90      	adds	r0, r2, #2
 8089ab2:	7051      	strb	r1, [r2, #1]
 8089ab4:	491c      	ldr	r1, [pc, #112]	; (8089b28 <strftime+0x550>)
 8089ab6:	9307      	str	r3, [sp, #28]
 8089ab8:	f7ff fd0a 	bl	80894d0 <strcpy>
 8089abc:	9b07      	ldr	r3, [sp, #28]
 8089abe:	9300      	str	r3, [sp, #0]
 8089ac0:	e1ac      	b.n	8089e1c <strftime+0x844>
 8089ac2:	4a14      	ldr	r2, [pc, #80]	; (8089b14 <strftime+0x53c>)
 8089ac4:	4912      	ldr	r1, [pc, #72]	; (8089b10 <strftime+0x538>)
 8089ac6:	68ab      	ldr	r3, [r5, #8]
 8089ac8:	286b      	cmp	r0, #107	; 0x6b
 8089aca:	bf08      	it	eq
 8089acc:	460a      	moveq	r2, r1
 8089ace:	e6e4      	b.n	808989a <strftime+0x2c2>
 8089ad0:	68a9      	ldr	r1, [r5, #8]
 8089ad2:	230c      	movs	r3, #12
 8089ad4:	b131      	cbz	r1, 8089ae4 <strftime+0x50c>
 8089ad6:	4299      	cmp	r1, r3
 8089ad8:	bf16      	itet	ne
 8089ada:	fb91 f2f3 	sdivne	r2, r1, r3
 8089ade:	460b      	moveq	r3, r1
 8089ae0:	fb03 1312 	mlsne	r3, r3, r2, r1
 8089ae4:	4a0a      	ldr	r2, [pc, #40]	; (8089b10 <strftime+0x538>)
 8089ae6:	490b      	ldr	r1, [pc, #44]	; (8089b14 <strftime+0x53c>)
 8089ae8:	2849      	cmp	r0, #73	; 0x49
 8089aea:	bf08      	it	eq
 8089aec:	460a      	moveq	r2, r1
 8089aee:	e6d4      	b.n	808989a <strftime+0x2c2>
 8089af0:	69eb      	ldr	r3, [r5, #28]
 8089af2:	4a0e      	ldr	r2, [pc, #56]	; (8089b2c <strftime+0x554>)
 8089af4:	3301      	adds	r3, #1
 8089af6:	e6d0      	b.n	808989a <strftime+0x2c2>
 8089af8:	fffff894 	.word	0xfffff894
 8089afc:	0808c03f 	.word	0x0808c03f
 8089b00:	0808b10e 	.word	0x0808b10e
 8089b04:	0808c030 	.word	0x0808c030
 8089b08:	0808c037 	.word	0x0808c037
 8089b0c:	0808aa7b 	.word	0x0808aa7b
 8089b10:	0808c041 	.word	0x0808c041
 8089b14:	0808c04f 	.word	0x0808c04f
 8089b18:	0808c045 	.word	0x0808c045
 8089b1c:	0808c054 	.word	0x0808c054
 8089b20:	0808c058 	.word	0x0808c058
 8089b24:	fffff895 	.word	0xfffff895
 8089b28:	0808c060 	.word	0x0808c060
 8089b2c:	0808c064 	.word	0x0808c064
 8089b30:	692b      	ldr	r3, [r5, #16]
 8089b32:	3301      	adds	r3, #1
 8089b34:	e13c      	b.n	8089db0 <strftime+0x7d8>
 8089b36:	686b      	ldr	r3, [r5, #4]
 8089b38:	e13a      	b.n	8089db0 <strftime+0x7d8>
 8089b3a:	9b02      	ldr	r3, [sp, #8]
 8089b3c:	429c      	cmp	r4, r3
 8089b3e:	f080 81f5 	bcs.w	8089f2c <strftime+0x954>
 8089b42:	230a      	movs	r3, #10
 8089b44:	e1e5      	b.n	8089f12 <strftime+0x93a>
 8089b46:	68ab      	ldr	r3, [r5, #8]
 8089b48:	9a03      	ldr	r2, [sp, #12]
 8089b4a:	2b0b      	cmp	r3, #11
 8089b4c:	bfcc      	ite	gt
 8089b4e:	23a4      	movgt	r3, #164	; 0xa4
 8089b50:	23a0      	movle	r3, #160	; 0xa0
 8089b52:	4413      	add	r3, r2
 8089b54:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8089b58:	4640      	mov	r0, r8
 8089b5a:	f000 f9f1 	bl	8089f40 <strlen>
 8089b5e:	4642      	mov	r2, r8
 8089b60:	4bb1      	ldr	r3, [pc, #708]	; (8089e28 <strftime+0x850>)
 8089b62:	1939      	adds	r1, r7, r4
 8089b64:	f8d3 e000 	ldr.w	lr, [r3]
 8089b68:	4420      	add	r0, r4
 8089b6a:	4284      	cmp	r4, r0
 8089b6c:	f000 81d3 	beq.w	8089f16 <strftime+0x93e>
 8089b70:	9b02      	ldr	r3, [sp, #8]
 8089b72:	429c      	cmp	r4, r3
 8089b74:	f080 81da 	bcs.w	8089f2c <strftime+0x954>
 8089b78:	f899 3000 	ldrb.w	r3, [r9]
 8089b7c:	3401      	adds	r4, #1
 8089b7e:	2b50      	cmp	r3, #80	; 0x50
 8089b80:	7813      	ldrb	r3, [r2, #0]
 8089b82:	d10a      	bne.n	8089b9a <strftime+0x5c2>
 8089b84:	eb0e 0c03 	add.w	ip, lr, r3
 8089b88:	f89c c001 	ldrb.w	ip, [ip, #1]
 8089b8c:	f00c 0c03 	and.w	ip, ip, #3
 8089b90:	f1bc 0f01 	cmp.w	ip, #1
 8089b94:	bf08      	it	eq
 8089b96:	3320      	addeq	r3, #32
 8089b98:	b2db      	uxtb	r3, r3
 8089b9a:	f801 3b01 	strb.w	r3, [r1], #1
 8089b9e:	3201      	adds	r2, #1
 8089ba0:	e7e3      	b.n	8089b6a <strftime+0x592>
 8089ba2:	686b      	ldr	r3, [r5, #4]
 8089ba4:	4aa1      	ldr	r2, [pc, #644]	; (8089e2c <strftime+0x854>)
 8089ba6:	9300      	str	r3, [sp, #0]
 8089ba8:	68ab      	ldr	r3, [r5, #8]
 8089baa:	e139      	b.n	8089e20 <strftime+0x848>
 8089bac:	6a2b      	ldr	r3, [r5, #32]
 8089bae:	2b00      	cmp	r3, #0
 8089bb0:	db17      	blt.n	8089be2 <strftime+0x60a>
 8089bb2:	f000 fbb3 	bl	808a31c <__tz_lock>
 8089bb6:	9b06      	ldr	r3, [sp, #24]
 8089bb8:	b91b      	cbnz	r3, 8089bc2 <strftime+0x5ea>
 8089bba:	f000 fbb1 	bl	808a320 <_tzset_unlocked>
 8089bbe:	2301      	movs	r3, #1
 8089bc0:	9306      	str	r3, [sp, #24]
 8089bc2:	f000 fd7b 	bl	808a6bc <__gettzinfo>
 8089bc6:	6a2b      	ldr	r3, [r5, #32]
 8089bc8:	221c      	movs	r2, #28
 8089bca:	2b00      	cmp	r3, #0
 8089bcc:	bfd4      	ite	le
 8089bce:	2300      	movle	r3, #0
 8089bd0:	2301      	movgt	r3, #1
 8089bd2:	fb02 0003 	mla	r0, r2, r3, r0
 8089bd6:	6a03      	ldr	r3, [r0, #32]
 8089bd8:	f1c3 0800 	rsb	r8, r3, #0
 8089bdc:	f000 fb9f 	bl	808a31e <__tz_unlock>
 8089be0:	e001      	b.n	8089be6 <strftime+0x60e>
 8089be2:	f04f 0800 	mov.w	r8, #0
 8089be6:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8089bea:	ebc4 0c06 	rsb	ip, r4, r6
 8089bee:	4670      	mov	r0, lr
 8089bf0:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 8089bf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8089bf8:	f141 33ff 	adc.w	r3, r1, #4294967295
 8089bfc:	2a00      	cmp	r2, #0
 8089bfe:	f173 0b00 	sbcs.w	fp, r3, #0
 8089c02:	eb07 0a04 	add.w	sl, r7, r4
 8089c06:	da03      	bge.n	8089c10 <strftime+0x638>
 8089c08:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 8089c0c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8089c10:	0891      	lsrs	r1, r2, #2
 8089c12:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 8089c16:	109b      	asrs	r3, r3, #2
 8089c18:	9104      	str	r1, [sp, #16]
 8089c1a:	9305      	str	r3, [sp, #20]
 8089c1c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8089c20:	2364      	movs	r3, #100	; 0x64
 8089c22:	fb91 f1f3 	sdiv	r1, r1, r3
 8089c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8089c2a:	1a52      	subs	r2, r2, r1
 8089c2c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8089c30:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 8089c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8089c38:	fb90 f1f1 	sdiv	r1, r0, r1
 8089c3c:	1852      	adds	r2, r2, r1
 8089c3e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089c42:	f240 116d 	movw	r1, #365	; 0x16d
 8089c46:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 8089c4a:	fb01 fe0e 	mul.w	lr, r1, lr
 8089c4e:	69e9      	ldr	r1, [r5, #28]
 8089c50:	eb12 020e 	adds.w	r2, r2, lr
 8089c54:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 8089c58:	1852      	adds	r2, r2, r1
 8089c5a:	f04f 0e18 	mov.w	lr, #24
 8089c5e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089c62:	fba2 010e 	umull	r0, r1, r2, lr
 8089c66:	fb0e 1103 	mla	r1, lr, r3, r1
 8089c6a:	68ab      	ldr	r3, [r5, #8]
 8089c6c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 8089c70:	18c0      	adds	r0, r0, r3
 8089c72:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8089c76:	fba0 230e 	umull	r2, r3, r0, lr
 8089c7a:	fb0e 3301 	mla	r3, lr, r1, r3
 8089c7e:	6869      	ldr	r1, [r5, #4]
 8089c80:	1852      	adds	r2, r2, r1
 8089c82:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8089c86:	fba2 010e 	umull	r0, r1, r2, lr
 8089c8a:	fb0e 1103 	mla	r1, lr, r3, r1
 8089c8e:	682b      	ldr	r3, [r5, #0]
 8089c90:	4a67      	ldr	r2, [pc, #412]	; (8089e30 <strftime+0x858>)
 8089c92:	18c0      	adds	r0, r0, r3
 8089c94:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8089c98:	ebb0 0008 	subs.w	r0, r0, r8
 8089c9c:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 8089ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8089ca4:	4661      	mov	r1, ip
 8089ca6:	4650      	mov	r0, sl
 8089ca8:	f7fa fdda 	bl	8084860 <sniprintf>
 8089cac:	e5f9      	b.n	80898a2 <strftime+0x2ca>
 8089cae:	682b      	ldr	r3, [r5, #0]
 8089cb0:	e07e      	b.n	8089db0 <strftime+0x7d8>
 8089cb2:	9b02      	ldr	r3, [sp, #8]
 8089cb4:	429c      	cmp	r4, r3
 8089cb6:	f080 8139 	bcs.w	8089f2c <strftime+0x954>
 8089cba:	2309      	movs	r3, #9
 8089cbc:	e129      	b.n	8089f12 <strftime+0x93a>
 8089cbe:	682b      	ldr	r3, [r5, #0]
 8089cc0:	4a5c      	ldr	r2, [pc, #368]	; (8089e34 <strftime+0x85c>)
 8089cc2:	9301      	str	r3, [sp, #4]
 8089cc4:	686b      	ldr	r3, [r5, #4]
 8089cc6:	9300      	str	r3, [sp, #0]
 8089cc8:	68ab      	ldr	r3, [r5, #8]
 8089cca:	1b31      	subs	r1, r6, r4
 8089ccc:	1938      	adds	r0, r7, r4
 8089cce:	e60e      	b.n	80898ee <strftime+0x316>
 8089cd0:	9b02      	ldr	r3, [sp, #8]
 8089cd2:	429c      	cmp	r4, r3
 8089cd4:	f080 812a 	bcs.w	8089f2c <strftime+0x954>
 8089cd8:	69ab      	ldr	r3, [r5, #24]
 8089cda:	1c62      	adds	r2, r4, #1
 8089cdc:	b90b      	cbnz	r3, 8089ce2 <strftime+0x70a>
 8089cde:	2337      	movs	r3, #55	; 0x37
 8089ce0:	e000      	b.n	8089ce4 <strftime+0x70c>
 8089ce2:	3330      	adds	r3, #48	; 0x30
 8089ce4:	553b      	strb	r3, [r7, r4]
 8089ce6:	4614      	mov	r4, r2
 8089ce8:	e115      	b.n	8089f16 <strftime+0x93e>
 8089cea:	69eb      	ldr	r3, [r5, #28]
 8089cec:	69aa      	ldr	r2, [r5, #24]
 8089cee:	3307      	adds	r3, #7
 8089cf0:	1a9b      	subs	r3, r3, r2
 8089cf2:	2207      	movs	r2, #7
 8089cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8089cf8:	e05a      	b.n	8089db0 <strftime+0x7d8>
 8089cfa:	4628      	mov	r0, r5
 8089cfc:	f7ff fc0b 	bl	8089516 <iso_year_adjust>
 8089d00:	69aa      	ldr	r2, [r5, #24]
 8089d02:	b10a      	cbz	r2, 8089d08 <strftime+0x730>
 8089d04:	1e53      	subs	r3, r2, #1
 8089d06:	e000      	b.n	8089d0a <strftime+0x732>
 8089d08:	2306      	movs	r3, #6
 8089d0a:	2800      	cmp	r0, #0
 8089d0c:	dc2f      	bgt.n	8089d6e <strftime+0x796>
 8089d0e:	69ea      	ldr	r2, [r5, #28]
 8089d10:	d101      	bne.n	8089d16 <strftime+0x73e>
 8089d12:	320a      	adds	r2, #10
 8089d14:	e03b      	b.n	8089d8e <strftime+0x7b6>
 8089d16:	f240 716b 	movw	r1, #1899	; 0x76b
 8089d1a:	1a9a      	subs	r2, r3, r2
 8089d1c:	696b      	ldr	r3, [r5, #20]
 8089d1e:	2b00      	cmp	r3, #0
 8089d20:	bfb4      	ite	lt
 8089d22:	4608      	movlt	r0, r1
 8089d24:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 8089d28:	4418      	add	r0, r3
 8089d2a:	0781      	lsls	r1, r0, #30
 8089d2c:	d107      	bne.n	8089d3e <strftime+0x766>
 8089d2e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8089d32:	4601      	mov	r1, r0
 8089d34:	fb90 f0fe 	sdiv	r0, r0, lr
 8089d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8089d3c:	b981      	cbnz	r1, 8089d60 <strftime+0x788>
 8089d3e:	f240 716b 	movw	r1, #1899	; 0x76b
 8089d42:	2b00      	cmp	r3, #0
 8089d44:	bfa8      	it	ge
 8089d46:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8089d4a:	4419      	add	r1, r3
 8089d4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8089d50:	fb91 f0f3 	sdiv	r0, r1, r3
 8089d54:	fb03 1110 	mls	r1, r3, r0, r1
 8089d58:	fab1 f181 	clz	r1, r1
 8089d5c:	0949      	lsrs	r1, r1, #5
 8089d5e:	e000      	b.n	8089d62 <strftime+0x78a>
 8089d60:	2101      	movs	r1, #1
 8089d62:	1a52      	subs	r2, r2, r1
 8089d64:	2a05      	cmp	r2, #5
 8089d66:	bfb4      	ite	lt
 8089d68:	2335      	movlt	r3, #53	; 0x35
 8089d6a:	2334      	movge	r3, #52	; 0x34
 8089d6c:	e020      	b.n	8089db0 <strftime+0x7d8>
 8089d6e:	2301      	movs	r3, #1
 8089d70:	e01e      	b.n	8089db0 <strftime+0x7d8>
 8089d72:	9b02      	ldr	r3, [sp, #8]
 8089d74:	429c      	cmp	r4, r3
 8089d76:	f080 80d9 	bcs.w	8089f2c <strftime+0x954>
 8089d7a:	69ab      	ldr	r3, [r5, #24]
 8089d7c:	3330      	adds	r3, #48	; 0x30
 8089d7e:	e0c8      	b.n	8089f12 <strftime+0x93a>
 8089d80:	69aa      	ldr	r2, [r5, #24]
 8089d82:	b10a      	cbz	r2, 8089d88 <strftime+0x7b0>
 8089d84:	1e53      	subs	r3, r2, #1
 8089d86:	e000      	b.n	8089d8a <strftime+0x7b2>
 8089d88:	2306      	movs	r3, #6
 8089d8a:	69ea      	ldr	r2, [r5, #28]
 8089d8c:	3207      	adds	r2, #7
 8089d8e:	1ad2      	subs	r2, r2, r3
 8089d90:	2307      	movs	r3, #7
 8089d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8089d96:	e00b      	b.n	8089db0 <strftime+0x7d8>
 8089d98:	6968      	ldr	r0, [r5, #20]
 8089d9a:	2800      	cmp	r0, #0
 8089d9c:	da03      	bge.n	8089da6 <strftime+0x7ce>
 8089d9e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8089da2:	f000 fc43 	bl	808a62c <abs>
 8089da6:	2364      	movs	r3, #100	; 0x64
 8089da8:	fb90 f2f3 	sdiv	r2, r0, r3
 8089dac:	fb02 0313 	mls	r3, r2, r3, r0
 8089db0:	4a21      	ldr	r2, [pc, #132]	; (8089e38 <strftime+0x860>)
 8089db2:	e572      	b.n	808989a <strftime+0x2c2>
 8089db4:	696b      	ldr	r3, [r5, #20]
 8089db6:	4a21      	ldr	r2, [pc, #132]	; (8089e3c <strftime+0x864>)
 8089db8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 8089dbc:	4293      	cmp	r3, r2
 8089dbe:	da05      	bge.n	8089dcc <strftime+0x7f4>
 8089dc0:	232d      	movs	r3, #45	; 0x2d
 8089dc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8089dc6:	f1cb 0b00 	rsb	fp, fp, #0
 8089dca:	e008      	b.n	8089dde <strftime+0x806>
 8089dcc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8089dd0:	d10d      	bne.n	8089dee <strftime+0x816>
 8089dd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8089dd6:	459b      	cmp	fp, r3
 8089dd8:	d911      	bls.n	8089dfe <strftime+0x826>
 8089dda:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8089dde:	f1b8 0f00 	cmp.w	r8, #0
 8089de2:	d001      	beq.n	8089de8 <strftime+0x810>
 8089de4:	f108 38ff 	add.w	r8, r8, #4294967295
 8089de8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8089dec:	e000      	b.n	8089df0 <strftime+0x818>
 8089dee:	ab0a      	add	r3, sp, #40	; 0x28
 8089df0:	2225      	movs	r2, #37	; 0x25
 8089df2:	701a      	strb	r2, [r3, #0]
 8089df4:	f1ba 0f00 	cmp.w	sl, #0
 8089df8:	d108      	bne.n	8089e0c <strftime+0x834>
 8089dfa:	1c58      	adds	r0, r3, #1
 8089dfc:	e009      	b.n	8089e12 <strftime+0x83a>
 8089dfe:	f1b8 0f00 	cmp.w	r8, #0
 8089e02:	d1f4      	bne.n	8089dee <strftime+0x816>
 8089e04:	2325      	movs	r3, #37	; 0x25
 8089e06:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8089e0a:	ab0a      	add	r3, sp, #40	; 0x28
 8089e0c:	2230      	movs	r2, #48	; 0x30
 8089e0e:	1c98      	adds	r0, r3, #2
 8089e10:	705a      	strb	r2, [r3, #1]
 8089e12:	490b      	ldr	r1, [pc, #44]	; (8089e40 <strftime+0x868>)
 8089e14:	f7ff fb5c 	bl	80894d0 <strcpy>
 8089e18:	f8cd b000 	str.w	fp, [sp]
 8089e1c:	4643      	mov	r3, r8
 8089e1e:	aa0a      	add	r2, sp, #40	; 0x28
 8089e20:	1b31      	subs	r1, r6, r4
 8089e22:	1938      	adds	r0, r7, r4
 8089e24:	e03f      	b.n	8089ea6 <strftime+0x8ce>
 8089e26:	bf00      	nop
 8089e28:	2000082c 	.word	0x2000082c
 8089e2c:	0808c073 	.word	0x0808c073
 8089e30:	0808c069 	.word	0x0808c069
 8089e34:	0808c06e 	.word	0x0808c06e
 8089e38:	0808c04f 	.word	0x0808c04f
 8089e3c:	fffff894 	.word	0xfffff894
 8089e40:	0808c060 	.word	0x0808c060
 8089e44:	6a2b      	ldr	r3, [r5, #32]
 8089e46:	2b00      	cmp	r3, #0
 8089e48:	db65      	blt.n	8089f16 <strftime+0x93e>
 8089e4a:	f000 fa67 	bl	808a31c <__tz_lock>
 8089e4e:	9b06      	ldr	r3, [sp, #24]
 8089e50:	b91b      	cbnz	r3, 8089e5a <strftime+0x882>
 8089e52:	f000 fa65 	bl	808a320 <_tzset_unlocked>
 8089e56:	2301      	movs	r3, #1
 8089e58:	9306      	str	r3, [sp, #24]
 8089e5a:	f000 fc2f 	bl	808a6bc <__gettzinfo>
 8089e5e:	6a2b      	ldr	r3, [r5, #32]
 8089e60:	221c      	movs	r2, #28
 8089e62:	2b00      	cmp	r3, #0
 8089e64:	bfd4      	ite	le
 8089e66:	2300      	movle	r3, #0
 8089e68:	2301      	movgt	r3, #1
 8089e6a:	fb02 0003 	mla	r0, r2, r3, r0
 8089e6e:	6a03      	ldr	r3, [r0, #32]
 8089e70:	eb07 0a04 	add.w	sl, r7, r4
 8089e74:	f1c3 0800 	rsb	r8, r3, #0
 8089e78:	f000 fa51 	bl	808a31e <__tz_unlock>
 8089e7c:	233c      	movs	r3, #60	; 0x3c
 8089e7e:	fb98 f0f3 	sdiv	r0, r8, r3
 8089e82:	9307      	str	r3, [sp, #28]
 8089e84:	f000 fcb4 	bl	808a7f0 <labs>
 8089e88:	9b07      	ldr	r3, [sp, #28]
 8089e8a:	ebc4 0b06 	rsb	fp, r4, r6
 8089e8e:	fb90 f2f3 	sdiv	r2, r0, r3
 8089e92:	fb02 0013 	mls	r0, r2, r3, r0
 8089e96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089e9a:	9000      	str	r0, [sp, #0]
 8089e9c:	fb98 f3f3 	sdiv	r3, r8, r3
 8089ea0:	4659      	mov	r1, fp
 8089ea2:	4650      	mov	r0, sl
 8089ea4:	4a24      	ldr	r2, [pc, #144]	; (8089f38 <strftime+0x960>)
 8089ea6:	f7fa fcdb 	bl	8084860 <sniprintf>
 8089eaa:	e4fa      	b.n	80898a2 <strftime+0x2ca>
 8089eac:	4404      	add	r4, r0
 8089eae:	42a6      	cmp	r6, r4
 8089eb0:	d831      	bhi.n	8089f16 <strftime+0x93e>
 8089eb2:	e03b      	b.n	8089f2c <strftime+0x954>
 8089eb4:	6a2b      	ldr	r3, [r5, #32]
 8089eb6:	2b00      	cmp	r3, #0
 8089eb8:	db2d      	blt.n	8089f16 <strftime+0x93e>
 8089eba:	f000 fa2f 	bl	808a31c <__tz_lock>
 8089ebe:	9b06      	ldr	r3, [sp, #24]
 8089ec0:	b91b      	cbnz	r3, 8089eca <strftime+0x8f2>
 8089ec2:	f000 fa2d 	bl	808a320 <_tzset_unlocked>
 8089ec6:	2301      	movs	r3, #1
 8089ec8:	9306      	str	r3, [sp, #24]
 8089eca:	6a2b      	ldr	r3, [r5, #32]
 8089ecc:	4a1b      	ldr	r2, [pc, #108]	; (8089f3c <strftime+0x964>)
 8089ece:	2b00      	cmp	r3, #0
 8089ed0:	bfd4      	ite	le
 8089ed2:	2300      	movle	r3, #0
 8089ed4:	2301      	movgt	r3, #1
 8089ed6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8089eda:	4640      	mov	r0, r8
 8089edc:	f000 f830 	bl	8089f40 <strlen>
 8089ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8089ee4:	193b      	adds	r3, r7, r4
 8089ee6:	4420      	add	r0, r4
 8089ee8:	4284      	cmp	r4, r0
 8089eea:	d00b      	beq.n	8089f04 <strftime+0x92c>
 8089eec:	9a02      	ldr	r2, [sp, #8]
 8089eee:	4294      	cmp	r4, r2
 8089ef0:	d205      	bcs.n	8089efe <strftime+0x926>
 8089ef2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8089ef6:	3401      	adds	r4, #1
 8089ef8:	f803 2b01 	strb.w	r2, [r3], #1
 8089efc:	e7f4      	b.n	8089ee8 <strftime+0x910>
 8089efe:	f000 fa0e 	bl	808a31e <__tz_unlock>
 8089f02:	e013      	b.n	8089f2c <strftime+0x954>
 8089f04:	f000 fa0b 	bl	808a31e <__tz_unlock>
 8089f08:	e005      	b.n	8089f16 <strftime+0x93e>
 8089f0a:	9b02      	ldr	r3, [sp, #8]
 8089f0c:	429c      	cmp	r4, r3
 8089f0e:	d20d      	bcs.n	8089f2c <strftime+0x954>
 8089f10:	2325      	movs	r3, #37	; 0x25
 8089f12:	553b      	strb	r3, [r7, r4]
 8089f14:	3401      	adds	r4, #1
 8089f16:	f899 3000 	ldrb.w	r3, [r9]
 8089f1a:	b11b      	cbz	r3, 8089f24 <strftime+0x94c>
 8089f1c:	f109 0901 	add.w	r9, r9, #1
 8089f20:	f7ff bb69 	b.w	80895f6 <strftime+0x1e>
 8089f24:	b126      	cbz	r6, 8089f30 <strftime+0x958>
 8089f26:	2300      	movs	r3, #0
 8089f28:	553b      	strb	r3, [r7, r4]
 8089f2a:	e001      	b.n	8089f30 <strftime+0x958>
 8089f2c:	2000      	movs	r0, #0
 8089f2e:	e000      	b.n	8089f32 <strftime+0x95a>
 8089f30:	4620      	mov	r0, r4
 8089f32:	b013      	add	sp, #76	; 0x4c
 8089f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089f38:	0808c07d 	.word	0x0808c07d
 8089f3c:	20000894 	.word	0x20000894

08089f40 <strlen>:
 8089f40:	4603      	mov	r3, r0
 8089f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8089f46:	2a00      	cmp	r2, #0
 8089f48:	d1fb      	bne.n	8089f42 <strlen+0x2>
 8089f4a:	1a18      	subs	r0, r3, r0
 8089f4c:	3801      	subs	r0, #1
 8089f4e:	4770      	bx	lr

08089f50 <strncmp>:
 8089f50:	b530      	push	{r4, r5, lr}
 8089f52:	b182      	cbz	r2, 8089f76 <strncmp+0x26>
 8089f54:	1e45      	subs	r5, r0, #1
 8089f56:	3901      	subs	r1, #1
 8089f58:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8089f5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8089f60:	42a3      	cmp	r3, r4
 8089f62:	d106      	bne.n	8089f72 <strncmp+0x22>
 8089f64:	43ec      	mvns	r4, r5
 8089f66:	4414      	add	r4, r2
 8089f68:	42e0      	cmn	r0, r4
 8089f6a:	d001      	beq.n	8089f70 <strncmp+0x20>
 8089f6c:	2b00      	cmp	r3, #0
 8089f6e:	d1f3      	bne.n	8089f58 <strncmp+0x8>
 8089f70:	461c      	mov	r4, r3
 8089f72:	1b18      	subs	r0, r3, r4
 8089f74:	bd30      	pop	{r4, r5, pc}
 8089f76:	4610      	mov	r0, r2
 8089f78:	bd30      	pop	{r4, r5, pc}
	...

08089f7c <_strtol_r>:
 8089f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089f80:	460f      	mov	r7, r1
 8089f82:	4680      	mov	r8, r0
 8089f84:	483f      	ldr	r0, [pc, #252]	; (808a084 <_strtol_r+0x108>)
 8089f86:	f8d0 9000 	ldr.w	r9, [r0]
 8089f8a:	463d      	mov	r5, r7
 8089f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8089f90:	eb09 0004 	add.w	r0, r9, r4
 8089f94:	7840      	ldrb	r0, [r0, #1]
 8089f96:	f000 0008 	and.w	r0, r0, #8
 8089f9a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8089f9e:	b108      	cbz	r0, 8089fa4 <_strtol_r+0x28>
 8089fa0:	462f      	mov	r7, r5
 8089fa2:	e7f2      	b.n	8089f8a <_strtol_r+0xe>
 8089fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8089fa6:	d103      	bne.n	8089fb0 <_strtol_r+0x34>
 8089fa8:	1cbd      	adds	r5, r7, #2
 8089faa:	787c      	ldrb	r4, [r7, #1]
 8089fac:	2601      	movs	r6, #1
 8089fae:	e003      	b.n	8089fb8 <_strtol_r+0x3c>
 8089fb0:	2c2b      	cmp	r4, #43	; 0x2b
 8089fb2:	bf04      	itt	eq
 8089fb4:	787c      	ldrbeq	r4, [r7, #1]
 8089fb6:	1cbd      	addeq	r5, r7, #2
 8089fb8:	b113      	cbz	r3, 8089fc0 <_strtol_r+0x44>
 8089fba:	2b10      	cmp	r3, #16
 8089fbc:	d10a      	bne.n	8089fd4 <_strtol_r+0x58>
 8089fbe:	e05b      	b.n	808a078 <_strtol_r+0xfc>
 8089fc0:	2c30      	cmp	r4, #48	; 0x30
 8089fc2:	d157      	bne.n	808a074 <_strtol_r+0xf8>
 8089fc4:	7828      	ldrb	r0, [r5, #0]
 8089fc6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8089fca:	2858      	cmp	r0, #88	; 0x58
 8089fcc:	d14d      	bne.n	808a06a <_strtol_r+0xee>
 8089fce:	786c      	ldrb	r4, [r5, #1]
 8089fd0:	2310      	movs	r3, #16
 8089fd2:	3502      	adds	r5, #2
 8089fd4:	2e00      	cmp	r6, #0
 8089fd6:	bf14      	ite	ne
 8089fd8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8089fdc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8089fe0:	fbbc faf3 	udiv	sl, ip, r3
 8089fe4:	2700      	movs	r7, #0
 8089fe6:	4638      	mov	r0, r7
 8089fe8:	fb03 cc1a 	mls	ip, r3, sl, ip
 8089fec:	eb09 0e04 	add.w	lr, r9, r4
 8089ff0:	f89e e001 	ldrb.w	lr, [lr, #1]
 8089ff4:	f01e 0f04 	tst.w	lr, #4
 8089ff8:	d001      	beq.n	8089ffe <_strtol_r+0x82>
 8089ffa:	3c30      	subs	r4, #48	; 0x30
 8089ffc:	e00b      	b.n	808a016 <_strtol_r+0x9a>
 8089ffe:	f01e 0e03 	ands.w	lr, lr, #3
 808a002:	d01b      	beq.n	808a03c <_strtol_r+0xc0>
 808a004:	f1be 0f01 	cmp.w	lr, #1
 808a008:	bf0c      	ite	eq
 808a00a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808a00e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808a012:	ebce 0404 	rsb	r4, lr, r4
 808a016:	42a3      	cmp	r3, r4
 808a018:	dd10      	ble.n	808a03c <_strtol_r+0xc0>
 808a01a:	f1b7 3fff 	cmp.w	r7, #4294967295
 808a01e:	d00a      	beq.n	808a036 <_strtol_r+0xba>
 808a020:	4550      	cmp	r0, sl
 808a022:	d806      	bhi.n	808a032 <_strtol_r+0xb6>
 808a024:	d101      	bne.n	808a02a <_strtol_r+0xae>
 808a026:	4564      	cmp	r4, ip
 808a028:	dc03      	bgt.n	808a032 <_strtol_r+0xb6>
 808a02a:	fb03 4000 	mla	r0, r3, r0, r4
 808a02e:	2701      	movs	r7, #1
 808a030:	e001      	b.n	808a036 <_strtol_r+0xba>
 808a032:	f04f 37ff 	mov.w	r7, #4294967295
 808a036:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a03a:	e7d7      	b.n	8089fec <_strtol_r+0x70>
 808a03c:	1c7b      	adds	r3, r7, #1
 808a03e:	d10c      	bne.n	808a05a <_strtol_r+0xde>
 808a040:	2e00      	cmp	r6, #0
 808a042:	f04f 0322 	mov.w	r3, #34	; 0x22
 808a046:	bf14      	ite	ne
 808a048:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808a04c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a050:	f8c8 3000 	str.w	r3, [r8]
 808a054:	b92a      	cbnz	r2, 808a062 <_strtol_r+0xe6>
 808a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a05a:	b106      	cbz	r6, 808a05e <_strtol_r+0xe2>
 808a05c:	4240      	negs	r0, r0
 808a05e:	b172      	cbz	r2, 808a07e <_strtol_r+0x102>
 808a060:	b107      	cbz	r7, 808a064 <_strtol_r+0xe8>
 808a062:	1e69      	subs	r1, r5, #1
 808a064:	6011      	str	r1, [r2, #0]
 808a066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a06a:	2430      	movs	r4, #48	; 0x30
 808a06c:	2b00      	cmp	r3, #0
 808a06e:	d1b1      	bne.n	8089fd4 <_strtol_r+0x58>
 808a070:	2308      	movs	r3, #8
 808a072:	e7af      	b.n	8089fd4 <_strtol_r+0x58>
 808a074:	230a      	movs	r3, #10
 808a076:	e7ad      	b.n	8089fd4 <_strtol_r+0x58>
 808a078:	2c30      	cmp	r4, #48	; 0x30
 808a07a:	d0a3      	beq.n	8089fc4 <_strtol_r+0x48>
 808a07c:	e7aa      	b.n	8089fd4 <_strtol_r+0x58>
 808a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a082:	bf00      	nop
 808a084:	2000082c 	.word	0x2000082c

0808a088 <strtol>:
 808a088:	4613      	mov	r3, r2
 808a08a:	460a      	mov	r2, r1
 808a08c:	4601      	mov	r1, r0
 808a08e:	4802      	ldr	r0, [pc, #8]	; (808a098 <strtol+0x10>)
 808a090:	6800      	ldr	r0, [r0, #0]
 808a092:	f7ff bf73 	b.w	8089f7c <_strtol_r>
 808a096:	bf00      	nop
 808a098:	20000890 	.word	0x20000890

0808a09c <_strtoul_r>:
 808a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a0a0:	460e      	mov	r6, r1
 808a0a2:	4680      	mov	r8, r0
 808a0a4:	483b      	ldr	r0, [pc, #236]	; (808a194 <_strtoul_r+0xf8>)
 808a0a6:	f8d0 9000 	ldr.w	r9, [r0]
 808a0aa:	4635      	mov	r5, r6
 808a0ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a0b0:	eb09 0004 	add.w	r0, r9, r4
 808a0b4:	7840      	ldrb	r0, [r0, #1]
 808a0b6:	f000 0008 	and.w	r0, r0, #8
 808a0ba:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808a0be:	b108      	cbz	r0, 808a0c4 <_strtoul_r+0x28>
 808a0c0:	462e      	mov	r6, r5
 808a0c2:	e7f2      	b.n	808a0aa <_strtoul_r+0xe>
 808a0c4:	2c2d      	cmp	r4, #45	; 0x2d
 808a0c6:	d103      	bne.n	808a0d0 <_strtoul_r+0x34>
 808a0c8:	1cb5      	adds	r5, r6, #2
 808a0ca:	7874      	ldrb	r4, [r6, #1]
 808a0cc:	2701      	movs	r7, #1
 808a0ce:	e003      	b.n	808a0d8 <_strtoul_r+0x3c>
 808a0d0:	2c2b      	cmp	r4, #43	; 0x2b
 808a0d2:	bf04      	itt	eq
 808a0d4:	7874      	ldrbeq	r4, [r6, #1]
 808a0d6:	1cb5      	addeq	r5, r6, #2
 808a0d8:	b113      	cbz	r3, 808a0e0 <_strtoul_r+0x44>
 808a0da:	2b10      	cmp	r3, #16
 808a0dc:	d10a      	bne.n	808a0f4 <_strtoul_r+0x58>
 808a0de:	e053      	b.n	808a188 <_strtoul_r+0xec>
 808a0e0:	2c30      	cmp	r4, #48	; 0x30
 808a0e2:	d14f      	bne.n	808a184 <_strtoul_r+0xe8>
 808a0e4:	7828      	ldrb	r0, [r5, #0]
 808a0e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808a0ea:	2858      	cmp	r0, #88	; 0x58
 808a0ec:	d145      	bne.n	808a17a <_strtoul_r+0xde>
 808a0ee:	786c      	ldrb	r4, [r5, #1]
 808a0f0:	2310      	movs	r3, #16
 808a0f2:	3502      	adds	r5, #2
 808a0f4:	f04f 3cff 	mov.w	ip, #4294967295
 808a0f8:	fbbc fcf3 	udiv	ip, ip, r3
 808a0fc:	fb03 fa0c 	mul.w	sl, r3, ip
 808a100:	2600      	movs	r6, #0
 808a102:	ea6f 0a0a 	mvn.w	sl, sl
 808a106:	4630      	mov	r0, r6
 808a108:	eb09 0e04 	add.w	lr, r9, r4
 808a10c:	f89e e001 	ldrb.w	lr, [lr, #1]
 808a110:	f01e 0f04 	tst.w	lr, #4
 808a114:	d001      	beq.n	808a11a <_strtoul_r+0x7e>
 808a116:	3c30      	subs	r4, #48	; 0x30
 808a118:	e00b      	b.n	808a132 <_strtoul_r+0x96>
 808a11a:	f01e 0e03 	ands.w	lr, lr, #3
 808a11e:	d01a      	beq.n	808a156 <_strtoul_r+0xba>
 808a120:	f1be 0f01 	cmp.w	lr, #1
 808a124:	bf0c      	ite	eq
 808a126:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808a12a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808a12e:	ebce 0404 	rsb	r4, lr, r4
 808a132:	42a3      	cmp	r3, r4
 808a134:	dd0f      	ble.n	808a156 <_strtoul_r+0xba>
 808a136:	2e00      	cmp	r6, #0
 808a138:	db08      	blt.n	808a14c <_strtoul_r+0xb0>
 808a13a:	4560      	cmp	r0, ip
 808a13c:	d806      	bhi.n	808a14c <_strtoul_r+0xb0>
 808a13e:	d101      	bne.n	808a144 <_strtoul_r+0xa8>
 808a140:	4554      	cmp	r4, sl
 808a142:	dc03      	bgt.n	808a14c <_strtoul_r+0xb0>
 808a144:	fb03 4000 	mla	r0, r3, r0, r4
 808a148:	2601      	movs	r6, #1
 808a14a:	e001      	b.n	808a150 <_strtoul_r+0xb4>
 808a14c:	f04f 36ff 	mov.w	r6, #4294967295
 808a150:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a154:	e7d8      	b.n	808a108 <_strtoul_r+0x6c>
 808a156:	2e00      	cmp	r6, #0
 808a158:	da07      	bge.n	808a16a <_strtoul_r+0xce>
 808a15a:	2322      	movs	r3, #34	; 0x22
 808a15c:	f8c8 3000 	str.w	r3, [r8]
 808a160:	f04f 30ff 	mov.w	r0, #4294967295
 808a164:	b92a      	cbnz	r2, 808a172 <_strtoul_r+0xd6>
 808a166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a16a:	b107      	cbz	r7, 808a16e <_strtoul_r+0xd2>
 808a16c:	4240      	negs	r0, r0
 808a16e:	b172      	cbz	r2, 808a18e <_strtoul_r+0xf2>
 808a170:	b106      	cbz	r6, 808a174 <_strtoul_r+0xd8>
 808a172:	1e69      	subs	r1, r5, #1
 808a174:	6011      	str	r1, [r2, #0]
 808a176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a17a:	2430      	movs	r4, #48	; 0x30
 808a17c:	2b00      	cmp	r3, #0
 808a17e:	d1b9      	bne.n	808a0f4 <_strtoul_r+0x58>
 808a180:	2308      	movs	r3, #8
 808a182:	e7b7      	b.n	808a0f4 <_strtoul_r+0x58>
 808a184:	230a      	movs	r3, #10
 808a186:	e7b5      	b.n	808a0f4 <_strtoul_r+0x58>
 808a188:	2c30      	cmp	r4, #48	; 0x30
 808a18a:	d0ab      	beq.n	808a0e4 <_strtoul_r+0x48>
 808a18c:	e7b2      	b.n	808a0f4 <_strtoul_r+0x58>
 808a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a192:	bf00      	nop
 808a194:	2000082c 	.word	0x2000082c

0808a198 <strtoul>:
 808a198:	4613      	mov	r3, r2
 808a19a:	460a      	mov	r2, r1
 808a19c:	4601      	mov	r1, r0
 808a19e:	4802      	ldr	r0, [pc, #8]	; (808a1a8 <strtoul+0x10>)
 808a1a0:	6800      	ldr	r0, [r0, #0]
 808a1a2:	f7ff bf7b 	b.w	808a09c <_strtoul_r>
 808a1a6:	bf00      	nop
 808a1a8:	20000890 	.word	0x20000890

0808a1ac <__get_current_time_locale>:
 808a1ac:	4b04      	ldr	r3, [pc, #16]	; (808a1c0 <__get_current_time_locale+0x14>)
 808a1ae:	4a05      	ldr	r2, [pc, #20]	; (808a1c4 <__get_current_time_locale+0x18>)
 808a1b0:	6818      	ldr	r0, [r3, #0]
 808a1b2:	4b05      	ldr	r3, [pc, #20]	; (808a1c8 <__get_current_time_locale+0x1c>)
 808a1b4:	2800      	cmp	r0, #0
 808a1b6:	bf14      	ite	ne
 808a1b8:	4610      	movne	r0, r2
 808a1ba:	4618      	moveq	r0, r3
 808a1bc:	4770      	bx	lr
 808a1be:	bf00      	nop
 808a1c0:	2000133c 	.word	0x2000133c
 808a1c4:	20001340 	.word	0x20001340
 808a1c8:	0808c1b4 	.word	0x0808c1b4

0808a1cc <__tzcalc_limits>:
 808a1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a1d0:	4604      	mov	r4, r0
 808a1d2:	f000 fa73 	bl	808a6bc <__gettzinfo>
 808a1d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808a1da:	429c      	cmp	r4, r3
 808a1dc:	f340 8096 	ble.w	808a30c <__tzcalc_limits+0x140>
 808a1e0:	f240 156d 	movw	r5, #365	; 0x16d
 808a1e4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808a1e8:	18e3      	adds	r3, r4, r3
 808a1ea:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808a1ee:	109b      	asrs	r3, r3, #2
 808a1f0:	fb05 3502 	mla	r5, r5, r2, r3
 808a1f4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808a1f8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808a1fc:	fb92 f3f3 	sdiv	r3, r2, r3
 808a200:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808a204:	442b      	add	r3, r5
 808a206:	18a5      	adds	r5, r4, r2
 808a208:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a20c:	fb94 f7f2 	sdiv	r7, r4, r2
 808a210:	fb95 f5f2 	sdiv	r5, r5, r2
 808a214:	fb02 4717 	mls	r7, r2, r7, r4
 808a218:	441d      	add	r5, r3
 808a21a:	2364      	movs	r3, #100	; 0x64
 808a21c:	fb94 f6f3 	sdiv	r6, r4, r3
 808a220:	fab7 fe87 	clz	lr, r7
 808a224:	4601      	mov	r1, r0
 808a226:	fb03 4616 	mls	r6, r3, r6, r4
 808a22a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808a22e:	9301      	str	r3, [sp, #4]
 808a230:	f004 0303 	and.w	r3, r4, #3
 808a234:	6044      	str	r4, [r0, #4]
 808a236:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808a23a:	9300      	str	r3, [sp, #0]
 808a23c:	f04f 0c07 	mov.w	ip, #7
 808a240:	7a0b      	ldrb	r3, [r1, #8]
 808a242:	2b4a      	cmp	r3, #74	; 0x4a
 808a244:	d10e      	bne.n	808a264 <__tzcalc_limits+0x98>
 808a246:	694b      	ldr	r3, [r1, #20]
 808a248:	9a00      	ldr	r2, [sp, #0]
 808a24a:	18ec      	adds	r4, r5, r3
 808a24c:	b902      	cbnz	r2, 808a250 <__tzcalc_limits+0x84>
 808a24e:	b906      	cbnz	r6, 808a252 <__tzcalc_limits+0x86>
 808a250:	b927      	cbnz	r7, 808a25c <__tzcalc_limits+0x90>
 808a252:	2b3b      	cmp	r3, #59	; 0x3b
 808a254:	bfd4      	ite	le
 808a256:	2300      	movle	r3, #0
 808a258:	2301      	movgt	r3, #1
 808a25a:	e000      	b.n	808a25e <__tzcalc_limits+0x92>
 808a25c:	2300      	movs	r3, #0
 808a25e:	4423      	add	r3, r4
 808a260:	3b01      	subs	r3, #1
 808a262:	e03f      	b.n	808a2e4 <__tzcalc_limits+0x118>
 808a264:	2b44      	cmp	r3, #68	; 0x44
 808a266:	d102      	bne.n	808a26e <__tzcalc_limits+0xa2>
 808a268:	694b      	ldr	r3, [r1, #20]
 808a26a:	442b      	add	r3, r5
 808a26c:	e03a      	b.n	808a2e4 <__tzcalc_limits+0x118>
 808a26e:	9b00      	ldr	r3, [sp, #0]
 808a270:	b92b      	cbnz	r3, 808a27e <__tzcalc_limits+0xb2>
 808a272:	2e00      	cmp	r6, #0
 808a274:	bf0c      	ite	eq
 808a276:	46f0      	moveq	r8, lr
 808a278:	f04f 0801 	movne.w	r8, #1
 808a27c:	e000      	b.n	808a280 <__tzcalc_limits+0xb4>
 808a27e:	46f0      	mov	r8, lr
 808a280:	46a9      	mov	r9, r5
 808a282:	4b24      	ldr	r3, [pc, #144]	; (808a314 <__tzcalc_limits+0x148>)
 808a284:	2230      	movs	r2, #48	; 0x30
 808a286:	fb02 3808 	mla	r8, r2, r8, r3
 808a28a:	68cc      	ldr	r4, [r1, #12]
 808a28c:	f1a8 0a04 	sub.w	sl, r8, #4
 808a290:	2301      	movs	r3, #1
 808a292:	42a3      	cmp	r3, r4
 808a294:	da04      	bge.n	808a2a0 <__tzcalc_limits+0xd4>
 808a296:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808a29a:	3301      	adds	r3, #1
 808a29c:	44d9      	add	r9, fp
 808a29e:	e7f8      	b.n	808a292 <__tzcalc_limits+0xc6>
 808a2a0:	f109 0304 	add.w	r3, r9, #4
 808a2a4:	fb93 fbfc 	sdiv	fp, r3, ip
 808a2a8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808a2ac:	ebca 0a03 	rsb	sl, sl, r3
 808a2b0:	694b      	ldr	r3, [r1, #20]
 808a2b2:	2c01      	cmp	r4, #1
 808a2b4:	bfb8      	it	lt
 808a2b6:	2401      	movlt	r4, #1
 808a2b8:	ebb3 0a0a 	subs.w	sl, r3, sl
 808a2bc:	690b      	ldr	r3, [r1, #16]
 808a2be:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808a2c2:	f103 33ff 	add.w	r3, r3, #4294967295
 808a2c6:	f104 34ff 	add.w	r4, r4, #4294967295
 808a2ca:	bf48      	it	mi
 808a2cc:	f10a 0a07 	addmi.w	sl, sl, #7
 808a2d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808a2d4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808a2d8:	4453      	add	r3, sl
 808a2da:	42a3      	cmp	r3, r4
 808a2dc:	db01      	blt.n	808a2e2 <__tzcalc_limits+0x116>
 808a2de:	3b07      	subs	r3, #7
 808a2e0:	e7fb      	b.n	808a2da <__tzcalc_limits+0x10e>
 808a2e2:	444b      	add	r3, r9
 808a2e4:	698c      	ldr	r4, [r1, #24]
 808a2e6:	4a0c      	ldr	r2, [pc, #48]	; (808a318 <__tzcalc_limits+0x14c>)
 808a2e8:	fb02 4303 	mla	r3, r2, r3, r4
 808a2ec:	6a0c      	ldr	r4, [r1, #32]
 808a2ee:	4423      	add	r3, r4
 808a2f0:	f841 3f1c 	str.w	r3, [r1, #28]!
 808a2f4:	9b01      	ldr	r3, [sp, #4]
 808a2f6:	4299      	cmp	r1, r3
 808a2f8:	d1a2      	bne.n	808a240 <__tzcalc_limits+0x74>
 808a2fa:	69c3      	ldr	r3, [r0, #28]
 808a2fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808a2fe:	4293      	cmp	r3, r2
 808a300:	bfac      	ite	ge
 808a302:	2300      	movge	r3, #0
 808a304:	2301      	movlt	r3, #1
 808a306:	6003      	str	r3, [r0, #0]
 808a308:	2001      	movs	r0, #1
 808a30a:	e000      	b.n	808a30e <__tzcalc_limits+0x142>
 808a30c:	2000      	movs	r0, #0
 808a30e:	b003      	add	sp, #12
 808a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a314:	0808bfd0 	.word	0x0808bfd0
 808a318:	00015180 	.word	0x00015180

0808a31c <__tz_lock>:
 808a31c:	4770      	bx	lr

0808a31e <__tz_unlock>:
 808a31e:	4770      	bx	lr

0808a320 <_tzset_unlocked>:
 808a320:	4b01      	ldr	r3, [pc, #4]	; (808a328 <_tzset_unlocked+0x8>)
 808a322:	6818      	ldr	r0, [r3, #0]
 808a324:	f000 b802 	b.w	808a32c <_tzset_unlocked_r>
 808a328:	20000890 	.word	0x20000890

0808a32c <_tzset_unlocked_r>:
 808a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a330:	b08d      	sub	sp, #52	; 0x34
 808a332:	4607      	mov	r7, r0
 808a334:	f000 f9c2 	bl	808a6bc <__gettzinfo>
 808a338:	49b0      	ldr	r1, [pc, #704]	; (808a5fc <_tzset_unlocked_r+0x2d0>)
 808a33a:	4604      	mov	r4, r0
 808a33c:	4638      	mov	r0, r7
 808a33e:	f000 f9b5 	bl	808a6ac <_getenv_r>
 808a342:	4eaf      	ldr	r6, [pc, #700]	; (808a600 <_tzset_unlocked_r+0x2d4>)
 808a344:	4605      	mov	r5, r0
 808a346:	b960      	cbnz	r0, 808a362 <_tzset_unlocked_r+0x36>
 808a348:	4bae      	ldr	r3, [pc, #696]	; (808a604 <_tzset_unlocked_r+0x2d8>)
 808a34a:	4aaf      	ldr	r2, [pc, #700]	; (808a608 <_tzset_unlocked_r+0x2dc>)
 808a34c:	6018      	str	r0, [r3, #0]
 808a34e:	4baf      	ldr	r3, [pc, #700]	; (808a60c <_tzset_unlocked_r+0x2e0>)
 808a350:	6018      	str	r0, [r3, #0]
 808a352:	4baf      	ldr	r3, [pc, #700]	; (808a610 <_tzset_unlocked_r+0x2e4>)
 808a354:	6830      	ldr	r0, [r6, #0]
 808a356:	601a      	str	r2, [r3, #0]
 808a358:	605a      	str	r2, [r3, #4]
 808a35a:	f7fa fa51 	bl	8084800 <free>
 808a35e:	6035      	str	r5, [r6, #0]
 808a360:	e148      	b.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a362:	6831      	ldr	r1, [r6, #0]
 808a364:	b979      	cbnz	r1, 808a386 <_tzset_unlocked_r+0x5a>
 808a366:	6830      	ldr	r0, [r6, #0]
 808a368:	f7fa fa4a 	bl	8084800 <free>
 808a36c:	4628      	mov	r0, r5
 808a36e:	f7ff fde7 	bl	8089f40 <strlen>
 808a372:	1c41      	adds	r1, r0, #1
 808a374:	4638      	mov	r0, r7
 808a376:	f7fa fa8b 	bl	8084890 <_malloc_r>
 808a37a:	6030      	str	r0, [r6, #0]
 808a37c:	b148      	cbz	r0, 808a392 <_tzset_unlocked_r+0x66>
 808a37e:	4629      	mov	r1, r5
 808a380:	f7ff f8a6 	bl	80894d0 <strcpy>
 808a384:	e005      	b.n	808a392 <_tzset_unlocked_r+0x66>
 808a386:	f7ff f899 	bl	80894bc <strcmp>
 808a38a:	2800      	cmp	r0, #0
 808a38c:	f000 8132 	beq.w	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a390:	e7e9      	b.n	808a366 <_tzset_unlocked_r+0x3a>
 808a392:	782b      	ldrb	r3, [r5, #0]
 808a394:	ae0a      	add	r6, sp, #40	; 0x28
 808a396:	2b3a      	cmp	r3, #58	; 0x3a
 808a398:	bf08      	it	eq
 808a39a:	3501      	addeq	r5, #1
 808a39c:	4633      	mov	r3, r6
 808a39e:	4a9d      	ldr	r2, [pc, #628]	; (808a614 <_tzset_unlocked_r+0x2e8>)
 808a3a0:	499d      	ldr	r1, [pc, #628]	; (808a618 <_tzset_unlocked_r+0x2ec>)
 808a3a2:	4628      	mov	r0, r5
 808a3a4:	f7fa fa4c 	bl	8084840 <siscanf>
 808a3a8:	2800      	cmp	r0, #0
 808a3aa:	f340 8123 	ble.w	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a3b0:	18ef      	adds	r7, r5, r3
 808a3b2:	5ceb      	ldrb	r3, [r5, r3]
 808a3b4:	2b2d      	cmp	r3, #45	; 0x2d
 808a3b6:	d103      	bne.n	808a3c0 <_tzset_unlocked_r+0x94>
 808a3b8:	3701      	adds	r7, #1
 808a3ba:	f04f 35ff 	mov.w	r5, #4294967295
 808a3be:	e003      	b.n	808a3c8 <_tzset_unlocked_r+0x9c>
 808a3c0:	2b2b      	cmp	r3, #43	; 0x2b
 808a3c2:	bf08      	it	eq
 808a3c4:	3701      	addeq	r7, #1
 808a3c6:	2501      	movs	r5, #1
 808a3c8:	f10d 0a20 	add.w	sl, sp, #32
 808a3cc:	f10d 0b1e 	add.w	fp, sp, #30
 808a3d0:	f04f 0800 	mov.w	r8, #0
 808a3d4:	9603      	str	r6, [sp, #12]
 808a3d6:	f8cd a008 	str.w	sl, [sp, #8]
 808a3da:	9601      	str	r6, [sp, #4]
 808a3dc:	f8cd b000 	str.w	fp, [sp]
 808a3e0:	4633      	mov	r3, r6
 808a3e2:	aa07      	add	r2, sp, #28
 808a3e4:	498d      	ldr	r1, [pc, #564]	; (808a61c <_tzset_unlocked_r+0x2f0>)
 808a3e6:	4638      	mov	r0, r7
 808a3e8:	f8ad 801e 	strh.w	r8, [sp, #30]
 808a3ec:	f8ad 8020 	strh.w	r8, [sp, #32]
 808a3f0:	f7fa fa26 	bl	8084840 <siscanf>
 808a3f4:	4540      	cmp	r0, r8
 808a3f6:	f340 80fd 	ble.w	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a3fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a3fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a402:	213c      	movs	r1, #60	; 0x3c
 808a404:	fb01 3302 	mla	r3, r1, r2, r3
 808a408:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a40c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a410:	fb01 3302 	mla	r3, r1, r2, r3
 808a414:	435d      	muls	r5, r3
 808a416:	4b7f      	ldr	r3, [pc, #508]	; (808a614 <_tzset_unlocked_r+0x2e8>)
 808a418:	6225      	str	r5, [r4, #32]
 808a41a:	4d7d      	ldr	r5, [pc, #500]	; (808a610 <_tzset_unlocked_r+0x2e4>)
 808a41c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808a628 <_tzset_unlocked_r+0x2fc>
 808a420:	602b      	str	r3, [r5, #0]
 808a422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a424:	464a      	mov	r2, r9
 808a426:	441f      	add	r7, r3
 808a428:	497b      	ldr	r1, [pc, #492]	; (808a618 <_tzset_unlocked_r+0x2ec>)
 808a42a:	4633      	mov	r3, r6
 808a42c:	4638      	mov	r0, r7
 808a42e:	f7fa fa07 	bl	8084840 <siscanf>
 808a432:	4540      	cmp	r0, r8
 808a434:	dc08      	bgt.n	808a448 <_tzset_unlocked_r+0x11c>
 808a436:	682b      	ldr	r3, [r5, #0]
 808a438:	6a22      	ldr	r2, [r4, #32]
 808a43a:	606b      	str	r3, [r5, #4]
 808a43c:	4b71      	ldr	r3, [pc, #452]	; (808a604 <_tzset_unlocked_r+0x2d8>)
 808a43e:	601a      	str	r2, [r3, #0]
 808a440:	4b72      	ldr	r3, [pc, #456]	; (808a60c <_tzset_unlocked_r+0x2e0>)
 808a442:	f8c3 8000 	str.w	r8, [r3]
 808a446:	e0d5      	b.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a44a:	f8c5 9004 	str.w	r9, [r5, #4]
 808a44e:	18fd      	adds	r5, r7, r3
 808a450:	5cfb      	ldrb	r3, [r7, r3]
 808a452:	2b2d      	cmp	r3, #45	; 0x2d
 808a454:	d103      	bne.n	808a45e <_tzset_unlocked_r+0x132>
 808a456:	3501      	adds	r5, #1
 808a458:	f04f 37ff 	mov.w	r7, #4294967295
 808a45c:	e003      	b.n	808a466 <_tzset_unlocked_r+0x13a>
 808a45e:	2b2b      	cmp	r3, #43	; 0x2b
 808a460:	bf08      	it	eq
 808a462:	3501      	addeq	r5, #1
 808a464:	2701      	movs	r7, #1
 808a466:	2300      	movs	r3, #0
 808a468:	f8ad 301c 	strh.w	r3, [sp, #28]
 808a46c:	f8ad 301e 	strh.w	r3, [sp, #30]
 808a470:	f8ad 3020 	strh.w	r3, [sp, #32]
 808a474:	930a      	str	r3, [sp, #40]	; 0x28
 808a476:	9603      	str	r6, [sp, #12]
 808a478:	f8cd a008 	str.w	sl, [sp, #8]
 808a47c:	9601      	str	r6, [sp, #4]
 808a47e:	f8cd b000 	str.w	fp, [sp]
 808a482:	4633      	mov	r3, r6
 808a484:	aa07      	add	r2, sp, #28
 808a486:	4965      	ldr	r1, [pc, #404]	; (808a61c <_tzset_unlocked_r+0x2f0>)
 808a488:	4628      	mov	r0, r5
 808a48a:	f7fa f9d9 	bl	8084840 <siscanf>
 808a48e:	2800      	cmp	r0, #0
 808a490:	dc04      	bgt.n	808a49c <_tzset_unlocked_r+0x170>
 808a492:	6a23      	ldr	r3, [r4, #32]
 808a494:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808a498:	63e3      	str	r3, [r4, #60]	; 0x3c
 808a49a:	e00e      	b.n	808a4ba <_tzset_unlocked_r+0x18e>
 808a49c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a4a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a4a4:	213c      	movs	r1, #60	; 0x3c
 808a4a6:	fb01 3302 	mla	r3, r1, r2, r3
 808a4aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a4ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a4b2:	fb01 3302 	mla	r3, r1, r2, r3
 808a4b6:	435f      	muls	r7, r3
 808a4b8:	63e7      	str	r7, [r4, #60]	; 0x3c
 808a4ba:	4627      	mov	r7, r4
 808a4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a4be:	f04f 0900 	mov.w	r9, #0
 808a4c2:	441d      	add	r5, r3
 808a4c4:	782b      	ldrb	r3, [r5, #0]
 808a4c6:	2b2c      	cmp	r3, #44	; 0x2c
 808a4c8:	bf08      	it	eq
 808a4ca:	3501      	addeq	r5, #1
 808a4cc:	f895 8000 	ldrb.w	r8, [r5]
 808a4d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808a4d4:	d126      	bne.n	808a524 <_tzset_unlocked_r+0x1f8>
 808a4d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808a4da:	9302      	str	r3, [sp, #8]
 808a4dc:	ab09      	add	r3, sp, #36	; 0x24
 808a4de:	9300      	str	r3, [sp, #0]
 808a4e0:	9603      	str	r6, [sp, #12]
 808a4e2:	9601      	str	r6, [sp, #4]
 808a4e4:	4633      	mov	r3, r6
 808a4e6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808a4ea:	494d      	ldr	r1, [pc, #308]	; (808a620 <_tzset_unlocked_r+0x2f4>)
 808a4ec:	4628      	mov	r0, r5
 808a4ee:	f7fa f9a7 	bl	8084840 <siscanf>
 808a4f2:	2803      	cmp	r0, #3
 808a4f4:	d17e      	bne.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a4f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808a4fa:	1e4b      	subs	r3, r1, #1
 808a4fc:	2b0b      	cmp	r3, #11
 808a4fe:	d879      	bhi.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a500:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808a504:	1e53      	subs	r3, r2, #1
 808a506:	2b04      	cmp	r3, #4
 808a508:	d874      	bhi.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a50a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808a50e:	2b06      	cmp	r3, #6
 808a510:	d870      	bhi.n	808a5f4 <_tzset_unlocked_r+0x2c8>
 808a512:	f887 8008 	strb.w	r8, [r7, #8]
 808a516:	60f9      	str	r1, [r7, #12]
 808a518:	613a      	str	r2, [r7, #16]
 808a51a:	617b      	str	r3, [r7, #20]
 808a51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a51e:	eb05 0803 	add.w	r8, r5, r3
 808a522:	e02a      	b.n	808a57a <_tzset_unlocked_r+0x24e>
 808a524:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808a528:	bf06      	itte	eq
 808a52a:	4643      	moveq	r3, r8
 808a52c:	3501      	addeq	r5, #1
 808a52e:	2344      	movne	r3, #68	; 0x44
 808a530:	220a      	movs	r2, #10
 808a532:	a90b      	add	r1, sp, #44	; 0x2c
 808a534:	4628      	mov	r0, r5
 808a536:	9305      	str	r3, [sp, #20]
 808a538:	f7ff fe2e 	bl	808a198 <strtoul>
 808a53c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808a540:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808a544:	4545      	cmp	r5, r8
 808a546:	9b05      	ldr	r3, [sp, #20]
 808a548:	d114      	bne.n	808a574 <_tzset_unlocked_r+0x248>
 808a54a:	234d      	movs	r3, #77	; 0x4d
 808a54c:	f1b9 0f00 	cmp.w	r9, #0
 808a550:	d107      	bne.n	808a562 <_tzset_unlocked_r+0x236>
 808a552:	7223      	strb	r3, [r4, #8]
 808a554:	2303      	movs	r3, #3
 808a556:	60e3      	str	r3, [r4, #12]
 808a558:	2302      	movs	r3, #2
 808a55a:	6123      	str	r3, [r4, #16]
 808a55c:	f8c4 9014 	str.w	r9, [r4, #20]
 808a560:	e00b      	b.n	808a57a <_tzset_unlocked_r+0x24e>
 808a562:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808a566:	230b      	movs	r3, #11
 808a568:	62a3      	str	r3, [r4, #40]	; 0x28
 808a56a:	2301      	movs	r3, #1
 808a56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 808a56e:	2300      	movs	r3, #0
 808a570:	6323      	str	r3, [r4, #48]	; 0x30
 808a572:	e002      	b.n	808a57a <_tzset_unlocked_r+0x24e>
 808a574:	b280      	uxth	r0, r0
 808a576:	723b      	strb	r3, [r7, #8]
 808a578:	6178      	str	r0, [r7, #20]
 808a57a:	2302      	movs	r3, #2
 808a57c:	f8ad 301c 	strh.w	r3, [sp, #28]
 808a580:	2300      	movs	r3, #0
 808a582:	f8ad 301e 	strh.w	r3, [sp, #30]
 808a586:	f8ad 3020 	strh.w	r3, [sp, #32]
 808a58a:	930a      	str	r3, [sp, #40]	; 0x28
 808a58c:	f898 3000 	ldrb.w	r3, [r8]
 808a590:	2b2f      	cmp	r3, #47	; 0x2f
 808a592:	d10b      	bne.n	808a5ac <_tzset_unlocked_r+0x280>
 808a594:	9603      	str	r6, [sp, #12]
 808a596:	f8cd a008 	str.w	sl, [sp, #8]
 808a59a:	9601      	str	r6, [sp, #4]
 808a59c:	f8cd b000 	str.w	fp, [sp]
 808a5a0:	4633      	mov	r3, r6
 808a5a2:	aa07      	add	r2, sp, #28
 808a5a4:	491f      	ldr	r1, [pc, #124]	; (808a624 <_tzset_unlocked_r+0x2f8>)
 808a5a6:	4640      	mov	r0, r8
 808a5a8:	f7fa f94a 	bl	8084840 <siscanf>
 808a5ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808a5b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808a5b4:	213c      	movs	r1, #60	; 0x3c
 808a5b6:	fb01 3302 	mla	r3, r1, r2, r3
 808a5ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808a5be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808a5c2:	fb01 3302 	mla	r3, r1, r2, r3
 808a5c6:	61bb      	str	r3, [r7, #24]
 808a5c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808a5ca:	f109 0901 	add.w	r9, r9, #1
 808a5ce:	f1b9 0f02 	cmp.w	r9, #2
 808a5d2:	4445      	add	r5, r8
 808a5d4:	f107 071c 	add.w	r7, r7, #28
 808a5d8:	f47f af74 	bne.w	808a4c4 <_tzset_unlocked_r+0x198>
 808a5dc:	6860      	ldr	r0, [r4, #4]
 808a5de:	f7ff fdf5 	bl	808a1cc <__tzcalc_limits>
 808a5e2:	6a22      	ldr	r2, [r4, #32]
 808a5e4:	4b07      	ldr	r3, [pc, #28]	; (808a604 <_tzset_unlocked_r+0x2d8>)
 808a5e6:	601a      	str	r2, [r3, #0]
 808a5e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808a5ea:	1a9b      	subs	r3, r3, r2
 808a5ec:	4a07      	ldr	r2, [pc, #28]	; (808a60c <_tzset_unlocked_r+0x2e0>)
 808a5ee:	bf18      	it	ne
 808a5f0:	2301      	movne	r3, #1
 808a5f2:	6013      	str	r3, [r2, #0]
 808a5f4:	b00d      	add	sp, #52	; 0x34
 808a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a5fa:	bf00      	nop
 808a5fc:	0808c2b0 	.word	0x0808c2b0
 808a600:	20001454 	.word	0x20001454
 808a604:	2000145c 	.word	0x2000145c
 808a608:	0808c2b3 	.word	0x0808c2b3
 808a60c:	20001458 	.word	0x20001458
 808a610:	20000894 	.word	0x20000894
 808a614:	20001447 	.word	0x20001447
 808a618:	0808c2b7 	.word	0x0808c2b7
 808a61c:	0808c2da 	.word	0x0808c2da
 808a620:	0808c2c6 	.word	0x0808c2c6
 808a624:	0808c2d9 	.word	0x0808c2d9
 808a628:	2000143c 	.word	0x2000143c

0808a62c <abs>:
 808a62c:	2800      	cmp	r0, #0
 808a62e:	bfb8      	it	lt
 808a630:	4240      	neglt	r0, r0
 808a632:	4770      	bx	lr

0808a634 <_findenv_r>:
 808a634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a638:	4607      	mov	r7, r0
 808a63a:	468b      	mov	fp, r1
 808a63c:	4690      	mov	r8, r2
 808a63e:	f000 f8db 	bl	808a7f8 <__env_lock>
 808a642:	4b19      	ldr	r3, [pc, #100]	; (808a6a8 <_findenv_r+0x74>)
 808a644:	681d      	ldr	r5, [r3, #0]
 808a646:	469a      	mov	sl, r3
 808a648:	b13d      	cbz	r5, 808a65a <_findenv_r+0x26>
 808a64a:	465c      	mov	r4, fp
 808a64c:	4623      	mov	r3, r4
 808a64e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a652:	b142      	cbz	r2, 808a666 <_findenv_r+0x32>
 808a654:	2a3d      	cmp	r2, #61	; 0x3d
 808a656:	461c      	mov	r4, r3
 808a658:	d1f8      	bne.n	808a64c <_findenv_r+0x18>
 808a65a:	4638      	mov	r0, r7
 808a65c:	f000 f8cd 	bl	808a7fa <__env_unlock>
 808a660:	2000      	movs	r0, #0
 808a662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a666:	ebcb 0404 	rsb	r4, fp, r4
 808a66a:	46a9      	mov	r9, r5
 808a66c:	f859 0b04 	ldr.w	r0, [r9], #4
 808a670:	2800      	cmp	r0, #0
 808a672:	d0f2      	beq.n	808a65a <_findenv_r+0x26>
 808a674:	4622      	mov	r2, r4
 808a676:	4659      	mov	r1, fp
 808a678:	f7ff fc6a 	bl	8089f50 <strncmp>
 808a67c:	b988      	cbnz	r0, 808a6a2 <_findenv_r+0x6e>
 808a67e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808a682:	191e      	adds	r6, r3, r4
 808a684:	5d1b      	ldrb	r3, [r3, r4]
 808a686:	2b3d      	cmp	r3, #61	; 0x3d
 808a688:	d10b      	bne.n	808a6a2 <_findenv_r+0x6e>
 808a68a:	f8da 3000 	ldr.w	r3, [sl]
 808a68e:	4638      	mov	r0, r7
 808a690:	1aed      	subs	r5, r5, r3
 808a692:	10ad      	asrs	r5, r5, #2
 808a694:	f8c8 5000 	str.w	r5, [r8]
 808a698:	f000 f8af 	bl	808a7fa <__env_unlock>
 808a69c:	1c70      	adds	r0, r6, #1
 808a69e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a6a2:	464d      	mov	r5, r9
 808a6a4:	e7e1      	b.n	808a66a <_findenv_r+0x36>
 808a6a6:	bf00      	nop
 808a6a8:	200008dc 	.word	0x200008dc

0808a6ac <_getenv_r>:
 808a6ac:	b507      	push	{r0, r1, r2, lr}
 808a6ae:	aa01      	add	r2, sp, #4
 808a6b0:	f7ff ffc0 	bl	808a634 <_findenv_r>
 808a6b4:	b003      	add	sp, #12
 808a6b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808a6bc <__gettzinfo>:
 808a6bc:	4800      	ldr	r0, [pc, #0]	; (808a6c0 <__gettzinfo+0x4>)
 808a6be:	4770      	bx	lr
 808a6c0:	2000089c 	.word	0x2000089c

0808a6c4 <gmtime_r>:
 808a6c4:	6802      	ldr	r2, [r0, #0]
 808a6c6:	4b46      	ldr	r3, [pc, #280]	; (808a7e0 <gmtime_r+0x11c>)
 808a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a6ca:	fb92 f4f3 	sdiv	r4, r2, r3
 808a6ce:	fb03 2214 	mls	r2, r3, r4, r2
 808a6d2:	2a00      	cmp	r2, #0
 808a6d4:	bfbc      	itt	lt
 808a6d6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808a6da:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808a6de:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808a6e2:	fb92 f3f0 	sdiv	r3, r2, r0
 808a6e6:	fb00 2213 	mls	r2, r0, r3, r2
 808a6ea:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808a6ee:	608b      	str	r3, [r1, #8]
 808a6f0:	fb92 f3f0 	sdiv	r3, r2, r0
 808a6f4:	fb00 2213 	mls	r2, r0, r3, r2
 808a6f8:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808a6fc:	bfac      	ite	ge
 808a6fe:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808a702:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808a706:	604b      	str	r3, [r1, #4]
 808a708:	600a      	str	r2, [r1, #0]
 808a70a:	2307      	movs	r3, #7
 808a70c:	1ce2      	adds	r2, r4, #3
 808a70e:	fb92 f3f3 	sdiv	r3, r2, r3
 808a712:	4d34      	ldr	r5, [pc, #208]	; (808a7e4 <gmtime_r+0x120>)
 808a714:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808a718:	fb94 f5f5 	sdiv	r5, r4, r5
 808a71c:	1ad3      	subs	r3, r2, r3
 808a71e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808a722:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808a726:	618b      	str	r3, [r1, #24]
 808a728:	4b2f      	ldr	r3, [pc, #188]	; (808a7e8 <gmtime_r+0x124>)
 808a72a:	4830      	ldr	r0, [pc, #192]	; (808a7ec <gmtime_r+0x128>)
 808a72c:	fb03 4405 	mla	r4, r3, r5, r4
 808a730:	fbb4 f2f2 	udiv	r2, r4, r2
 808a734:	fbb4 f3f7 	udiv	r3, r4, r7
 808a738:	fbb4 f0f0 	udiv	r0, r4, r0
 808a73c:	4422      	add	r2, r4
 808a73e:	1ad2      	subs	r2, r2, r3
 808a740:	f648 6694 	movw	r6, #36500	; 0x8e94
 808a744:	1a13      	subs	r3, r2, r0
 808a746:	f240 126d 	movw	r2, #365	; 0x16d
 808a74a:	fbb3 f6f6 	udiv	r6, r3, r6
 808a74e:	fbb3 f0f2 	udiv	r0, r3, r2
 808a752:	fbb3 f3f7 	udiv	r3, r3, r7
 808a756:	4434      	add	r4, r6
 808a758:	1ae3      	subs	r3, r4, r3
 808a75a:	fb02 3310 	mls	r3, r2, r0, r3
 808a75e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808a762:	2499      	movs	r4, #153	; 0x99
 808a764:	3202      	adds	r2, #2
 808a766:	fbb2 f2f4 	udiv	r2, r2, r4
 808a76a:	4354      	muls	r4, r2
 808a76c:	1ca6      	adds	r6, r4, #2
 808a76e:	2405      	movs	r4, #5
 808a770:	fbb6 f4f4 	udiv	r4, r6, r4
 808a774:	2a0a      	cmp	r2, #10
 808a776:	bf34      	ite	cc
 808a778:	2602      	movcc	r6, #2
 808a77a:	f06f 0609 	mvncs.w	r6, #9
 808a77e:	4416      	add	r6, r2
 808a780:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a784:	fb02 0505 	mla	r5, r2, r5, r0
 808a788:	1c5f      	adds	r7, r3, #1
 808a78a:	2e01      	cmp	r6, #1
 808a78c:	bf98      	it	ls
 808a78e:	3501      	addls	r5, #1
 808a790:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808a794:	eba7 0704 	sub.w	r7, r7, r4
 808a798:	d302      	bcc.n	808a7a0 <gmtime_r+0xdc>
 808a79a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808a79e:	e014      	b.n	808a7ca <gmtime_r+0x106>
 808a7a0:	0782      	lsls	r2, r0, #30
 808a7a2:	d105      	bne.n	808a7b0 <gmtime_r+0xec>
 808a7a4:	2464      	movs	r4, #100	; 0x64
 808a7a6:	fbb0 f2f4 	udiv	r2, r0, r4
 808a7aa:	fb04 0212 	mls	r2, r4, r2, r0
 808a7ae:	b94a      	cbnz	r2, 808a7c4 <gmtime_r+0x100>
 808a7b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808a7b4:	fbb0 f4f2 	udiv	r4, r0, r2
 808a7b8:	fb02 0014 	mls	r0, r2, r4, r0
 808a7bc:	fab0 f280 	clz	r2, r0
 808a7c0:	0952      	lsrs	r2, r2, #5
 808a7c2:	e000      	b.n	808a7c6 <gmtime_r+0x102>
 808a7c4:	2201      	movs	r2, #1
 808a7c6:	333b      	adds	r3, #59	; 0x3b
 808a7c8:	441a      	add	r2, r3
 808a7ca:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808a7ce:	2300      	movs	r3, #0
 808a7d0:	61ca      	str	r2, [r1, #28]
 808a7d2:	614d      	str	r5, [r1, #20]
 808a7d4:	610e      	str	r6, [r1, #16]
 808a7d6:	60cf      	str	r7, [r1, #12]
 808a7d8:	620b      	str	r3, [r1, #32]
 808a7da:	4608      	mov	r0, r1
 808a7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a7de:	bf00      	nop
 808a7e0:	00015180 	.word	0x00015180
 808a7e4:	00023ab1 	.word	0x00023ab1
 808a7e8:	fffdc54f 	.word	0xfffdc54f
 808a7ec:	00023ab0 	.word	0x00023ab0

0808a7f0 <labs>:
 808a7f0:	2800      	cmp	r0, #0
 808a7f2:	bfb8      	it	lt
 808a7f4:	4240      	neglt	r0, r0
 808a7f6:	4770      	bx	lr

0808a7f8 <__env_lock>:
 808a7f8:	4770      	bx	lr

0808a7fa <__env_unlock>:
 808a7fa:	4770      	bx	lr

0808a7fc <dynalib_user>:
 808a7fc:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 808a80c:	0000 0000                                   ....

0808a810 <_ZTV5Timer>:
	...
 808a818:	07f9 0808 0839 0808 0ec3 0808               ....9.......

0808a824 <_ZL10cloud_icon>:
 808a824:	0000 0000 0006 001f 003f 807f 807f 003f     ........?.....?.
 808a834:	0000 0000                                   ....

0808a838 <_ZL17gnss_wait_icon_10>:
 808a838:	0000 000c 0033 0021 8040 8040 0021 0033     ....3.!.@.@.!.3.
 808a848:	000c 0000 227b 6174 7367 3a22 227b 6469     ....{"tags":{"id
 808a858:	3a22 2522 756c 7d22 222c 6176 756c 7365     ":"%lu"},"values
 808a868:	3a22 227b 6570 6372 6e65 6174 6567 3a22     ":{"percentage":
 808a878:	2e25 6632 7d7d 4700 534e 2f53 6162 0074     %.2f}}.GNSS/bat.
 808a888:	6664 0075 6972 0064 227b 6174 7367 3a22     dfu.rid.{"tags":
 808a898:	7d7b 222c 6176 756c 7365 3a22 227b 6469     {},"values":{"id
 808a8a8:	3a22 6c25 2c75 6d22 6e69 3a22 6c25 2c75     ":%lu,"min":%lu,
 808a8b8:	7322 6365 3a22 6c25 2c75 6d22 2269 253a     "sec":%lu,"mi":%
 808a8c8:	312e 7d66 007d 4e47 5353 732f 7365 6973     .1f}}.GNSS/sessi
 808a8d8:	6e6f 4100 004d 4d50 2500 3a64 3025 6432     on.AM.PM.%d:%02d
 808a8e8:	7325 2500 302e 2566 0025 3025 6432 253a     %s.%.0f%%.%02d:%
 808a8f8:	3230 0064 2e25 6630 006d 2e25 6632 696d     02d.%.0fm.%.2fmi
 808a908:	2500 2064 0073 4e47 5353 6e2f 206f 6966     .%d s.GNSS/no fi
 808a918:	0078 227b 6573 7373 6f69 5f6e 6469 3a22     x.{"session_id":
 808a928:	2522 756c 2c22 6c22 7461 3a22 6625 222c     "%lu","lat":%f,"
 808a938:	6f6c 226e 253a 2c66 7322 6470 3a22 2e25     lon":%f,"spd":%.
 808a948:	6631 222c 6468 3a22 2e25 6630 222c 6c61     1f,"hd":%.0f,"al
 808a958:	2274 253a 302e 7d66 4700 534e 2f53 7273     t":%.0f}.GNSS/sr
 808a968:	0076 4625 2554 0054 227b 6469 3a22 6c25     v.%FT%T.{"id":%l
 808a978:	2c75 6c22 2261 253a 2c66 6c22 226f 253a     u,"la":%f,"lo":%
 808a988:	2c66 7322 2270 253a 312e 2c66 6822 2264     f,"sp":%.1f,"hd"
 808a998:	253a 302e 2c66 6522 226c 253a 302e 2c66     :%.0f,"el":%.0f,
 808a9a8:	7422 2273 223a 7325 7d22 4700 534e 2f53     "ts":"%s"}.GNSS/
 808a9b8:	6164 6174 4700 534e 2f53 626f 6f73 656c     data.GNSS/obsole
 808a9c8:	6574 7400 6172 6b63 6e69 2067 6e6f 7400     te.tracking on.t
 808a9d8:	6172 6b63 6e69 2067 666f 0066 4e47 5353     racking off.GNSS
 808a9e8:	732f 6174 7574 0073 4e47 5353 732f 656c     /status.GNSS/sle
 808a9f8:	7065 6f00 006b 6552 6c61 542d 6d69 2065     ep.ok.Real-Time 
 808aa08:	7254 6361 656b 0072 6553 5f74 7254 6361     Tracker.Set_Trac
 808aa18:	696b 676e 4700 7465 425f 7461 6574 7972     king.Get_Battery
 808aa28:	4700 7465 535f 6174 7574 0073 6547 5f74     .Get_Status.Get_
 808aa38:	6f4c 6163 6974 6e6f 5300 656c 7065 575f     Location.Sleep_W
 808aa48:	6b61 5565 5f70 6e4f 6f4d 6576 6700 736e     akeUp_OnMove.gns
 808aa58:	2073 6e69 7469 202e 7325 2e2e 7400 6972     s init. %s...tri
 808aa68:	2070 6974 656d 2f20 6420 7369 6174 636e     p time / distanc
 808aa78:	0065 2d2d 2500 756c 0073 3d54 2520 302e     e.--.%lus.T= %.0
 808aa88:	2066 0046 3a7a 2e25 6632 6900 756d 6920     f F.z:%.2f.imu i
 808aa98:	696e 2e74 6620 6961 656c 0064 2e25 6630     nit. failed.%.0f
 808aaa8:	6d00 6870 2500 756c 6320 696c 6b63 0073     .mph.%lu clicks.
 808aab8:	7120 253a 0075 7061 7770 7464 6800 6732      q:%u.appwdt.h2g
 808aac8:	0032 004e 4e4e 0045 4e45 0045 5345 0045     2.N.NNE.ENE.ESE.
 808aad8:	5353 0045 5353 0057 5357 0057 4e57 0057     SSE.SSW.WSW.WNW.
 808aae8:	4e4e 0057                                   NNW.

0808aaec <_ZL12particleLogo>:
	...
 808ab10:	0000 0100 0080 0000 0000 0000 0000 0000     ................
 808ab20:	0000 0100 0080 0000 0000 0000 0000 0000     ................
 808ab30:	0000 0100 0080 0000 0000 0000 0000 0000     ................
 808ab40:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ab50:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ab60:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ab70:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
 808ab80:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
 808ab90:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
 808aba0:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
 808abb0:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
 808abc0:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
 808abd0:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
 808abe0:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
 808abf0:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
 808ac00:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
 808ac10:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
 808ac20:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
 808ac30:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
 808ac40:	0000 ffc3 c3ff 0000 0000 0000 0000 0000     ................
 808ac50:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
 808ac60:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
 808ac70:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
 808ac80:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
 808ac90:	0000 ff43 c2ff 0000 0000 0000 0000 0000     ..C.............
 808aca0:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
 808acb0:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
 808acc0:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
 808acd0:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
 808ace0:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
 808acf0:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
 808ad00:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
 808ad10:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
 808ad20:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
 808ad30:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
 808ad40:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
 808ad50:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
 808ad60:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
 808ad70:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ad80:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ad90:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
 808ada0:	0000 0100 0080 0000 0000 0000 0000 0000     ................
 808adb0:	0000 0100 0080 0000 0000 0000 0000 0000     ................
 808adc0:	0000 0100 0080 0000 0000 0000 0000 0000     ................
	...

0808adec <_ZL15signal_off_icon>:
 808adec:	0000 0000 4000 4020 4010 4009 4005 400e     .....@ @.@.@.@.@
 808adfc:	400b 8029 4029 0000                         .@).)@..

0808ae04 <_ZL16gnss_fix_icon_10>:
 808ae04:	0000 000c 0033 002d 805e 805e 002d 0033     ....3.-.^.^.-.3.
 808ae14:	000c 0000                                   ....

0808ae18 <_ZL16power_sleep_icon>:
	...
 808ae3c:	0000 0004 0000 0000 0078 0000 0100 00f0     ........x.......
 808ae4c:	0000 0300 00f0 0000 0f00 00e0 0000 1f00     ................
 808ae5c:	00e0 0000 3f00 00e0 0000 3f00 00c0 0000     .....?.....?....
 808ae6c:	7f00 00c0 0000 ff00 00c0 0000 ff00 00c0     ................
 808ae7c:	0000 ff00 00c0 0000 ff01 00c0 0000 ff01     ................
 808ae8c:	00c0 0000 ff01 00c0 0000 ff03 00c0 0000     ................
 808ae9c:	ff03 00c0 0000 ff03 00e0 0000 ff03 00e0     ................
 808aeac:	0000 ff03 00e0 0000 ff01 00f0 0000 ff01     ................
 808aebc:	00f0 0000 ff01 00f8 0000 ff01 00fc 0000     ................
 808aecc:	ff00 00fe 0000 ff00 00ff 0000 7f00 80ff     ................
 808aedc:	0000 7f00 c0ff 0000 3f00 f0ff 0000 1f00     .........?......
 808aeec:	feff 0000 1f00 ffff 00f8 0700 ffff 00f0     ................
 808aefc:	0300 ffff 00c0 0100 ffff 0080 0000 fe3f     ..............?.
 808af0c:	0000 0000 e007 0000 0000 0000 0000 0000     ................
	...

0808af38 <_ZL14satellite_icon>:
 808af38:	0000 002c 007e 003e 007c 007e 8037 8003     ..,.~.>.|.~.7...
 808af48:	0003 0000                                   ....

0808af4c <_ZL14signal_2G_icon>:
 808af4c:	0000 0000 e079 e079 0009 6039 6079 2041     ....y.y...9`y`A 
 808af5c:	e079 c079 0000 0000                         y.y.....

0808af64 <_ZZ16heading2cardinaldE10directions>:
 808af64:	aaca 0808 aacc 0808 aad1 0808 aad0 0808     ................
 808af74:	c08f 0808 aad4 0808 aad5 0808 aad8 0808     ................
 808af84:	c16f 0808 aadc 0808 aadd 0808 aae0 0808     o...............
 808af94:	aaea 0808 aae4 0808 aae9 0808 aae8 0808     ................

0808afa4 <_ZL16ASSISTNOW_DOMAIN>:
 808afa4:	6e6f 696c 656e 6c2d 7669 3165 732e 7265     online-live1.ser
 808afb4:	6976 6563 2e73 2d75 6c62 786f 632e 6d6f     vices.u-blox.com
 808afc4:	7500 7862 6d20 6773 6920 766e 6c61 6469     .ubx msg invalid
 808afd4:	6c20 6e65 7500 7862 6920 746e 7265 616e      len.ubx interna
 808afe4:	206c 7265 3172 5b00 6c25 5d75 5220 2078     l err1.[%lu] Rx 
 808aff4:	414e 2d56 5650 0054 255b 756c 205d 7852     NAV-PVT.[%lu] Rx
 808b004:	4e20 5641 532d 4154 5554 0053 255b 756c      NAV-STATUS.[%lu
 808b014:	205d 7852 4e20 5641 412d 504f 5453 5441     ] Rx NAV-AOPSTAT
 808b024:	5355 2520 0064 255b 756c 205d 7852 4120     US %d.[%lu] Rx A
 808b034:	4b43 412d 4b43 5b00 6c25 5d75 5220 2078     CK-ACK.[%lu] Rx 
 808b044:	4341 2d4b 414e 004b 6275 2078 6863 6365     ACK-NAK.ubx chec
 808b054:	736b 6d75 6520 7272 6620 726f 6d20 6773     ksum err for msg
 808b064:	2520 2e30 5834 5b00 6c25 5d75 5220 7365      %0.4X.[%lu] Res
 808b074:	6c6f 6976 676e 4120 7373 7369 4e74 776f     olving AssistNow
 808b084:	6420 6d6f 6961 2e6e 5b00 6c25 5d75 4320      domain..[%lu] C
 808b094:	6e6f 656e 7463 6e69 2067 6f74 4120 7373     onnecting to Ass
 808b0a4:	7369 4e74 776f 002e 3650 2d42 3154 5362     istNow..P6B-T1bS
 808b0b4:	5579 7765 3930 6361 624e 5a4c 414e 4700     yUew09acNbLZNA.G
 808b0c4:	5445 2f20 6547 4f74 6c6e 6e69 4465 7461     ET /GetOnlineDat
 808b0d4:	2e61 7361 7868 743f 6b6f 6e65 253d 3b73     a.ashx?token=%s;
 808b0e4:	6164 6174 7974 6570 653d 6870 612c 6d6c     datatype=eph,alm
 808b0f4:	612c 7875 203b 5448 5054 312f 312e 000a     ,aux; HTTP/1.1..
 808b104:	6f48 7473 203a 7325 0a0a 5b00 6c25 5d75     Host: %s...[%lu]
 808b114:	5320 6e65 2074 6572 7571 7365 3a74 5b00      Sent request:.[
 808b124:	6c25 5d75 4720 5445 2f20 6547 4f74 6c6e     %lu] GET /GetOnl
 808b134:	6e69 4465 7461 2e61 7361 7868 743f 6b6f     ineData.ashx?tok
 808b144:	6e65 253d 3b73 6164 6174 7974 6570 653d     en=%s;datatype=e
 808b154:	6870 612c 6d6c 612c 7875 203b 5448 5054     ph,alm,aux; HTTP
 808b164:	312f 312e 5b00 6c25 5d75 4820 736f 3a74     /1.1.[%lu] Host:
 808b174:	2520 0073 255b 756c 205d 6157 7469 6e69      %s.[%lu] Waitin
 808b184:	2067 6f66 2072 7341 6973 7473 6f4e 2077     g for AssistNow 
 808b194:	6572 7073 6e6f 6573 002e 255b 756c 205d     response..[%lu] 
 808b1a4:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
 808b1b4:	2074 6f74 4120 7373 7369 4e74 776f 002e     t to AssistNow..
 808b1c4:	255b 756c 205d 6146 6c69 6465 7420 206f     [%lu] Failed to 
 808b1d4:	6572 6f73 766c 2065 7341 6973 7473 6f4e     resolve AssistNo
 808b1e4:	2077 6f64 616d 6e69 002e 255b 756c 205d     w domain..[%lu] 
 808b1f4:	6552 7571 7365 6974 676e 4120 7373 7369     Requesting Assis
 808b204:	4e74 776f 4f20 6c6e 6e69 2e65 5b00 6c25     tNow Online..[%l
 808b214:	5d75 4620 726f 6177 6472 6465 2520 756c     u] Forwarded %lu
 808b224:	6220 7479 7365 6f20 2066 7341 6973 7473      bytes of Assist
 808b234:	6f4e 2077 6f74 7220 6365 6965 6576 2e72     Now to receiver.
 808b244:	4e00 206f 6361 206b 6f66 2072 4643 2d47     .No ack for CFG-
 808b254:	4d50 0032 6f4e 6120 6b63 6620 726f 4320     PM2.No ack for C
 808b264:	4746 522d 5441 0045 6f4e 6120 6b63 6620     FG-RATE.No ack f
 808b274:	726f 4320 4746 4e2d 5641 0035 6f4e 6120     or CFG-NAV5.No a
 808b284:	6b63 6620 726f 4320 4746 4d2d 4753 4e20     ck for CFG-MSG N
 808b294:	5641 502d 5456 4e00 206f 6361 206b 6f66     AV-PVT.No ack fo
 808b2a4:	2072 4643 2d47 534d 2047 414e 2d56 5453     r CFG-MSG NAV-ST
 808b2b4:	5441 5355 4e00 206f 6361 206b 6f66 2072     ATUS.No ack for 
 808b2c4:	4643 2d47 4643 0047 6f4e 6120 6b63 6620     CFG-CFG.No ack f
 808b2d4:	726f 4320 4746 4d2d 4753 4e20 5641 412d     or CFG-MSG NAV-A
 808b2e4:	504f 5453 5441 5355 5b00 6c25 5d75 5720     OPSTATUS.[%lu] W
 808b2f4:	6961 6974 676e 6620 726f 4120 504f 0000     aiting for AOP..

0808b304 <_ZTV17PublishQueueAsync>:
	...
 808b30c:	265d 0808 26a5 0808 7550 6c62 7369 5168     ]&...&..PublishQ
 808b31c:	6575 6575 7341 6e79 0063 6964 6373 7261     ueueAsync.discar
 808b32c:	4f64 646c 7645 6e65 2074 6573 6f63 646e     dOldEvent second
 808b33c:	7645 6e65 3d74 6425 7320 6174 7472 253d     Event=%d start=%
 808b34c:	786c 6e20 7865 3d74 6c25 2078 6e65 3d64     lx next=%lx end=
 808b35c:	6c25 2078 756e 456d 6576 746e 3d73 7525     %lx numEvents=%u
 808b36c:	7100 6575 6575 6e69 2067 7665 6e65 4e74     .queueing eventN
 808b37c:	6d61 3d65 7325 6420 7461 3d61 7325 7420     ame=%s data=%s t
 808b38c:	6c74 253d 2064 6c66 6761 3173 253d 2064     tl=%d flags1=%d 
 808b39c:	6c66 6761 3273 253d 2064 6973 657a 253d     flags2=%d size=%
 808b3ac:	0064 7570 6c62 7369 6568 2064 7573 6363     d.published succ
 808b3bc:	7365 6673 6c75 796c 7000 6275 696c 6873     essfully.publish
 808b3cc:	6465 6620 6961 656c 2c64 7720 6c69 206c     ed failed, will 
 808b3dc:	6572 7274 2079 6e69 2520 756c 6d20 0073     retry in %lu ms.
 808b3ec:	7570 6c62 7369 6968 676e 2520 2073 7325     publishing %s %s
 808b3fc:	7420 6c74 253d 2064 6c66 6761 3d73 7825      ttl=%d flags=%x
 808b40c:	6100 7070 702e 6275 0071 0000               .app.pubq...

0808b418 <_ZTV12Adafruit_GFX>:
	...
 808b428:	326d 0808 5193 0808 00a5 0808 2bad 0808     m2...Q.......+..
 808b438:	2ccd 0808 2ce9 0808 2c6d 0808 2d03 0808     .,...,..m,...-..
 808b448:	2d3b 0808 2d57 0808                         ;-..W-..

0808b450 <_ZL4font>:
 808b450:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 808b460:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 808b470:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 808b480:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 808b490:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 808b4a0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 808b4b0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 808b4c0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 808b4d0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 808b4e0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 808b4f0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 808b500:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 808b510:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 808b520:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 808b530:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 808b540:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 808b550:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 808b560:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 808b570:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 808b580:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 808b590:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 808b5a0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 808b5b0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 808b5c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 808b5d0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 808b5e0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 808b5f0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 808b600:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 808b610:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 808b620:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 808b630:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 808b640:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 808b650:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 808b660:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 808b670:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 808b680:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 808b690:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 808b6a0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 808b6b0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 808b6c0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 808b6d0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 808b6e0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 808b6f0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 808b700:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 808b710:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 808b720:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 808b730:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 808b740:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 808b750:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 808b760:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 808b770:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 808b780:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 808b790:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 808b7a0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 808b7b0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 808b7c0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 808b7d0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 808b7e0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 808b7f0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 808b800:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 808b810:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 808b820:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 808b830:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 808b840:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 808b850:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 808b860:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 808b870:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 808b880:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 808b890:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 808b8a0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 808b8b0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 808b8c0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 808b8d0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 808b8e0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 808b8f0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 808b900:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 808b910:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 808b920:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 808b930:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 808b940:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

0808b94c <_ZTV15Adafruit_SH1106>:
	...
 808b954:	0117 0808 1a51 0808 326d 0808 5193 0808     ....Q...m2...Q..
 808b964:	3d41 0808 2bad 0808 3b19 0808 3911 0808     A=...+...;...9..
 808b974:	2c6d 0808 2d03 0808 2d3b 0808 2d57 0808     m,...-..;-..W-..

0808b984 <_ZTV8SPIClass>:
	...
 808b98c:	49d1 0808 49d3 0808                         .I...I..

0808b994 <_ZL14clock_divisors>:
 808b994:	0800 1810 2820 3830                         .... (08

0808b99c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 808b9a4:	4c55 0808 4c5b 0808 4d4f 0808 4c67 0808     UL..[L..OM..gL..
 808b9b4:	4c57 0808                                   WL..

0808b9b8 <_ZTV9TCPClient>:
	...
 808b9c0:	1ced 0808 1d21 0808 4bfd 0808 4c17 0808     ....!....K...L..
 808b9d0:	4dcd 0808 4d1b 0808 4ced 0808 4c3f 0808     .M...M...L..?L..
 808b9e0:	4efd 0808 4c6d 0808 4d6b 0808 4e49 0808     .N..mL..kM..IN..
 808b9f0:	5041 0808 5093 0808 4c27 0808 5005 0808     AP...P..'L...P..
 808ba00:	4c41 0808 6977 6972 676e 5400 5043 6c43     AL..wiring.TCPCl
 808ba10:	6569 746e 7320 636f 656b 3d74 7825 6c00     ient socket=%x.l
 808ba20:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 808ba30:	0d00 000a 3025 3031 2075 5d00 0020 202c     ....%010u .] ., 
 808ba40:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 808ba50:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 808ba60:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 808ba70:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 808ba80:	6300 646d 6800 646e 7300 7274 006d 6966     .cmd.hnd.strm.fi
 808ba90:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 808baa0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 808bab0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 808bac0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 808bad0:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
 808bae0:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 808baf0:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
 808bb00:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 808bb10:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 808bb20:	0065 0000                                   e...

0808bb24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808bb2c:	5955 0808 595b 0808 5971 0808 5967 0808     UY..[Y..qY..gY..
 808bb3c:	5957 0808                                   WY..

0808bb40 <_ZTV9IPAddress>:
	...
 808bb48:	5ec3 0808 5eb5 0808 5eb7 0808               .^...^...^..

0808bb54 <_ZTV9USBSerial>:
	...
 808bb5c:	5f5d 0808 5fa1 0808 5f7b 0808 5193 0808     ]_..._..{_...Q..
 808bb6c:	5f75 0808 5f5f 0808 5f67 0808 5f9b 0808     u_..__..g_..._..
 808bb7c:	5f6f 0808 5f59 0808                         o_..Y_..

0808bb84 <_ZTVN5spark13CellularClassE>:
	...
 808bb8c:	60c5 0808                                   .`..

0808bb90 <_ZN5spark7NetworkE>:
 808bb90:	10b8 2000                                   ... 

0808bb94 <_ZTV11USARTSerial>:
	...
 808bb9c:	610d 0808 6131 0808 613d 0808 5193 0808     .a..1a..=a...Q..
 808bbac:	6119 0808 6125 0808 611f 0808 612b 0808     .a..%a...a..+a..
 808bbbc:	610f 0808 6113 0808                         .a...a..

0808bbc4 <_ZTV7TwoWire>:
	...
 808bbcc:	621b 0808 6265 0808 623d 0808 621d 0808     .b..eb..=b...b..
 808bbdc:	6245 0808 624d 0808 6255 0808 625d 0808     Eb..Mb..Ub..]b..
 808bbec:	7173 7472 0000 0000                         sqrt....

0808bbf4 <npio2_hw>:
 808bbf4:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 808bc04:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 808bc14:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 808bc24:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 808bc34:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 808bc44:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 808bc54:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 808bc64:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0808bc74 <two_over_pi>:
 808bc74:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 808bc84:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 808bc94:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 808bca4:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 808bcb4:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 808bcc4:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 808bcd4:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 808bce4:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 808bcf4:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 808bd04:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 808bd14:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 808bd24:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 808bd34:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 808bd44:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 808bd54:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 808bd64:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 808bd74:	e27b 0060 8c6b 00c0                         {.`.k...

0808bd7c <init_jk>:
 808bd7c:	0002 0000 0003 0000 0004 0000 0006 0000     ................
 808bd8c:	0000 0000                                   ....

0808bd90 <PIo2>:
 808bd90:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 808bda0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 808bdb0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 808bdc0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0808bdd0 <atanlo>:
 808bdd0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 808bde0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

0808bdf0 <atanhi>:
 808bdf0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 808be00:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

0808be10 <day_name.4723>:
 808be10:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808be20:	6972 6153 4a74                                   riSat

0808be25 <mon_name.4724>:
 808be25:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808be35:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808be45:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808be55:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808be65:	6425 000a                                   %d..

0808be69 <_ctype_>:
 808be69:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808be79:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808be89:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808be99:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808bea9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808beb9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808bec9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808bed9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808bee9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808bf6c <__sf_fake_stdin>:
	...

0808bf8c <__sf_fake_stdout>:
	...

0808bfac <__sf_fake_stderr>:
	...
 808bfcc:	0043 0000                                   C...

0808bfd0 <__month_lengths>:
 808bfd0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808bfe0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808bff0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808c000:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808c010:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808c020:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808c030:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808c040:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808c050:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 808c060:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 808c070:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 808c080:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
 808c090:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
 808c0a0:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
 808c0b0:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
 808c0c0:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
 808c0d0:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
 808c0e0:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
 808c0f0:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
 808c100:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
 808c110:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
 808c120:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
 808c130:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
 808c140:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
 808c150:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
 808c160:	7461 7275 6164 0079 4825 253a 3a4d 5325     aturday.%H:%M:%S
 808c170:	2500 2f6d 6425 252f 0079 6125 2520 2062     .%m/%d/%y.%a %b 
 808c180:	6525 2520 3a48 4d25 253a 2053 5925 2500     %e %H:%M:%S %Y.%
 808c190:	2061 6225 2520 2065 4825 253a 3a4d 5325     a %b %e %H:%M:%S
 808c1a0:	2520 205a 5925 2500 3a49 4d25 253a 2053      %Z %Y.%I:%M:%S 
 808c1b0:	7025 0000                                   %p..

0808c1b4 <_C_time_locale>:
 808c1b4:	c091 0808 c095 0808 c099 0808 c09d 0808     ................
 808c1c4:	c0a1 0808 c0a5 0808 c0a9 0808 c0ad 0808     ................
 808c1d4:	c0b1 0808 c0b5 0808 c0b9 0808 c0bd 0808     ................
 808c1e4:	c0c1 0808 c0c9 0808 c0d2 0808 c0d8 0808     ................
 808c1f4:	c0a1 0808 c0de 0808 c0e3 0808 c0e8 0808     ................
 808c204:	c0ef 0808 c0f9 0808 c101 0808 c10a 0808     ................
 808c214:	c113 0808 c117 0808 c11b 0808 c11f 0808     ................
 808c224:	c123 0808 c127 0808 c12b 0808 c12f 0808     #...'...+.../...
 808c234:	c136 0808 c13d 0808 c145 0808 c14f 0808     6...=...E...O...
 808c244:	c158 0808 c15f 0808 c168 0808 c171 0808     X..._...h...q...
 808c254:	c17a 0808 a8db 0808 a8de 0808 c18f 0808     z...............
 808c264:	c0c1 0808 c0c9 0808 c0d2 0808 c0d8 0808     ................
 808c274:	c0a1 0808 c0de 0808 c0e3 0808 c0e8 0808     ................
 808c284:	c0ef 0808 c0f9 0808 c101 0808 c10a 0808     ................
 808c294:	ba82 0808 c1a7 0808 b10e 0808 b10e 0808     ................
 808c2a4:	b10e 0808 b10e 0808 b10e 0808 5a54 4700     ............TZ.G
 808c2b4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808c2c4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808c2d4:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808c2e4:	3a6e 6825 2575 006e                         n:%hu%n.

0808c2ec <link_const_variable_data_end>:
 808c2ec:	08081a5d 	.word	0x08081a5d
 808c2f0:	08082625 	.word	0x08082625
 808c2f4:	08082b95 	.word	0x08082b95
 808c2f8:	080832fd 	.word	0x080832fd
 808c2fc:	0808390d 	.word	0x0808390d
 808c300:	08084191 	.word	0x08084191
 808c304:	08084bbd 	.word	0x08084bbd
 808c308:	080852e1 	.word	0x080852e1
 808c30c:	08085629 	.word	0x08085629
 808c310:	08085671 	.word	0x08085671
 808c314:	080860d1 	.word	0x080860d1
 808c318:	080863f1 	.word	0x080863f1
 808c31c:	080864d5 	.word	0x080864d5
 808c320:	08086595 	.word	0x08086595
 808c324:	08086619 	.word	0x08086619
 808c328:	080866dd 	.word	0x080866dd
 808c32c:	080867a1 	.word	0x080867a1
